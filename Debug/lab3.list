
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e0  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e670  0800e670  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e670  0800e670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e678  0800e678  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e67c  0800e67c  0001e67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800e680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00001d34  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001de4  20001de4  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038c43  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074cd  00000000  00000000  00058d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef8  00000000  00000000  000601f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d28  00000000  00000000  000620e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b525  00000000  00000000  00063e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000241fc  00000000  00000000  0008f335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eabc5  00000000  00000000  000b3531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019e0f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ddc  00000000  00000000  0019e148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ce78 	.word	0x0800ce78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	0800ce78 	.word	0x0800ce78

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_ZN4Task6onInitEv>:
public:
    Task(uint8_t priority);
    virtual ~Task() = default;
    
    // Виртуальные методы для переопределения
    virtual void onInit() {}
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <_ZN4Task9onSuspendEv>:
    virtual void update() = 0;
    virtual void onSuspend() {}
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <_ZNK11UartControl9isEnabledEv>:
    // Обновление (вызывается из задачи)
    void update();
    
    // Получение состояния
    UartState getState() const { return currentState; }
    bool isEnabled() const { return currentState == UartState::ENABLED; }
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf0c      	ite	eq
 80005cc:	2301      	moveq	r3, #1
 80005ce:	2300      	movne	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <_ZNK9Sequencer9isPlayingEv>:
    
    // Управление воспроизведением
    void play();
    void stop();
    void pause();
    bool isPlaying() const { return project.isPlaying; }
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <_ZNK9Sequencer6getBPMEv>:
    const Project& getProject() const { return project; }
    
    // Настройки
    void setBPM(uint16_t bpm);
    void setVolume(uint8_t volume);
    uint16_t getBPM() const { return project.bpm; }
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <_ZNK9Sequencer9getVolumeEv>:
    uint8_t getVolume() const { return project.volume; }
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZNK10MenuSystem14getCurrentModeEv>:
    
    // Обновление (вызывается из задачи)
    void update();
    
    // Получение состояния
    SequencerMode getCurrentMode() const { return currentMode; }
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_ZN10MenuSystem12getEditStateEv>:
    EditState& getEditState() { return editState; }
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3304      	adds	r3, #4
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <_ZN4TaskD1Ev>:
    virtual ~Task() = default;
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <_ZN4TaskD1Ev+0x1c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	0800de8c 	.word	0x0800de8c

0800067c <_ZN4TaskD0Ev>:
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ffe9 	bl	800065c <_ZN4TaskD1Ev>
 800068a:	2110      	movs	r1, #16
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f00b fa39 	bl	800bb04 <_ZdlPvj>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN12KeyboardTaskC1Ev>:

// Статические переменные
KeyboardTask* KeyboardTask::instance = nullptr;

// Реализация KeyboardTask
KeyboardTask::KeyboardTask() : Task(10), keyboard(Keyboard::getInstance()) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	210a      	movs	r1, #10
 80006a8:	4618      	mov	r0, r3
 80006aa:	f007 f811 	bl	80076d0 <_ZN4TaskC1Eh>
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <_ZN12KeyboardTaskC1Ev+0x34>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	f005 fa72 	bl	8005b9c <_ZN8Keyboard11getInstanceEv>
 80006b8:	4602      	mov	r2, r0
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	611a      	str	r2, [r3, #16]
    instance = this;
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_ZN12KeyboardTaskC1Ev+0x38>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0800de70 	.word	0x0800de70
 80006d4:	200000cc 	.word	0x200000cc

080006d8 <_ZN12KeyboardTask6onInitEv>:

void KeyboardTask::onInit() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    keyboard.init();
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 fa7f 	bl	8005be8 <_ZN8Keyboard4initEv>
    keyboard.setCallback(keyEventCallback);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <_ZN12KeyboardTask6onInitEv+0x28>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f005 fc2d 	bl	8005f50 <_ZN8Keyboard11setCallbackEPFvh8KeyEventE>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	08000815 	.word	0x08000815

08000704 <_ZN12KeyboardTask6updateEv>:

void KeyboardTask::update() {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    // Отладочный вывод каждые 3000мс
    static uint32_t lastKeyboardDebug = 0;
    uint32_t currentTime = HAL_GetTick();
 800070c:	f007 f8ae 	bl	800786c <HAL_GetTick>
 8000710:	60f8      	str	r0, [r7, #12]
    if (currentTime - lastKeyboardDebug >= 3000) {
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <_ZN12KeyboardTask6updateEv+0x44>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800071e:	4293      	cmp	r3, r2
 8000720:	d909      	bls.n	8000736 <_ZN12KeyboardTask6updateEv+0x32>
        Uart::getInstance().printf("KeyboardTask::update called\n");
 8000722:	f006 fae5 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8000726:	4603      	mov	r3, r0
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <_ZN12KeyboardTask6updateEv+0x48>)
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fb69 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        lastKeyboardDebug = currentTime;
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <_ZN12KeyboardTask6updateEv+0x44>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6013      	str	r3, [r2, #0]
    }
    
    keyboard.scan();
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	691b      	ldr	r3, [r3, #16]
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fab8 	bl	8005cb0 <_ZN8Keyboard4scanEv>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000d0 	.word	0x200000d0
 800074c:	0800ce90 	.word	0x0800ce90

08000750 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent>:

void KeyboardTask::onKeyEvent(uint8_t keyCode, KeyEvent event) {
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	460b      	mov	r3, r1
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	72fb      	strb	r3, [r7, #11]
    switch (event) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d022      	beq.n	80007aa <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0x5a>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b02      	cmp	r3, #2
 8000768:	dc49      	bgt.n	80007fe <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xae>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0x28>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d010      	beq.n	8000798 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0x48>
                // Остальные клавиши - ноты
                PianoController::getInstance().onKeyPress(keyCode);
            }
            break;
    }
}
 8000776:	e042      	b.n	80007fe <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xae>
            Uart::getInstance().printf("Key %d pressed\n", keyCode);
 8000778:	f006 faba 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	461a      	mov	r2, r3
 8000780:	4921      	ldr	r1, [pc, #132]	; (8000808 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xb8>)
 8000782:	f006 fb3e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            MenuSystem::getInstance().onKeyPress(keyCode);
 8000786:	f002 fe05 	bl	8003394 <_ZN10MenuSystem11getInstanceEv>
 800078a:	4602      	mov	r2, r0
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f002 fe57 	bl	8003444 <_ZN10MenuSystem10onKeyPressEh>
            break;
 8000796:	e032      	b.n	80007fe <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xae>
            MenuSystem::getInstance().onKeyRelease(keyCode);
 8000798:	f002 fdfc 	bl	8003394 <_ZN10MenuSystem11getInstanceEv>
 800079c:	4602      	mov	r2, r0
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4610      	mov	r0, r2
 80007a4:	f002 fe9c 	bl	80034e0 <_ZN10MenuSystem12onKeyReleaseEh>
            break;
 80007a8:	e029      	b.n	80007fe <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xae>
            Uart::getInstance().printf("Key %d long pressed\n", keyCode);
 80007aa:	f006 faa1 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4916      	ldr	r1, [pc, #88]	; (800080c <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xbc>)
 80007b4:	f006 fb25 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            if (keyCode < 8) {
 80007b8:	7afb      	ldrb	r3, [r7, #11]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d816      	bhi.n	80007ec <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0x9c>
                DrumPreset drums[] = {
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xc0>)
 80007c0:	f107 0410 	add.w	r4, r7, #16
 80007c4:	461d      	mov	r5, r3
 80007c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                Synthesizer::getInstance().playDrum(drums[keyCode], 80);
 80007d2:	f005 fceb 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	3330      	adds	r3, #48	; 0x30
 80007dc:	443b      	add	r3, r7
 80007de:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80007e2:	2250      	movs	r2, #80	; 0x50
 80007e4:	4619      	mov	r1, r3
 80007e6:	f005 fe79 	bl	80064dc <_ZN11Synthesizer8playDrumE10DrumPreseth>
            break;
 80007ea:	e007      	b.n	80007fc <_ZN12KeyboardTask10onKeyEventEh8KeyEvent+0xac>
                PianoController::getInstance().onKeyPress(keyCode);
 80007ec:	f006 f994 	bl	8006b18 <_ZN15PianoController11getInstanceEv>
 80007f0:	4602      	mov	r2, r0
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4610      	mov	r0, r2
 80007f8:	f006 f9d8 	bl	8006bac <_ZN15PianoController10onKeyPressEh>
            break;
 80007fc:	bf00      	nop
}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	; 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bdb0      	pop	{r4, r5, r7, pc}
 8000806:	bf00      	nop
 8000808:	0800ceb0 	.word	0x0800ceb0
 800080c:	0800cec0 	.word	0x0800cec0
 8000810:	0800ced8 	.word	0x0800ced8

08000814 <_ZN12KeyboardTask16keyEventCallbackEh8KeyEvent>:

void KeyboardTask::keyEventCallback(uint8_t keyCode, KeyEvent event) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
    if (instance) {
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <_ZN12KeyboardTask16keyEventCallbackEh8KeyEvent+0x2c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <_ZN12KeyboardTask16keyEventCallbackEh8KeyEvent+0x22>
        instance->onKeyEvent(keyCode, event);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_ZN12KeyboardTask16keyEventCallbackEh8KeyEvent+0x2c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	79f9      	ldrb	r1, [r7, #7]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff8d 	bl	8000750 <_ZN12KeyboardTask10onKeyEventEh8KeyEvent>
    }
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000cc 	.word	0x200000cc

08000844 <_ZN11DisplayTaskC1Ev>:

// Реализация DisplayTask
DisplayTask::DisplayTask() : Task(20), display(Display::getInstance()), lastUpdateTime(0) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2114      	movs	r1, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f006 ff3d 	bl	80076d0 <_ZN4TaskC1Eh>
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <_ZN11DisplayTaskC1Ev+0x34>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	f004 fe22 	bl	80054a4 <_ZN7Display11getInstanceEv>
 8000860:	4602      	mov	r2, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
}
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800de54 	.word	0x0800de54

0800087c <_ZN11DisplayTask6onInitEv>:

void DisplayTask::onInit() {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    display.init();
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fe31 	bl	80054f0 <_ZN7Display4initEv>
    display.clear(DisplayColor::BLACK);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fec2 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    display.setCursor(0, 0);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 ff0d 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("STM32F4 Synthesizer");
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	4919      	ldr	r1, [pc, #100]	; (8000914 <_ZN11DisplayTask6onInitEv+0x98>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f88a 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 15);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	220f      	movs	r2, #15
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 ff00 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Keyboard Ready");
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	4914      	ldr	r1, [pc, #80]	; (8000918 <_ZN11DisplayTask6onInitEv+0x9c>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 f87d 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 30);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	221e      	movs	r2, #30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fef3 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("UART Ready");
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	490e      	ldr	r1, [pc, #56]	; (800091c <_ZN11DisplayTask6onInitEv+0xa0>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 f870 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 45);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	222d      	movs	r2, #45	; 0x2d
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fee6 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Press any key");
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <_ZN11DisplayTask6onInitEv+0xa4>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 f863 	bl	80059c8 <_ZN7Display5printEPKc>
    display.update();
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fea9 	bl	800565e <_ZN7Display6updateEv>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	0800cef8 	.word	0x0800cef8
 8000918:	0800cf0c 	.word	0x0800cf0c
 800091c:	0800cf1c 	.word	0x0800cf1c
 8000920:	0800cf28 	.word	0x0800cf28

08000924 <_ZN11DisplayTask6updateEv>:

void DisplayTask::update() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 800092c:	f006 ff9e 	bl	800786c <HAL_GetTick>
 8000930:	60f8      	str	r0, [r7, #12]
    
    // Обновляем дисплей каждые 50 мс
    if (currentTime - lastUpdateTime >= 50) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b31      	cmp	r3, #49	; 0x31
 800093c:	d905      	bls.n	800094a <_ZN11DisplayTask6updateEv+0x26>
        updateDisplay();
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f808 	bl	8000954 <_ZN11DisplayTask13updateDisplayEv>
        lastUpdateTime = currentTime;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	615a      	str	r2, [r3, #20]
    }
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <_ZN11DisplayTask13updateDisplayEv>:

void DisplayTask::updateDisplay() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    // Делегируем отрисовку в SequencerRenderer
    SequencerRenderer& renderer = SequencerRenderer::getInstance();
 800095c:	f002 f916 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 8000960:	60f8      	str	r0, [r7, #12]
    MenuSystem& menuSystem = MenuSystem::getInstance();
 8000962:	f002 fd17 	bl	8003394 <_ZN10MenuSystem11getInstanceEv>
 8000966:	60b8      	str	r0, [r7, #8]
    
    switch (menuSystem.getCurrentMode()) {
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f7ff fe5f 	bl	800062c <_ZNK10MenuSystem14getCurrentModeEv>
 800096e:	4603      	mov	r3, r0
 8000970:	2b04      	cmp	r3, #4
 8000972:	d826      	bhi.n	80009c2 <_ZN11DisplayTask13updateDisplayEv+0x6e>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <_ZN11DisplayTask13updateDisplayEv+0x28>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	08000991 	.word	0x08000991
 8000980:	08000999 	.word	0x08000999
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b3 	.word	0x080009b3
 800098c:	080009bb 	.word	0x080009bb
        case SequencerMode::SPLASH_SCREEN:
            renderer.drawSplashScreen();
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f002 f92f 	bl	8002bf4 <_ZN17SequencerRenderer16drawSplashScreenEv>
            break;
 8000996:	e014      	b.n	80009c2 <_ZN11DisplayTask13updateDisplayEv+0x6e>
            
        case SequencerMode::MAIN_MENU:
            renderer.drawMainMenu();
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f002 f97b 	bl	8002c94 <_ZN17SequencerRenderer12drawMainMenuEv>
            break;
 800099e:	e010      	b.n	80009c2 <_ZN11DisplayTask13updateDisplayEv+0x6e>
            
        case SequencerMode::EDIT_MODE:
            renderer.drawEditMode(menuSystem.getEditState());
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f7ff fe4f 	bl	8000644 <_ZN10MenuSystem12getEditStateEv>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4619      	mov	r1, r3
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f002 f9e6 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            break;
 80009b0:	e007      	b.n	80009c2 <_ZN11DisplayTask13updateDisplayEv+0x6e>
            
        case SequencerMode::SETTINGS_MODE:
            renderer.drawSettingsMode();
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f002 fa0e 	bl	8002dd4 <_ZN17SequencerRenderer16drawSettingsModeEv>
            break;
 80009b8:	e003      	b.n	80009c2 <_ZN11DisplayTask13updateDisplayEv+0x6e>
            
        case SequencerMode::HELP_SCREEN:
            renderer.drawHelpScreen();
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f002 fa76 	bl	8002eac <_ZN17SequencerRenderer14drawHelpScreenEv>
            break;
 80009c0:	bf00      	nop
    }
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop

080009cc <_ZN8UartTaskC1Ev>:

// Реализация UartTask
UartTask::UartTask() : Task(30), uart(Uart::getInstance()) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	211e      	movs	r1, #30
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 fe79 	bl	80076d0 <_ZN4TaskC1Eh>
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <_ZN8UartTaskC1Ev+0x2c>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	f006 f984 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	611a      	str	r2, [r3, #16]
}
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	0800de38 	.word	0x0800de38

080009fc <_ZN8UartTask6onInitEv>:

void UartTask::onInit() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    uart.init();
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f006 f999 	bl	8006d40 <_ZN4Uart4initEv>
    
    // Запускаем прием данных по прерыванию
    static uint8_t rxBuffer;
    HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <_ZN8UartTask6onInitEv+0x3c>)
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <_ZN8UartTask6onInitEv+0x40>)
 8000a14:	f00a f8f2 	bl	800abfc <HAL_UART_Receive_IT>
    
    uart.printf("STM32F4 C++ System Started\n");
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	4908      	ldr	r1, [pc, #32]	; (8000a40 <_ZN8UartTask6onInitEv+0x44>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f006 f9ef 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    uart.printf("Keyboard, Display, Buzzer ready\n");
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <_ZN8UartTask6onInitEv+0x48>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 f9e9 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d4 	.word	0x200000d4
 8000a3c:	200002fc 	.word	0x200002fc
 8000a40:	0800cf38 	.word	0x0800cf38
 8000a44:	0800cf54 	.word	0x0800cf54

08000a48 <_ZN8UartTask6updateEv>:

void UartTask::update() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    processReceivedData();
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f805 	bl	8000a60 <_ZN8UartTask19processReceivedDataEv>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <_ZN8UartTask19processReceivedDataEv>:

void UartTask::processReceivedData() {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    // Проверяем, включен ли UART
    if (!UartControl::getInstance().isEnabled()) {
 8000a68:	f003 f908 	bl	8003c7c <_ZN11UartControl11getInstanceEv>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fda4 	bl	80005bc <_ZNK11UartControl9isEnabledEv>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f083 0301 	eor.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f040 8142 	bne.w	8000d06 <_ZN8UartTask19processReceivedDataEv+0x2a6>
        return;
    }
    
    uint8_t data;
    while (uart.receive(data)) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	f107 020f 	add.w	r2, r7, #15
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 f9de 	bl	8006e4e <_ZN4Uart7receiveERh>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 8137 	beq.w	8000d08 <_ZN8UartTask19processReceivedDataEv+0x2a8>
        // Эхо полученных данных
        uart.send(data);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 f96d 	bl	8006d82 <_ZN4Uart4sendEh>
        
        // Обработка команд секвенсора
        switch (data) {
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	2b74      	cmp	r3, #116	; 0x74
 8000aac:	dce9      	bgt.n	8000a82 <_ZN8UartTask19processReceivedDataEv+0x22>
 8000aae:	2b48      	cmp	r3, #72	; 0x48
 8000ab0:	da06      	bge.n	8000ac0 <_ZN8UartTask19processReceivedDataEv+0x60>
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	f000 811f 	beq.w	8000cf6 <_ZN8UartTask19processReceivedDataEv+0x296>
 8000ab8:	2b0d      	cmp	r3, #13
 8000aba:	f000 811c 	beq.w	8000cf6 <_ZN8UartTask19processReceivedDataEv+0x296>
 8000abe:	e121      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
 8000ac0:	3b48      	subs	r3, #72	; 0x48
 8000ac2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ac4:	d8dd      	bhi.n	8000a82 <_ZN8UartTask19processReceivedDataEv+0x22>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <_ZN8UartTask19processReceivedDataEv+0x6c>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000b81 	.word	0x08000b81
 8000ad0:	08000a83 	.word	0x08000a83
 8000ad4:	08000a83 	.word	0x08000a83
 8000ad8:	08000a83 	.word	0x08000a83
 8000adc:	08000a83 	.word	0x08000a83
 8000ae0:	08000a83 	.word	0x08000a83
 8000ae4:	08000a83 	.word	0x08000a83
 8000ae8:	08000a83 	.word	0x08000a83
 8000aec:	08000c7f 	.word	0x08000c7f
 8000af0:	08000a83 	.word	0x08000a83
 8000af4:	08000a83 	.word	0x08000a83
 8000af8:	08000be3 	.word	0x08000be3
 8000afc:	08000cd1 	.word	0x08000cd1
 8000b00:	08000a83 	.word	0x08000a83
 8000b04:	08000a83 	.word	0x08000a83
 8000b08:	08000a83 	.word	0x08000a83
 8000b0c:	08000a83 	.word	0x08000a83
 8000b10:	08000a83 	.word	0x08000a83
 8000b14:	08000a83 	.word	0x08000a83
 8000b18:	08000a83 	.word	0x08000a83
 8000b1c:	08000a83 	.word	0x08000a83
 8000b20:	08000a83 	.word	0x08000a83
 8000b24:	08000a83 	.word	0x08000a83
 8000b28:	08000a83 	.word	0x08000a83
 8000b2c:	08000a83 	.word	0x08000a83
 8000b30:	08000a83 	.word	0x08000a83
 8000b34:	08000a83 	.word	0x08000a83
 8000b38:	08000a83 	.word	0x08000a83
 8000b3c:	08000a83 	.word	0x08000a83
 8000b40:	08000a83 	.word	0x08000a83
 8000b44:	08000a83 	.word	0x08000a83
 8000b48:	08000a83 	.word	0x08000a83
 8000b4c:	08000b81 	.word	0x08000b81
 8000b50:	08000a83 	.word	0x08000a83
 8000b54:	08000a83 	.word	0x08000a83
 8000b58:	08000a83 	.word	0x08000a83
 8000b5c:	08000a83 	.word	0x08000a83
 8000b60:	08000a83 	.word	0x08000a83
 8000b64:	08000a83 	.word	0x08000a83
 8000b68:	08000a83 	.word	0x08000a83
 8000b6c:	08000c7f 	.word	0x08000c7f
 8000b70:	08000a83 	.word	0x08000a83
 8000b74:	08000a83 	.word	0x08000a83
 8000b78:	08000be3 	.word	0x08000be3
 8000b7c:	08000cd1 	.word	0x08000cd1
            case 'h':
            case 'H':
                uart.printf("\nSequencer Commands:\n");
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	4962      	ldr	r1, [pc, #392]	; (8000d10 <_ZN8UartTask19processReceivedDataEv+0x2b0>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f93b 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("h - help\n");
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4960      	ldr	r1, [pc, #384]	; (8000d14 <_ZN8UartTask19processReceivedDataEv+0x2b4>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 f935 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("s - status\n");
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	495e      	ldr	r1, [pc, #376]	; (8000d18 <_ZN8UartTask19processReceivedDataEv+0x2b8>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 f92f 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("t - tasks info\n");
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	495c      	ldr	r1, [pc, #368]	; (8000d1c <_ZN8UartTask19processReceivedDataEv+0x2bc>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 f929 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("save - save project\n");
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	495a      	ldr	r1, [pc, #360]	; (8000d20 <_ZN8UartTask19processReceivedDataEv+0x2c0>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f006 f923 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("load - load project\n");
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	4958      	ldr	r1, [pc, #352]	; (8000d24 <_ZN8UartTask19processReceivedDataEv+0x2c4>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f006 f91d 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("play - start playback\n");
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	4956      	ldr	r1, [pc, #344]	; (8000d28 <_ZN8UartTask19processReceivedDataEv+0x2c8>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 f917 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("stop - stop playback\n");
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4954      	ldr	r1, [pc, #336]	; (8000d2c <_ZN8UartTask19processReceivedDataEv+0x2cc>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f006 f911 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                break;
 8000be0:	e090      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
                
            case 's':
            case 'S':
                uart.printf("\nSequencer Status:\n");
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4952      	ldr	r1, [pc, #328]	; (8000d30 <_ZN8UartTask19processReceivedDataEv+0x2d0>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f90a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("Uptime: %lu ms\n", HAL_GetTick());
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691c      	ldr	r4, [r3, #16]
 8000bf2:	f006 fe3b 	bl	800786c <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	494e      	ldr	r1, [pc, #312]	; (8000d34 <_ZN8UartTask19processReceivedDataEv+0x2d4>)
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f006 f900 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("BPM: %d\n", Sequencer::getInstance().getBPM());
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691c      	ldr	r4, [r3, #16]
 8000c06:	f000 fd53 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fcf3 	bl	80005f8 <_ZNK9Sequencer6getBPMEv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4948      	ldr	r1, [pc, #288]	; (8000d38 <_ZN8UartTask19processReceivedDataEv+0x2d8>)
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f006 f8f2 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("Volume: %d\n", Sequencer::getInstance().getVolume());
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691c      	ldr	r4, [r3, #16]
 8000c22:	f000 fd45 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fcf2 	bl	8000612 <_ZNK9Sequencer9getVolumeEv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4942      	ldr	r1, [pc, #264]	; (8000d3c <_ZN8UartTask19processReceivedDataEv+0x2dc>)
 8000c34:	4620      	mov	r0, r4
 8000c36:	f006 f8e4 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("Playing: %s\n", Sequencer::getInstance().isPlaying() ? "Yes" : "No");
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691c      	ldr	r4, [r3, #16]
 8000c3e:	f000 fd37 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcca 	bl	80005de <_ZNK9Sequencer9isPlayingEv>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_ZN8UartTask19processReceivedDataEv+0x1f4>
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <_ZN8UartTask19processReceivedDataEv+0x2e0>)
 8000c52:	e000      	b.n	8000c56 <_ZN8UartTask19processReceivedDataEv+0x1f6>
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <_ZN8UartTask19processReceivedDataEv+0x2e4>)
 8000c56:	461a      	mov	r2, r3
 8000c58:	493b      	ldr	r1, [pc, #236]	; (8000d48 <_ZN8UartTask19processReceivedDataEv+0x2e8>)
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f006 f8d1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                uart.printf("Active voices: %d\n", Synthesizer::getInstance().getActiveVoices());
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691c      	ldr	r4, [r3, #16]
 8000c64:	f005 faa2 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 fcde 	bl	800662c <_ZNK11Synthesizer15getActiveVoicesEv>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4935      	ldr	r1, [pc, #212]	; (8000d4c <_ZN8UartTask19processReceivedDataEv+0x2ec>)
 8000c76:	4620      	mov	r0, r4
 8000c78:	f006 f8c3 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                break;
 8000c7c:	e042      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
                
            case 'p':
            case 'P':
                uart.printf("\nPlayback toggled\n");
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4933      	ldr	r1, [pc, #204]	; (8000d50 <_ZN8UartTask19processReceivedDataEv+0x2f0>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 f8bc 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                if (Sequencer::getInstance().isPlaying()) {
 8000c8a:	f000 fd11 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fca4 	bl	80005de <_ZNK9Sequencer9isPlayingEv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00c      	beq.n	8000cb6 <_ZN8UartTask19processReceivedDataEv+0x256>
                    Sequencer::getInstance().stop();
 8000c9c:	f000 fd08 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fe01 	bl	80018aa <_ZN9Sequencer4stopEv>
                    uart.printf("Stopped\n");
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	4929      	ldr	r1, [pc, #164]	; (8000d54 <_ZN8UartTask19processReceivedDataEv+0x2f4>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 f8a7 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                } else {
                    Sequencer::getInstance().play();
                    uart.printf("Started\n");
                }
                break;
 8000cb4:	e026      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
                    Sequencer::getInstance().play();
 8000cb6:	f000 fcfb 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fdcb 	bl	8001858 <_ZN9Sequencer4playEv>
                    uart.printf("Started\n");
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	4924      	ldr	r1, [pc, #144]	; (8000d58 <_ZN8UartTask19processReceivedDataEv+0x2f8>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 f89a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                break;
 8000cce:	e019      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
                
            case 't':
            case 'T':
                uart.printf("\n=== TASKS INFO ===\n");
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4921      	ldr	r1, [pc, #132]	; (8000d5c <_ZN8UartTask19processReceivedDataEv+0x2fc>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 f893 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                Scheduler::getInstance().printTaskInfo();
 8000cdc:	f006 fb14 	bl	8007308 <_ZN9Scheduler11getInstanceEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fca4 	bl	8007630 <_ZNK9Scheduler13printTaskInfoEv>
                uart.printf("=== END TASKS INFO ===\n");
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	491c      	ldr	r1, [pc, #112]	; (8000d60 <_ZN8UartTask19processReceivedDataEv+0x300>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f006 f887 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                break;
 8000cf4:	e006      	b.n	8000d04 <_ZN8UartTask19processReceivedDataEv+0x2a4>
                
            case '\r':
            case '\n':
                uart.printf("\n> ");
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	491a      	ldr	r1, [pc, #104]	; (8000d64 <_ZN8UartTask19processReceivedDataEv+0x304>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f006 f880 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                break;
 8000d02:	bf00      	nop
    while (uart.receive(data)) {
 8000d04:	e6bd      	b.n	8000a82 <_ZN8UartTask19processReceivedDataEv+0x22>
        return;
 8000d06:	bf00      	nop
        }
    }
}
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	0800cf78 	.word	0x0800cf78
 8000d14:	0800cf90 	.word	0x0800cf90
 8000d18:	0800cf9c 	.word	0x0800cf9c
 8000d1c:	0800cfa8 	.word	0x0800cfa8
 8000d20:	0800cfb8 	.word	0x0800cfb8
 8000d24:	0800cfd0 	.word	0x0800cfd0
 8000d28:	0800cfe8 	.word	0x0800cfe8
 8000d2c:	0800d000 	.word	0x0800d000
 8000d30:	0800d018 	.word	0x0800d018
 8000d34:	0800d02c 	.word	0x0800d02c
 8000d38:	0800d03c 	.word	0x0800d03c
 8000d3c:	0800d048 	.word	0x0800d048
 8000d40:	0800d054 	.word	0x0800d054
 8000d44:	0800d058 	.word	0x0800d058
 8000d48:	0800d05c 	.word	0x0800d05c
 8000d4c:	0800d06c 	.word	0x0800d06c
 8000d50:	0800d080 	.word	0x0800d080
 8000d54:	0800d094 	.word	0x0800d094
 8000d58:	0800d0a0 	.word	0x0800d0a0
 8000d5c:	0800d0ac 	.word	0x0800d0ac
 8000d60:	0800d0c4 	.word	0x0800d0c4
 8000d64:	0800d0dc 	.word	0x0800d0dc

08000d68 <_ZN10BuzzerTaskC1Ev>:

// Реализация BuzzerTask
BuzzerTask::BuzzerTask() : Task(40), buzzer(Buzzer::getInstance()) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2128      	movs	r1, #40	; 0x28
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fcab 	bl	80076d0 <_ZN4TaskC1Eh>
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <_ZN10BuzzerTaskC1Ev+0x2c>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	f004 f91e 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	0800de1c 	.word	0x0800de1c

08000d98 <_ZN10BuzzerTask6onInitEv>:

void BuzzerTask::onInit() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    buzzer.init();
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f933 	bl	8005010 <_ZN6Buzzer4initEv>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_ZN10BuzzerTask6updateEv>:

void BuzzerTask::update() {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    buzzer.update();
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 f9e6 	bl	8005190 <_ZN6Buzzer6updateEv>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_ZN15SynthesizerTaskC1Ev>:

// Реализация SynthesizerTask
SynthesizerTask::SynthesizerTask() : Task(50), synthesizer(Synthesizer::getInstance()) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2132      	movs	r1, #50	; 0x32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 fc79 	bl	80076d0 <_ZN4TaskC1Eh>
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <_ZN15SynthesizerTaskC1Ev+0x2c>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f005 f9e2 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	611a      	str	r2, [r3, #16]
}
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	0800de00 	.word	0x0800de00

08000dfc <_ZN15SynthesizerTask6onInitEv>:

void SynthesizerTask::onInit() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    synthesizer.init();
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 f9f7 	bl	80061fc <_ZN11Synthesizer4initEv>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZN15SynthesizerTask6updateEv>:

void SynthesizerTask::update() {
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
    synthesizer.update();
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 fb92 	bl	800654c <_ZN11Synthesizer6updateEv>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN9PianoTaskC1Ev>:

// Реализация PianoTask
PianoTask::PianoTask() : Task(60), pianoController(PianoController::getInstance()) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	213c      	movs	r1, #60	; 0x3c
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fc47 	bl	80076d0 <_ZN4TaskC1Eh>
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <_ZN9PianoTaskC1Ev+0x2c>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	f005 fe66 	bl	8006b18 <_ZN15PianoController11getInstanceEv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	0800dde4 	.word	0x0800dde4

08000e60 <_ZN9PianoTask6onInitEv>:

void PianoTask::onInit() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    pianoController.init();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fe79 	bl	8006b64 <_ZN15PianoController4initEv>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZN9PianoTask6updateEv>:

void PianoTask::update() {
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    // PianoController doesn't need periodic updates
    // It responds to key events directly
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_ZN13SequencerTaskC1Ev>:

// Реализация SequencerTask
SequencerTask::SequencerTask() : Task(100), sequencer(Sequencer::getInstance()) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fc17 	bl	80076d0 <_ZN4TaskC1Eh>
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <_ZN13SequencerTaskC1Ev+0x3c>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	f000 fc02 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	611a      	str	r2, [r3, #16]
    Uart::getInstance().printf("SequencerTask constructor called\n");
 8000eb2:	f005 ff1d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4905      	ldr	r1, [pc, #20]	; (8000ed0 <_ZN13SequencerTaskC1Ev+0x40>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f005 ffa1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800ddc8 	.word	0x0800ddc8
 8000ed0:	0800d0e0 	.word	0x0800d0e0

08000ed4 <_ZN13SequencerTask6onInitEv>:

void SequencerTask::onInit() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    Uart::getInstance().printf("SequencerTask::onInit called\n");
 8000edc:	f005 ff08 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	490a      	ldr	r1, [pc, #40]	; (8000f0c <_ZN13SequencerTask6onInitEv+0x38>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 ff8c 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    sequencer.init();
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fc62 	bl	80017b8 <_ZN9Sequencer4initEv>
    Uart::getInstance().printf("SequencerTask::onInit completed\n");
 8000ef4:	f005 fefc 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4905      	ldr	r1, [pc, #20]	; (8000f10 <_ZN13SequencerTask6onInitEv+0x3c>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 ff80 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	0800d104 	.word	0x0800d104
 8000f10:	0800d124 	.word	0x0800d124

08000f14 <_ZN13SequencerTask6updateEv>:

void SequencerTask::update() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    // Отладочный вывод каждые 1000мс
    static uint32_t lastTaskDebug = 0;
    uint32_t currentTime = HAL_GetTick();
 8000f1c:	f006 fca6 	bl	800786c <HAL_GetTick>
 8000f20:	60f8      	str	r0, [r7, #12]
    if (currentTime - lastTaskDebug >= 1000) {
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <_ZN13SequencerTask6updateEv+0x44>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f2e:	d309      	bcc.n	8000f44 <_ZN13SequencerTask6updateEv+0x30>
        Uart::getInstance().printf("SequencerTask::update called\n");
 8000f30:	f005 fede 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <_ZN13SequencerTask6updateEv+0x48>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 ff62 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        lastTaskDebug = currentTime;
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <_ZN13SequencerTask6updateEv+0x44>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6013      	str	r3, [r2, #0]
    }
    
    sequencer.update();
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fd1d 	bl	8001988 <_ZN9Sequencer6updateEv>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000d8 	.word	0x200000d8
 8000f5c:	0800d148 	.word	0x0800d148

08000f60 <_ZN15UartControlTaskC1Ev>:

// Реализация UartControlTask
UartControlTask::UartControlTask() : Task(80), uartControl(UartControl::getInstance()) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2150      	movs	r1, #80	; 0x50
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fbaf 	bl	80076d0 <_ZN4TaskC1Eh>
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <_ZN15UartControlTaskC1Ev+0x2c>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	f002 fe80 	bl	8003c7c <_ZN11UartControl11getInstanceEv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0800ddac 	.word	0x0800ddac

08000f90 <_ZN15UartControlTask6onInitEv>:

void UartControlTask::onInit() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    uartControl.init();
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fe93 	bl	8003cc8 <_ZN11UartControl4initEv>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_ZN15UartControlTask6updateEv>:

void UartControlTask::update() {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
    uartControl.update();
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fed0 	bl	8003d5c <_ZN11UartControl6updateEv>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN9DebugTaskC1Ev>:

// Реализация DebugTask
DebugTask::DebugTask() : Task(90), lastPrintTime(0) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	215a      	movs	r1, #90	; 0x5a
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fb7d 	bl	80076d0 <_ZN4TaskC1Eh>
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_ZN9DebugTaskC1Ev+0x28>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
}
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0800dd90 	.word	0x0800dd90

08000ff0 <_ZN9DebugTask6onInitEv>:

void DebugTask::onInit() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    lastPrintTime = HAL_GetTick();
 8000ff8:	f006 fc38 	bl	800786c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]
    Uart::getInstance().printf("DebugTask: Initialized (interval=%lu ms)\n", PRINT_INTERVAL_MS);
 8001002:	f005 fe75 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001006:	4603      	mov	r3, r0
 8001008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100c:	4903      	ldr	r1, [pc, #12]	; (800101c <_ZN9DebugTask6onInitEv+0x2c>)
 800100e:	4618      	mov	r0, r3
 8001010:	f005 fef7 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0800d168 	.word	0x0800d168

08001020 <_ZN9DebugTask6updateEv>:

void DebugTask::update() {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    // DebugTask теперь не выводит автоматически
    // Вывод только по команде через боковую кнопку
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_ZN9DebugTaskD1Ev>:
    UartControl& uartControl;
    void updateUartControl();
};

// Отладочная задача для вывода информации о шедулере
class DebugTask : public Task {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_ZN9DebugTaskD1Ev+0x20>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fb09 	bl	800065c <_ZN4TaskD1Ev>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800dd90 	.word	0x0800dd90

08001058 <_ZN9DebugTaskD0Ev>:
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffe7 	bl	8001034 <_ZN9DebugTaskD1Ev>
 8001066:	2114      	movs	r1, #20
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f00a fd4b 	bl	800bb04 <_ZdlPvj>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN15UartControlTaskD1Ev>:
class UartControlTask : public Task {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <_ZN15UartControlTaskD1Ev+0x20>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fae7 	bl	800065c <_ZN4TaskD1Ev>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	0800ddac 	.word	0x0800ddac

0800109c <_ZN15UartControlTaskD0Ev>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_ZN15UartControlTaskD1Ev>
 80010aa:	2114      	movs	r1, #20
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f00a fd29 	bl	800bb04 <_ZdlPvj>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZN13SequencerTaskD1Ev>:
class SequencerTask : public Task {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_ZN13SequencerTaskD1Ev+0x20>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fac5 	bl	800065c <_ZN4TaskD1Ev>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800ddc8 	.word	0x0800ddc8

080010e0 <_ZN13SequencerTaskD0Ev>:
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffe7 	bl	80010bc <_ZN13SequencerTaskD1Ev>
 80010ee:	2114      	movs	r1, #20
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f00a fd07 	bl	800bb04 <_ZdlPvj>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZN9PianoTaskD1Ev>:
class PianoTask : public Task {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_ZN9PianoTaskD1Ev+0x20>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff faa3 	bl	800065c <_ZN4TaskD1Ev>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800dde4 	.word	0x0800dde4

08001124 <_ZN9PianoTaskD0Ev>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffe7 	bl	8001100 <_ZN9PianoTaskD1Ev>
 8001132:	2114      	movs	r1, #20
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f00a fce5 	bl	800bb04 <_ZdlPvj>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN15SynthesizerTaskD1Ev>:
class SynthesizerTask : public Task {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_ZN15SynthesizerTaskD1Ev+0x20>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa81 	bl	800065c <_ZN4TaskD1Ev>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800de00 	.word	0x0800de00

08001168 <_ZN15SynthesizerTaskD0Ev>:
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe7 	bl	8001144 <_ZN15SynthesizerTaskD1Ev>
 8001176:	2114      	movs	r1, #20
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f00a fcc3 	bl	800bb04 <_ZdlPvj>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN10BuzzerTaskD1Ev>:
class BuzzerTask : public Task {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_ZN10BuzzerTaskD1Ev+0x20>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fa5f 	bl	800065c <_ZN4TaskD1Ev>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800de1c 	.word	0x0800de1c

080011ac <_ZN10BuzzerTaskD0Ev>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffe7 	bl	8001188 <_ZN10BuzzerTaskD1Ev>
 80011ba:	2114      	movs	r1, #20
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f00a fca1 	bl	800bb04 <_ZdlPvj>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN8UartTaskD1Ev>:
class UartTask : public Task {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_ZN8UartTaskD1Ev+0x20>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fa3d 	bl	800065c <_ZN4TaskD1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0800de38 	.word	0x0800de38

080011f0 <_ZN8UartTaskD0Ev>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffe7 	bl	80011cc <_ZN8UartTaskD1Ev>
 80011fe:	2114      	movs	r1, #20
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f00a fc7f 	bl	800bb04 <_ZdlPvj>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN11DisplayTaskD1Ev>:
class DisplayTask : public Task {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_ZN11DisplayTaskD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fa1b 	bl	800065c <_ZN4TaskD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800de54 	.word	0x0800de54

08001234 <_ZN11DisplayTaskD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN11DisplayTaskD1Ev>
 8001242:	2118      	movs	r1, #24
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00a fc5d 	bl	800bb04 <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN12KeyboardTaskD1Ev>:
class KeyboardTask : public Task {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_ZN12KeyboardTaskD1Ev+0x20>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f9f9 	bl	800065c <_ZN4TaskD1Ev>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800de70 	.word	0x0800de70

08001278 <_ZN12KeyboardTaskD0Ev>:
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_ZN12KeyboardTaskD1Ev>
 8001286:	2114      	movs	r1, #20
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f00a fc3b 	bl	800bb04 <_ZdlPvj>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN6ImagesC1Ev>:
    static constexpr uint16_t SPLASH_HEIGHT = 64;
    static constexpr uint16_t HELP_WIDTH = 128;
    static constexpr uint16_t HELP_HEIGHT = 64;
    
private:
    Images() : display(Display::getInstance()) {}
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	f004 f900 	bl	80054a4 <_ZN7Display11getInstanceEv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN6Images11getInstanceEv>:
const uint8_t help_image_data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // ... остальные данные будут сгенерированы image_converter.py
};

Images& Images::getInstance() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    static Images instance;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_ZN6Images11getInstanceEv+0x48>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f3bf 8f5b 	dmb	ish
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d010      	beq.n	80012f6 <_ZN6Images11getInstanceEv+0x42>
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <_ZN6Images11getInstanceEv+0x48>)
 80012d6:	f00a fc17 	bl	800bb08 <__cxa_guard_acquire>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <_ZN6Images11getInstanceEv+0x42>
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <_ZN6Images11getInstanceEv+0x4c>)
 80012ec:	f7ff ffd4 	bl	8001298 <_ZN6ImagesC1Ev>
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <_ZN6Images11getInstanceEv+0x48>)
 80012f2:	f00a fc15 	bl	800bb20 <__cxa_guard_release>
    return instance;
 80012f6:	4b02      	ldr	r3, [pc, #8]	; (8001300 <_ZN6Images11getInstanceEv+0x4c>)
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000e0 	.word	0x200000e0
 8001300:	200000dc 	.word	0x200000dc

08001304 <_ZN6Images4initEv>:

bool Images::init() {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    return true;
 800130c:	2301      	movs	r3, #1
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_ZN4BeatC1Ev>:
    Beat() : active(false), note(255), halfTone(false) {}
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	705a      	strb	r2, [r3, #1]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	709a      	strb	r2, [r3, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_ZN5BlockC1Ev>:
    Block() {
 800135a:	b5b0      	push	{r4, r5, r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2403      	movs	r4, #3
 8001366:	461d      	mov	r5, r3
 8001368:	2c00      	cmp	r4, #0
 800136a:	db05      	blt.n	8001378 <_ZN5BlockC1Ev+0x1e>
 800136c:	4628      	mov	r0, r5
 800136e:	f7ff ffe0 	bl	8001332 <_ZN4BeatC1Ev>
 8001372:	3503      	adds	r5, #3
 8001374:	3c01      	subs	r4, #1
 8001376:	e7f7      	b.n	8001368 <_ZN5BlockC1Ev+0xe>
        for (int i = 0; i < 4; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b03      	cmp	r3, #3
 8001380:	dc15      	bgt.n	80013ae <_ZN5BlockC1Ev+0x54>
            beats[i] = Beat();
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffd3 	bl	8001332 <_ZN4BeatC1Ev>
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	440b      	add	r3, r1
 8001398:	461a      	mov	r2, r3
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	8819      	ldrh	r1, [r3, #0]
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	8011      	strh	r1, [r2, #0]
 80013a4:	7093      	strb	r3, [r2, #2]
        for (int i = 0; i < 4; i++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e7e6      	b.n	800137c <_ZN5BlockC1Ev+0x22>
    }
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}

080013b8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fcbd 	bl	8001d40 <_ZNSaI5BlockED1Ev>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZNSt12_Vector_baseI5BlockSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fca0 	bl	8001d20 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implC1Ev>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZNSt6vectorI5BlockSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffeb 	bl	80013d0 <_ZNSt12_Vector_baseI5BlockSaIS0_EEC1Ev>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN5TrackC1Ev>:
    Track() : type(TrackType::DRUM), drumType(DrumPreset::KICK), currentBlock(0) {}
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3308      	adds	r3, #8
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ffe4 	bl	80013ea <_ZNSt6vectorI5BlockSaIS0_EEC1Ev>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	751a      	strb	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZN5Track8addBlockEv>:
    void addBlock() {
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
        blocks.push_back(Block());
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f103 0408 	add.w	r4, r3, #8
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff88 	bl	800135a <_ZN5BlockC1Ev>
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4620      	mov	r0, r4
 8001452:	f000 fcba 	bl	8001dca <_ZNSt6vectorI5BlockSaIS0_EE9push_backEOS0_>
    }
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <_ZN5Track15getCurrentBlockEv>:
    Block* getCurrentBlock() {
 800145e:	b590      	push	{r4, r7, lr}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
        if (blocks.empty()) return nullptr;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3308      	adds	r3, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fcbe 	bl	8001dec <_ZNKSt6vectorI5BlockSaIS0_EE5emptyEv>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <_ZN5Track15getCurrentBlockEv+0x1c>
 8001476:	2300      	movs	r3, #0
 8001478:	e01c      	b.n	80014b4 <_ZN5Track15getCurrentBlockEv+0x56>
        if (currentBlock >= blocks.size()) currentBlock = 0;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7d1b      	ldrb	r3, [r3, #20]
 800147e:	461c      	mov	r4, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3308      	adds	r3, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fccd 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 800148a:	4603      	mov	r3, r0
 800148c:	429c      	cmp	r4, r3
 800148e:	bf2c      	ite	cs
 8001490:	2301      	movcs	r3, #1
 8001492:	2300      	movcc	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <_ZN5Track15getCurrentBlockEv+0x42>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	751a      	strb	r2, [r3, #20]
        return &blocks[currentBlock];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f103 0208 	add.w	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7d1b      	ldrb	r3, [r3, #20]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f000 fccf 	bl	8001e50 <_ZNSt6vectorI5BlockSaIS0_EEixEj>
 80014b2:	4603      	mov	r3, r0
    }
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <_ZN5Track9nextBlockEv>:
    void nextBlock() {
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
        if (blocks.empty()) return;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3308      	adds	r3, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fc8f 	bl	8001dec <_ZNKSt6vectorI5BlockSaIS0_EE5emptyEv>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d112      	bne.n	80014fa <_ZN5Track9nextBlockEv+0x3e>
        currentBlock = (currentBlock + 1) % blocks.size();
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7d1b      	ldrb	r3, [r3, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	461c      	mov	r4, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fc9f 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	fbb4 f2f3 	udiv	r2, r4, r3
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	1ae3      	subs	r3, r4, r3
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	751a      	strb	r2, [r3, #20]
 80014f8:	e000      	b.n	80014fc <_ZN5Track9nextBlockEv+0x40>
        if (blocks.empty()) return;
 80014fa:	bf00      	nop
    }
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd90      	pop	{r4, r7, pc}

08001502 <_ZN5Track5resetEv>:
    void reset() {
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
        currentBlock = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	751a      	strb	r2, [r3, #20]
    }
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_ZN5TrackD1Ev>:
struct Track {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3308      	adds	r3, #8
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fc33 	bl	8001d94 <_ZNSt6vectorI5BlockSaIS0_EED1Ev>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZN7ProjectC1Ev>:
    Project() : bpm(120), volume(8), isPlaying(false), lastBeatTime(0), currentBeat(0) {
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2405      	movs	r4, #5
 8001544:	461d      	mov	r5, r3
 8001546:	2c00      	cmp	r4, #0
 8001548:	db05      	blt.n	8001556 <_ZN7ProjectC1Ev+0x1e>
 800154a:	4628      	mov	r0, r5
 800154c:	f7ff ff5a 	bl	8001404 <_ZN5TrackC1Ev>
 8001550:	3518      	adds	r5, #24
 8001552:	3c01      	subs	r4, #1
 8001554:	e7f7      	b.n	8001546 <_ZN7ProjectC1Ev+0xe>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2278      	movs	r2, #120	; 0x78
 800155a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2208      	movs	r2, #8
 8001562:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        for (int i = 0; i < 4; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b03      	cmp	r3, #3
 8001586:	dc27      	bgt.n	80015d8 <_ZN7ProjectC1Ev+0xa0>
            tracks[i].type = TrackType::DRUM;
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
            tracks[i].drumType = static_cast<DrumPreset>(i % 8);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4259      	negs	r1, r3
 800159e:	f003 0207 	and.w	r2, r3, #7
 80015a2:	f001 0307 	and.w	r3, r1, #7
 80015a6:	bf58      	it	pl
 80015a8:	425a      	negpl	r2, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	460b      	mov	r3, r1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	440b      	add	r3, r1
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4403      	add	r3, r0
 80015b8:	3304      	adds	r3, #4
 80015ba:	601a      	str	r2, [r3, #0]
            tracks[i].addBlock(); // Добавляем один пустой блок
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff31 	bl	8001432 <_ZN5Track8addBlockEv>
        for (int i = 0; i < 4; i++) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e7d4      	b.n	8001582 <_ZN7ProjectC1Ev+0x4a>
        for (int i = 4; i < 6; i++) {
 80015d8:	2304      	movs	r3, #4
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	dc16      	bgt.n	8001610 <_ZN7ProjectC1Ev+0xd8>
            tracks[i].type = TrackType::PIANO;
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
            tracks[i].addBlock(); // Добавляем один пустой блок
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff15 	bl	8001432 <_ZN5Track8addBlockEv>
        for (int i = 4; i < 6; i++) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3301      	adds	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	e7e5      	b.n	80015dc <_ZN7ProjectC1Ev+0xa4>
    }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bdb0      	pop	{r4, r5, r7, pc}

0800161a <_ZNK7Project15getBeatDurationEv>:
    uint32_t getBeatDuration() const {
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
        return 60000 / (bpm * 4); // 60 секунд / (BPM * 4) для четвертной ноты
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800162e:	fb92 f3f3 	sdiv	r3, r2, r3
    }
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_ZN7ProjectD1Ev>:
struct Project {
 800163e:	b590      	push	{r4, r7, lr}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <_ZN7ProjectD1Ev+0x24>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429c      	cmp	r4, r3
 8001656:	d004      	beq.n	8001662 <_ZN7ProjectD1Ev+0x24>
 8001658:	3c18      	subs	r4, #24
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff5e 	bl	800151c <_ZN5TrackD1Ev>
 8001660:	e7f7      	b.n	8001652 <_ZN7ProjectD1Ev+0x14>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <_ZN9SequencerC1Ev>:
    static constexpr uint16_t MIN_BPM = 60;
    static constexpr uint16_t MAX_BPM = 240;
    static constexpr uint8_t MAX_VOLUME = 10;
    
private:
    Sequencer() = default;
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff5e 	bl	8001538 <_ZN7ProjectC1Ev>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZN9SequencerD1Ev>:
    ~Sequencer() = default;
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffd4 	bl	800163e <_ZN7ProjectD1Ev>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <__tcf_0>:
#include "drivers/Uart.hpp"
#include <algorithm>
#include "stm32f4xx_hal.h"

Sequencer& Sequencer::getInstance() {
    static Sequencer instance;
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <__tcf_0+0xc>)
 80016a6:	f7ff ffee 	bl	8001686 <_ZN9SequencerD1Ev>
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200000e4 	.word	0x200000e4

080016b0 <_ZN9Sequencer11getInstanceEv>:
Sequencer& Sequencer::getInstance() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    static Sequencer instance;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <_ZN9Sequencer11getInstanceEv+0x50>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f3bf 8f5b 	dmb	ish
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <_ZN9Sequencer11getInstanceEv+0x48>
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <_ZN9Sequencer11getInstanceEv+0x50>)
 80016d2:	f00a fa19 	bl	800bb08 <__cxa_guard_acquire>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <_ZN9Sequencer11getInstanceEv+0x48>
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <_ZN9Sequencer11getInstanceEv+0x54>)
 80016e8:	f7ff ffc0 	bl	800166c <_ZN9SequencerC1Ev>
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <_ZN9Sequencer11getInstanceEv+0x58>)
 80016ee:	f00a fe2a 	bl	800c346 <atexit>
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <_ZN9Sequencer11getInstanceEv+0x50>)
 80016f4:	f00a fa14 	bl	800bb20 <__cxa_guard_release>
    return instance;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <_ZN9Sequencer11getInstanceEv+0x54>)
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000184 	.word	0x20000184
 8001704:	200000e4 	.word	0x200000e4
 8001708:	080016a1 	.word	0x080016a1

0800170c <_ZN5TrackaSEOS_>:
struct Track {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f103 0208 	add.w	r2, r3, #8
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3308      	adds	r3, #8
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f000 fb9f 	bl	8001e76 <_ZNSt6vectorI5BlockSaIS0_EEaSEOS2_>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	7d1a      	ldrb	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	751a      	strb	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_ZN7ProjectaSEOS_>:
struct Project {
 800174a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2505      	movs	r5, #5
 8001758:	683c      	ldr	r4, [r7, #0]
 800175a:	461e      	mov	r6, r3
 800175c:	2d00      	cmp	r5, #0
 800175e:	db07      	blt.n	8001770 <_ZN7ProjectaSEOS_+0x26>
 8001760:	4621      	mov	r1, r4
 8001762:	4630      	mov	r0, r6
 8001764:	f7ff ffd2 	bl	800170c <_ZN5TrackaSEOS_>
 8001768:	3618      	adds	r6, #24
 800176a:	3418      	adds	r4, #24
 800176c:	3d01      	subs	r5, #1
 800176e:	e7f5      	b.n	800175c <_ZN7ProjectaSEOS_+0x12>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017b8 <_ZN9Sequencer4initEv>:

bool Sequencer::init() {
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b0ab      	sub	sp, #172	; 0xac
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    project = Project();
 80017c0:	687c      	ldr	r4, [r7, #4]
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff feb6 	bl	8001538 <_ZN7ProjectC1Ev>
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff ffb9 	bl	800174a <_ZN7ProjectaSEOS_>
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff2e 	bl	800163e <_ZN7ProjectD1Ev>
    lastUpdateTime = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    
    // Добавляем тестовые данные для проверки
    Uart::getInstance().printf("Initializing Sequencer with test data\n");
 80017ea:	f005 fa81 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4917      	ldr	r1, [pc, #92]	; (8001850 <_ZN9Sequencer4initEv+0x98>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fb05 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // Создаем тестовые блоки для первой дорожки (барабаны)
    if (project.tracks[0].blocks.empty()) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3308      	adds	r3, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 faf5 	bl	8001dec <_ZNKSt6vectorI5BlockSaIS0_EE5emptyEv>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01d      	beq.n	8001844 <_ZN9Sequencer4initEv+0x8c>
        project.tracks[0].addBlock();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe11 	bl	8001432 <_ZN5Track8addBlockEv>
        Block& block = project.tracks[0].blocks[0];
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3308      	adds	r3, #8
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fb1a 	bl	8001e50 <_ZNSt6vectorI5BlockSaIS0_EEixEj>
 800181c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        block.beats[0].active = true;  // Удар на первом такте
 8001820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
        block.beats[2].active = true;  // Удар на третьем такте
 8001828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800182c:	2201      	movs	r2, #1
 800182e:	719a      	strb	r2, [r3, #6]
        
        // Устанавливаем более слышимый тип барабана
        project.tracks[0].drumType = DrumPreset::SNARE;  // Малый барабан вместо бас-барабана
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	605a      	str	r2, [r3, #4]
        
        Uart::getInstance().printf("Added test drum pattern with SNARE\n");
 8001836:	f005 fa5b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800183a:	4603      	mov	r3, r0
 800183c:	4905      	ldr	r1, [pc, #20]	; (8001854 <_ZN9Sequencer4initEv+0x9c>)
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fadf 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    }
    
    return true;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	37ac      	adds	r7, #172	; 0xac
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	0800d194 	.word	0x0800d194
 8001854:	0800d1bc 	.word	0x0800d1bc

08001858 <_ZN9Sequencer4playEv>:

void Sequencer::play() {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    project.isPlaying = true;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    project.lastBeatTime = HAL_GetTick();
 8001868:	f006 f800 	bl	800786c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    project.currentBeat = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    
    // Сбросить все дорожки
    for (int i = 0; i < MAX_TRACKS; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b05      	cmp	r3, #5
 8001884:	dc0d      	bgt.n	80018a2 <_ZN9Sequencer4playEv+0x4a>
        project.tracks[i].reset();
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe34 	bl	8001502 <_ZN5Track5resetEv>
    for (int i = 0; i < MAX_TRACKS; i++) {
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3301      	adds	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e7ee      	b.n	8001880 <_ZN9Sequencer4playEv+0x28>
    }
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZN9Sequencer4stopEv>:

void Sequencer::stop() {
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
    project.isPlaying = false;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    project.currentBeat = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    
    // Остановить все звуки
    Synthesizer::getInstance().allNotesOff();
 80018c2:	f004 fc73 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fddb 	bl	8006484 <_ZN11Synthesizer11allNotesOffEv>
    
    // Сбросить все дорожки
    for (int i = 0; i < MAX_TRACKS; i++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	dc0d      	bgt.n	80018f4 <_ZN9Sequencer4stopEv+0x4a>
        project.tracks[i].reset();
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe0b 	bl	8001502 <_ZN5Track5resetEv>
    for (int i = 0; i < MAX_TRACKS; i++) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e7ee      	b.n	80018d2 <_ZN9Sequencer4stopEv+0x28>
    }
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <__tcf_1>:
    project.volume = std::min(MAX_VOLUME, volume);
}

Track& Sequencer::getTrack(uint8_t trackIndex) {
    if (trackIndex >= MAX_TRACKS) {
        static Track dummy;
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4801      	ldr	r0, [pc, #4]	; (8001908 <__tcf_1+0xc>)
 8001902:	f7ff fe0b 	bl	800151c <_ZN5TrackD1Ev>
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000188 	.word	0x20000188

0800190c <_ZN9Sequencer8getTrackEh>:
Track& Sequencer::getTrack(uint8_t trackIndex) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
    if (trackIndex >= MAX_TRACKS) {
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d923      	bls.n	8001966 <_ZN9Sequencer8getTrackEh+0x5a>
        static Track dummy;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <_ZN9Sequencer8getTrackEh+0x70>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	f3bf 8f5b 	dmb	ish
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d013      	beq.n	8001962 <_ZN9Sequencer8getTrackEh+0x56>
 800193a:	4810      	ldr	r0, [pc, #64]	; (800197c <_ZN9Sequencer8getTrackEh+0x70>)
 800193c:	f00a f8e4 	bl	800bb08 <__cxa_guard_acquire>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <_ZN9Sequencer8getTrackEh+0x56>
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <_ZN9Sequencer8getTrackEh+0x74>)
 8001952:	f7ff fd57 	bl	8001404 <_ZN5TrackC1Ev>
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <_ZN9Sequencer8getTrackEh+0x78>)
 8001958:	f00a fcf5 	bl	800c346 <atexit>
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <_ZN9Sequencer8getTrackEh+0x70>)
 800195e:	f00a f8df 	bl	800bb20 <__cxa_guard_release>
        return dummy;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_ZN9Sequencer8getTrackEh+0x74>)
 8001964:	e006      	b.n	8001974 <_ZN9Sequencer8getTrackEh+0x68>
    }
    return project.tracks[trackIndex];
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001a0 	.word	0x200001a0
 8001980:	20000188 	.word	0x20000188
 8001984:	080018fd 	.word	0x080018fd

08001988 <_ZN9Sequencer6updateEv>:
    if (track.blocks.size() < MAX_BLOCKS_PER_TRACK) {
        track.addBlock();
    }
}

void Sequencer::update() {
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
    // Отладочный вывод каждые 500мс
    static uint32_t lastUpdateDebug = 0;
    uint32_t currentTime = HAL_GetTick();
 8001990:	f005 ff6c 	bl	800786c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]
    if (currentTime - lastUpdateDebug >= 500) {
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <_ZN9Sequencer6updateEv+0x118>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019a2:	d30b      	bcc.n	80019bc <_ZN9Sequencer6updateEv+0x34>
        Uart::getInstance().printf("Sequencer::update called, isPlaying=%d\n", project.isPlaying);
 80019a4:	f005 f9a4 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019ae:	461a      	mov	r2, r3
 80019b0:	493c      	ldr	r1, [pc, #240]	; (8001aa4 <_ZN9Sequencer6updateEv+0x11c>)
 80019b2:	f005 fa26 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        lastUpdateDebug = currentTime;
 80019b6:	4a3a      	ldr	r2, [pc, #232]	; (8001aa0 <_ZN9Sequencer6updateEv+0x118>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6013      	str	r3, [r2, #0]
    }
    
    if (!project.isPlaying) return;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d165      	bne.n	8001a98 <_ZN9Sequencer6updateEv+0x110>
    
    uint32_t beatDuration = project.getBeatDuration();
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fe23 	bl	800161a <_ZNK7Project15getBeatDurationEv>
 80019d4:	60f8      	str	r0, [r7, #12]
    
    // Отладочный вывод каждые 100мс
    static uint32_t lastDebugTime = 0;
    if (currentTime - lastDebugTime >= 100) {
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <_ZN9Sequencer6updateEv+0x120>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b63      	cmp	r3, #99	; 0x63
 80019e0:	d919      	bls.n	8001a16 <_ZN9Sequencer6updateEv+0x8e>
        Uart::getInstance().printf("Sequencer update: playing=%d, beat=%d, duration=%lu, elapsed=%lu\n", 
 80019e2:	f005 f985 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
                                  project.isPlaying, project.currentBeat, beatDuration, 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
        Uart::getInstance().printf("Sequencer update: playing=%d, beat=%d, duration=%lu, elapsed=%lu\n", 
 80019ec:	4619      	mov	r1, r3
                                  project.isPlaying, project.currentBeat, beatDuration, 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
        Uart::getInstance().printf("Sequencer update: playing=%d, beat=%d, duration=%lu, elapsed=%lu\n", 
 80019f4:	461c      	mov	r4, r3
                                  currentTime - project.lastBeatTime);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
        Uart::getInstance().printf("Sequencer update: playing=%d, beat=%d, duration=%lu, elapsed=%lu\n", 
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4623      	mov	r3, r4
 8001a08:	460a      	mov	r2, r1
 8001a0a:	4928      	ldr	r1, [pc, #160]	; (8001aac <_ZN9Sequencer6updateEv+0x124>)
 8001a0c:	f005 f9f9 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        lastDebugTime = currentTime;
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <_ZN9Sequencer6updateEv+0x120>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]
    }
    
    // Проверяем, нужно ли сыграть следующий такт
    if (currentTime - project.lastBeatTime >= beatDuration) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d839      	bhi.n	8001a9a <_ZN9Sequencer6updateEv+0x112>
        Uart::getInstance().printf("Time to play beat! Duration=%lu, elapsed=%lu\n", 
 8001a26:	f005 f963 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
                                  beatDuration, currentTime - project.lastBeatTime);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
        Uart::getInstance().printf("Time to play beat! Duration=%lu, elapsed=%lu\n", 
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	491e      	ldr	r1, [pc, #120]	; (8001ab0 <_ZN9Sequencer6updateEv+0x128>)
 8001a38:	f005 f9e3 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        playBeat();
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f839 	bl	8001ab4 <_ZN9Sequencer8playBeatEv>
        project.lastBeatTime = currentTime;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        project.currentBeat = (project.currentBeat + 1) % 4;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a50:	3301      	adds	r3, #1
 8001a52:	425a      	negs	r2, r3
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	bf58      	it	pl
 8001a5e:	4253      	negpl	r3, r2
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        
        // Если закончили блок, переходим к следующему
        if (project.currentBeat == 0) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d113      	bne.n	8001a9a <_ZN9Sequencer6updateEv+0x112>
            for (int i = 0; i < MAX_TRACKS; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	dc0e      	bgt.n	8001a9a <_ZN9Sequencer6updateEv+0x112>
                project.tracks[i].nextBlock();
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fd16 	bl	80014bc <_ZN5Track9nextBlockEv>
            for (int i = 0; i < MAX_TRACKS; i++) {
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e7ee      	b.n	8001a76 <_ZN9Sequencer6updateEv+0xee>
    if (!project.isPlaying) return;
 8001a98:	bf00      	nop
            }
        }
    }
}
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	200001a4 	.word	0x200001a4
 8001aa4:	0800d1e0 	.word	0x0800d1e0
 8001aa8:	200001a8 	.word	0x200001a8
 8001aac:	0800d208 	.word	0x0800d208
 8001ab0:	0800d24c 	.word	0x0800d24c

08001ab4 <_ZN9Sequencer8playBeatEv>:

void Sequencer::playBeat() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6078      	str	r0, [r7, #4]
    Uart::getInstance().printf("Playing beat %d\n", project.currentBeat);
 8001abc:	f005 f918 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4931      	ldr	r1, [pc, #196]	; (8001b90 <_ZN9Sequencer8playBeatEv+0xdc>)
 8001aca:	f005 f99a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // Проходим по всем дорожкам
    for (int trackIndex = 0; trackIndex < MAX_TRACKS; trackIndex++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	dc57      	bgt.n	8001b88 <_ZN9Sequencer8playBeatEv+0xd4>
        Track& track = project.tracks[trackIndex];
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        Block* currentBlock = track.getCurrentBlock();
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fcb8 	bl	800145e <_ZN5Track15getCurrentBlockEv>
 8001aee:	60f8      	str	r0, [r7, #12]
        
        if (!currentBlock) {
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <_ZN9Sequencer8playBeatEv+0x54>
            Uart::getInstance().printf("Track %d: no current block\n", trackIndex);
 8001af6:	f005 f8fb 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4925      	ldr	r1, [pc, #148]	; (8001b94 <_ZN9Sequencer8playBeatEv+0xe0>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 f97e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            continue;
 8001b06:	e03b      	b.n	8001b80 <_ZN9Sequencer8playBeatEv+0xcc>
        }
        
        Beat& beat = currentBlock->beats[project.currentBeat];
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
        
        if (track.type == TrackType::DRUM) {
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d114      	bne.n	8001b4e <_ZN9Sequencer8playBeatEv+0x9a>
            if (beat.active) {
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <_ZN9Sequencer8playBeatEv+0x8a>
                Uart::getInstance().printf("Track %d: drum beat %d is active\n", trackIndex, project.currentBeat);
 8001b2c:	f005 f8e0 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4917      	ldr	r1, [pc, #92]	; (8001b98 <_ZN9Sequencer8playBeatEv+0xe4>)
 8001b3a:	f005 f962 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            }
            processDrumTrack(trackIndex, beat);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f82a 	bl	8001ba0 <_ZN9Sequencer16processDrumTrackEhRK4Beat>
 8001b4c:	e018      	b.n	8001b80 <_ZN9Sequencer8playBeatEv+0xcc>
        } else {
            if (beat.note != 255) {
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d00d      	beq.n	8001b72 <_ZN9Sequencer8playBeatEv+0xbe>
                Uart::getInstance().printf("Track %d: piano note %d on beat %d\n", trackIndex, beat.note, project.currentBeat);
 8001b56:	f005 f8cb 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <_ZN9Sequencer8playBeatEv+0xe8>)
 8001b6e:	f005 f948 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            }
            processPianoTrack(trackIndex, beat);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f850 	bl	8001c20 <_ZN9Sequencer17processPianoTrackEhRK4Beat>
    for (int trackIndex = 0; trackIndex < MAX_TRACKS; trackIndex++) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e7a4      	b.n	8001ad2 <_ZN9Sequencer8playBeatEv+0x1e>
        }
    }
}
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	0800d27c 	.word	0x0800d27c
 8001b94:	0800d290 	.word	0x0800d290
 8001b98:	0800d2ac 	.word	0x0800d2ac
 8001b9c:	0800d2d0 	.word	0x0800d2d0

08001ba0 <_ZN9Sequencer16processDrumTrackEhRK4Beat>:

void Sequencer::processDrumTrack(uint8_t trackIndex, const Beat& beat) {
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	72fb      	strb	r3, [r7, #11]
    if (!beat.active) return;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d12b      	bne.n	8001c14 <_ZN9Sequencer16processDrumTrackEhRK4Beat+0x74>
    
    Track& track = project.tracks[trackIndex];
 8001bbc:	7afa      	ldrb	r2, [r7, #11]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
    Synthesizer& synth = Synthesizer::getInstance();
 8001bcc:	f004 faee 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8001bd0:	6138      	str	r0, [r7, #16]
    
    // Играем барабанный звук
    synth.playDrum(track.drumType, project.volume * 12); // Масштабируем громкость
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001bdc:	461a      	mov	r2, r3
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	6938      	ldr	r0, [r7, #16]
 8001bea:	f004 fc77 	bl	80064dc <_ZN11Synthesizer8playDrumE10DrumPreseth>
    
    // Отладочный вывод
    Uart::getInstance().printf("Drum track %d: drum type %d, volume %d\n", 
 8001bee:	f005 f87f 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001bf2:	7afa      	ldrb	r2, [r7, #11]
                              trackIndex, (int)track.drumType, project.volume * 12);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001bfe:	461c      	mov	r4, r3
    Uart::getInstance().printf("Drum track %d: drum type %d, volume %d\n", 
 8001c00:	4623      	mov	r3, r4
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4423      	add	r3, r4
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <_ZN9Sequencer16processDrumTrackEhRK4Beat+0x7c>)
 8001c0e:	f005 f8f8 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 8001c12:	e000      	b.n	8001c16 <_ZN9Sequencer16processDrumTrackEhRK4Beat+0x76>
    if (!beat.active) return;
 8001c14:	bf00      	nop
}
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	0800d2f4 	.word	0x0800d2f4

08001c20 <_ZN9Sequencer17processPianoTrackEhRK4Beat>:

void Sequencer::processPianoTrack(uint8_t trackIndex, const Beat& beat) {
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	72fb      	strb	r3, [r7, #11]
    if (beat.note == 255) return; // Нет ноты
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d042      	beq.n	8001cbc <_ZN9Sequencer17processPianoTrackEhRK4Beat+0x9c>
    
    Synthesizer& synth = Synthesizer::getInstance();
 8001c36:	f004 fab9 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8001c3a:	61f8      	str	r0, [r7, #28]
    uint8_t midiNote = getMidiNote(beat.note, beat.halfTone);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7859      	ldrb	r1, [r3, #1]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	789b      	ldrb	r3, [r3, #2]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f840 	bl	8001ccc <_ZNK9Sequencer11getMidiNoteEhb>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	76fb      	strb	r3, [r7, #27]
    
    // Играем ноту на канале дорожки
    synth.noteOn(trackIndex, midiNote, project.volume * 12);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001c56:	461a      	mov	r2, r3
 8001c58:	0052      	lsls	r2, r2, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	7efa      	ldrb	r2, [r7, #27]
 8001c62:	7af9      	ldrb	r1, [r7, #11]
 8001c64:	69f8      	ldr	r0, [r7, #28]
 8001c66:	f004 fb1f 	bl	80062a8 <_ZN11Synthesizer6noteOnEhhh>
    
    // Отладочный вывод
    Uart::getInstance().printf("Piano track %d: note %d, midi %d, volume %d\n", 
 8001c6a:	f005 f841 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8001c6e:	7af9      	ldrb	r1, [r7, #11]
                              trackIndex, beat.note, midiNote, project.volume * 12);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	785b      	ldrb	r3, [r3, #1]
    Uart::getInstance().printf("Piano track %d: note %d, midi %d, volume %d\n", 
 8001c74:	461d      	mov	r5, r3
 8001c76:	7efa      	ldrb	r2, [r7, #27]
                              trackIndex, beat.note, midiNote, project.volume * 12);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001c7e:	461c      	mov	r4, r3
    Uart::getInstance().printf("Piano track %d: note %d, midi %d, volume %d\n", 
 8001c80:	4623      	mov	r3, r4
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4423      	add	r3, r4
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	460a      	mov	r2, r1
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <_ZN9Sequencer17processPianoTrackEhRK4Beat+0xa4>)
 8001c92:	f005 f8b6 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    // Останавливаем ноту через половину длительности такта
    // (это будет обработано в следующем update)
    
    // Автоматически останавливаем ноту через короткое время
    static uint32_t lastNoteTime = 0;
    uint32_t currentTime = HAL_GetTick();
 8001c96:	f005 fde9 	bl	800786c <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]
    if (currentTime - lastNoteTime > 100) { // 100мс задержка
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <_ZN9Sequencer17processPianoTrackEhRK4Beat+0xa8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	; 0x64
 8001ca6:	d90a      	bls.n	8001cbe <_ZN9Sequencer17processPianoTrackEhRK4Beat+0x9e>
        synth.noteOff(trackIndex, midiNote);
 8001ca8:	7efa      	ldrb	r2, [r7, #27]
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	4619      	mov	r1, r3
 8001cae:	69f8      	ldr	r0, [r7, #28]
 8001cb0:	f004 fba4 	bl	80063fc <_ZN11Synthesizer7noteOffEhh>
        lastNoteTime = currentTime;
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <_ZN9Sequencer17processPianoTrackEhRK4Beat+0xa8>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e000      	b.n	8001cbe <_ZN9Sequencer17processPianoTrackEhRK4Beat+0x9e>
    if (beat.note == 255) return; // Нет ноты
 8001cbc:	bf00      	nop
    }
}
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	0800d31c 	.word	0x0800d31c
 8001cc8:	200001ac 	.word	0x200001ac

08001ccc <_ZNK9Sequencer11getMidiNoteEhb>:

uint8_t Sequencer::getMidiNote(uint8_t note, bool halfTone) const {
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	70bb      	strb	r3, [r7, #2]
    // C=0, C#=1, D=2, D#=3, E=4, F=5, F#=6, G=7, G#=8, A=9, A#=10, B=11
    // MIDI C4 = 60, C5 = 72, C6 = 84
    uint8_t baseNote = note + (halfTone ? 1 : 0);
 8001cdc:	78bb      	ldrb	r3, [r7, #2]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_ZNK9Sequencer11getMidiNoteEhb+0x1a>
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	e000      	b.n	8001ce8 <_ZNK9Sequencer11getMidiNoteEhb+0x1c>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	4413      	add	r3, r2
 8001cec:	75fb      	strb	r3, [r7, #23]
    
    // Базовые MIDI ноты для октавы 4 (C4 = 60)
    uint8_t midiNotes[] = {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}; // C4-B4
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <_ZNK9Sequencer11getMidiNoteEhb+0x50>)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    if (baseNote >= 12) return 60; // Fallback
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b0b      	cmp	r3, #11
 8001cfe:	d901      	bls.n	8001d04 <_ZNK9Sequencer11getMidiNoteEhb+0x38>
 8001d00:	233c      	movs	r3, #60	; 0x3c
 8001d02:	e004      	b.n	8001d0e <_ZNK9Sequencer11getMidiNoteEhb+0x42>
    
    return midiNotes[baseNote];
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	3318      	adds	r3, #24
 8001d08:	443b      	add	r3, r7
 8001d0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	0800d34c 	.word	0x0800d34c

08001d20 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8b9 	bl	8001ea0 <_ZNSaI5BlockEC1Ev>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f8c1 	bl	8001eb8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZNSaI5BlockED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8c9 	bl	8001ee0 <_ZN9__gnu_cxx13new_allocatorI5BlockED1Ev>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_ZNSt12_Vector_baseI5BlockSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	109b      	asrs	r3, r3, #2
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <_ZNSt12_Vector_baseI5BlockSaIS0_EED1Ev+0x38>)
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001d76:	461a      	mov	r2, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8bc 	bl	8001ef6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fb19 	bl	80013b8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implD1Ev>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	aaaaaaab 	.word	0xaaaaaaab

08001d94 <_ZNSt6vectorI5BlockSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681c      	ldr	r4, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f8b8 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 8001dac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001dae:	461a      	mov	r2, r3
 8001db0:	4629      	mov	r1, r5
 8001db2:	4620      	mov	r0, r4
 8001db4:	f000 f8bd 	bl	8001f32 <_ZSt8_DestroyIP5BlockS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ffcc 	bl	8001d58 <_ZNSt12_Vector_baseI5BlockSaIS0_EED1Ev>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}

08001dca <_ZNSt6vectorI5BlockSaIS0_EE9push_backEOS0_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001dd4:	6838      	ldr	r0, [r7, #0]
 8001dd6:	f000 f8ba 	bl	8001f4e <_ZSt4moveIR5BlockEONSt16remove_referenceIT_E4typeEOS3_>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8c0 	bl	8001f64 <_ZNSt6vectorI5BlockSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZNKSt6vectorI5BlockSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8e4 	bl	8001fc2 <_ZNKSt6vectorI5BlockSaIS0_EE5beginEv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8ef 	bl	8001fe2 <_ZNKSt6vectorI5BlockSaIS0_EE3endEv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f8f6 	bl	8002004 <_ZN9__gnu_cxxeqIPK5BlockSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	109b      	asrs	r3, r3, #2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv+0x28>)
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	aaaaaaab 	.word	0xaaaaaaab

08001e50 <_ZNSt6vectorI5BlockSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
      }
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_ZNSt6vectorI5BlockSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f000 f8d5 	bl	8002034 <_ZSt4moveIRSt6vectorI5BlockSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8da 	bl	800204a <_ZNSt6vectorI5BlockSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 8001e96:	687b      	ldr	r3, [r7, #4]
      }
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <_ZNSaI5BlockEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f90c 	bl	80020c6 <_ZN9__gnu_cxx13new_allocatorI5BlockEC1Ev>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
	{ }
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_ZN9__gnu_cxx13new_allocatorI5BlockED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
	if (__p)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <_ZNSt12_Vector_baseI5BlockSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f8e4 	bl	80020dc <_ZNSt16allocator_traitsISaI5BlockEE10deallocateERS1_PS0_j>
      }
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_ZSt8_DestroyIP5BlockS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f8da 	bl	80020fa <_ZSt8_DestroyIP5BlockEvT_S2_>
    }
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZSt4moveIR5BlockEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_ZNSt6vectorI5BlockSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d012      	beq.n	8001fa0 <_ZNSt6vectorI5BlockSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001f7a:	687c      	ldr	r4, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685d      	ldr	r5, [r3, #4]
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f000 f8c7 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f000 f8cc 	bl	800212a <_ZNSt16allocator_traitsISaI5BlockEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f103 020c 	add.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001f9e:	e00c      	b.n	8001fba <_ZNSt6vectorI5BlockSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8d5 	bl	8002150 <_ZNSt6vectorI5BlockSaIS0_EE3endEv>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f000 f8b3 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8f3 	bl	80021a0 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bdb0      	pop	{r4, r5, r7, pc}

08001fc2 <_ZNKSt6vectorI5BlockSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f9ac 	bl	8002330 <_ZN9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZNKSt6vectorI5BlockSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1d1a      	adds	r2, r3, #4
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f99b 	bl	8002330 <_ZN9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN9__gnu_cxxeqIPK5BlockSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f99e 	bl	8002350 <_ZNK9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 8002014:	4603      	mov	r3, r0
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f000 f999 	bl	8002350 <_ZNK9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 800201e:	4603      	mov	r3, r0
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	429c      	cmp	r4, r3
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <_ZSt4moveIRSt6vectorI5BlockSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_ZNSt6vectorI5BlockSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800204a:	b590      	push	{r4, r7, lr}
 800204c:	b089      	sub	sp, #36	; 0x24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f981 	bl	8002366 <_ZNKSt12_Vector_baseI5BlockSaIS0_EE13get_allocatorEv>
 8002064:	f107 021c 	add.w	r2, r7, #28
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f98a 	bl	8002388 <_ZNSt6vectorI5BlockSaIS0_EEC1ERKS1_>
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fe61 	bl	8001d40 <_ZNSaI5BlockED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f98e 	bl	80023a6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f987 	bl	80023a6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff3e 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 80020a0:	4604      	mov	r4, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff39 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4620      	mov	r0, r4
 80020b0:	f000 f997 	bl	80023e2 <_ZSt15__alloc_on_moveISaI5BlockEEvRT_S3_>
	vector __tmp(get_allocator());
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe6b 	bl	8001d94 <_ZNSt6vectorI5BlockSaIS0_EED1Ev>
      }
 80020be:	bf00      	nop
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd90      	pop	{r4, r7, pc}

080020c6 <_ZN9__gnu_cxx13new_allocatorI5BlockEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_ZNSt16allocator_traitsISaI5BlockEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f986 	bl	80023fe <_ZN9__gnu_cxx13new_allocatorI5BlockE10deallocateEPS1_j>
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZSt8_DestroyIP5BlockEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f98c 	bl	8002424 <_ZNSt12_Destroy_auxILb1EE9__destroyIP5BlockEEvT_S4_>
    }
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_ZNSt16allocator_traitsISaI5BlockEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffec 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f979 	bl	800243a <_ZN9__gnu_cxx13new_allocatorI5BlockE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZNSt6vectorI5BlockSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1d1a      	adds	r2, r3, #4
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f984 	bl	8002470 <_ZN9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZNSt6vectorI5BlockSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f805 	bl	8002188 <_ZNSt6vectorI5BlockSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800217e:	4603      	mov	r3, r0
      }
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZNSt6vectorI5BlockSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002190:	2301      	movs	r3, #1
      }
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80021ac:	4a5e      	ldr	r2, [pc, #376]	; (8002328 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f96d 	bl	8002490 <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc>
 80021b6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f9aa 	bl	800251e <_ZNSt6vectorI5BlockSaIS0_EE5beginEv>
 80021ca:	4603      	mov	r3, r0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	f107 0214 	add.w	r2, r7, #20
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f9b1 	bl	8002540 <_ZN9__gnu_cxxmiIP5BlockSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80021de:	4603      	mov	r3, r0
 80021e0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f9c4 	bl	8002574 <_ZNSt12_Vector_baseI5BlockSaIS0_EE11_M_allocateEj>
 80021ec:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80021f2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	189d      	adds	r5, r3, r2
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff85 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4629      	mov	r1, r5
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff ff8a 	bl	800212a <_ZNSt16allocator_traitsISaI5BlockEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800221a:	f7ff ffaa 	bl	8002172 <_ZNSt6vectorI5BlockSaIS0_EE15_S_use_relocateEv>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d027      	beq.n	8002274 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f9cb 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 800222e:	4603      	mov	r3, r0
 8002230:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe71 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 800223a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4621      	mov	r1, r4
 8002240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002242:	f000 f9ab 	bl	800259c <_ZNSt6vectorI5BlockSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002246:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	330c      	adds	r3, #12
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9b6 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 8002258:	4603      	mov	r3, r0
 800225a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe5c 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 8002264:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002268:	6a39      	ldr	r1, [r7, #32]
 800226a:	4620      	mov	r0, r4
 800226c:	f000 f996 	bl	800259c <_ZNSt6vectorI5BlockSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002270:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002272:	e026      	b.n	80022c2 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f9a3 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 800227e:	4603      	mov	r3, r0
 8002280:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe49 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 800228a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4621      	mov	r1, r4
 8002290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002292:	f000 f9a2 	bl	80025da <_ZSt34__uninitialized_move_if_noexcept_aIP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002296:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	330c      	adds	r3, #12
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f98e 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 80022a8:	4603      	mov	r3, r0
 80022aa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fe34 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 80022b4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80022b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	4620      	mov	r0, r4
 80022bc:	f000 f98d 	bl	80025da <_ZSt34__uninitialized_move_if_noexcept_aIP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>
 80022c0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80022c2:	f7ff ff56 	bl	8002172 <_ZNSt6vectorI5BlockSaIS0_EE15_S_use_relocateEv>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe21 	bl	8001f1c <_ZNSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	6a39      	ldr	r1, [r7, #32]
 80022e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022e2:	f7ff fe26 	bl	8001f32 <_ZSt8_DestroyIP5BlockS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80022e6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	109b      	asrs	r3, r3, #2
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <_ZNSt6vectorI5BlockSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fc:	f7ff fdfb 	bl	8001ef6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800230c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	441a      	add	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]
    }
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	0800d358 	.word	0x0800d358
 800232c:	aaaaaaab 	.word	0xaaaaaaab

08002330 <_ZN9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_ZNK9__gnu_cxx17__normal_iteratorIPK5BlockSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_ZNKSt12_Vector_baseI5BlockSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	f000 f958 	bl	8002626 <_ZNKSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f95e 	bl	800263c <_ZNSaI5BlockEC1ERKS0_>
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_ZNSt6vectorI5BlockSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f95e 	bl	8002658 <_ZNSt12_Vector_baseI5BlockSaIS0_EEC1ERKS1_>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fd7f 	bl	8001eb8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f958 	bl	8002676 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  _M_copy_data(__x);
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f954 	bl	8002676 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  __x._M_copy_data(__tmp);
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4619      	mov	r1, r3
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f000 f94e 	bl	8002676 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZSt15__alloc_on_moveISaI5BlockEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80023ec:	461a      	mov	r2, r3
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f957 	bl	80026a4 <_ZSt18__do_alloc_on_moveISaI5BlockEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_ZN9__gnu_cxx13new_allocatorI5BlockE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4619      	mov	r1, r3
 8002416:	68b8      	ldr	r0, [r7, #8]
 8002418:	f009 fb74 	bl	800bb04 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZNSt12_Destroy_auxILb1EE9__destroyIP5BlockEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_ZN9__gnu_cxx13new_allocatorI5BlockE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fe64 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 800244c:	4604      	mov	r4, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4619      	mov	r1, r3
 8002452:	200c      	movs	r0, #12
 8002454:	f7fe ff61 	bl	800131a <_ZnwjPv>
 8002458:	4603      	mov	r3, r0
 800245a:	4622      	mov	r2, r4
 800245c:	6810      	ldr	r0, [r2, #0]
 800245e:	6851      	ldr	r1, [r2, #4]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	6018      	str	r0, [r3, #0]
 8002464:	6059      	str	r1, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <_ZN9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f90e 	bl	80026be <_ZNKSt6vectorI5BlockSaIS0_EE8max_sizeEv>
 80024a2:	4604      	mov	r4, r0
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fcbd 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 80024aa:	4603      	mov	r3, r0
 80024ac:	1ae2      	subs	r2, r4, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf34      	ite	cc
 80024b4:	2301      	movcc	r3, #1
 80024b6:	2300      	movcs	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f009 fb48 	bl	800bb54 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fcad 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 80024ca:	4604      	mov	r4, r0
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fca9 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	f107 0208 	add.w	r2, r7, #8
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f8fd 	bl	80026e0 <_ZSt3maxIjERKT_S2_S2_>
 80024e6:	4603      	mov	r3, r0
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4423      	add	r3, r4
 80024ec:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff fc98 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d306      	bcc.n	800250a <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f8de 	bl	80026be <_ZNKSt6vectorI5BlockSaIS0_EE8max_sizeEv>
 8002502:	4602      	mov	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4293      	cmp	r3, r2
 8002508:	d904      	bls.n	8002514 <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc+0x84>
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f8d7 	bl	80026be <_ZNKSt6vectorI5BlockSaIS0_EE8max_sizeEv>
 8002510:	4603      	mov	r3, r0
 8002512:	e000      	b.n	8002516 <_ZNKSt6vectorI5BlockSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002514:	697b      	ldr	r3, [r7, #20]
      }
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}

0800251e <_ZNSt6vectorI5BlockSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff9e 	bl	8002470 <_ZN9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <_ZN9__gnu_cxxmiIP5BlockSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f83a 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 8002550:	4603      	mov	r3, r0
 8002552:	681c      	ldr	r4, [r3, #0]
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f000 f835 	bl	80025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>
 800255a:	4603      	mov	r3, r0
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ae3      	subs	r3, r4, r3
 8002560:	109b      	asrs	r3, r3, #2
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <_ZN9__gnu_cxxmiIP5BlockSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	aaaaaaab 	.word	0xaaaaaaab

08002574 <_ZNSt12_Vector_baseI5BlockSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <_ZNSt12_Vector_baseI5BlockSaIS0_EE11_M_allocateEj+0x1e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f8bd 	bl	8002708 <_ZNSt16allocator_traitsISaI5BlockEE8allocateERS1_j>
 800258e:	4603      	mov	r3, r0
 8002590:	e000      	b.n	8002594 <_ZNSt12_Vector_baseI5BlockSaIS0_EE11_M_allocateEj+0x20>
 8002592:	2300      	movs	r3, #0
      }
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_ZNSt6vectorI5BlockSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b087      	sub	sp, #28
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80025aa:	f88d 4000 	strb.w	r4, [sp]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f8b6 	bl	8002726 <_ZNSt6vectorI5BlockSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80025ba:	4603      	mov	r3, r0
      }
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <_ZNK9__gnu_cxx17__normal_iteratorIP5BlockSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_ZSt34__uninitialized_move_if_noexcept_aIP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f8ae 	bl	800274a <_ZSt32__make_move_if_noexcept_iteratorI5BlockSt13move_iteratorIPS0_EET0_PT_>
 80025ee:	4604      	mov	r4, r0
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f000 f8aa 	bl	800274a <_ZSt32__make_move_if_noexcept_iteratorI5BlockSt13move_iteratorIPS0_EET0_PT_>
 80025f6:	4601      	mov	r1, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4620      	mov	r0, r4
 80025fe:	f000 f8b3 	bl	8002768 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP5BlockES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8002602:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <_ZNSt16allocator_traitsISaI5BlockEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8b6 	bl	800278a <_ZN9__gnu_cxx13new_allocatorI5BlockE7destroyIS1_EEvPT_>
	}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_ZNKSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_ZNSaI5BlockEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8a9 	bl	80027a0 <_ZN9__gnu_cxx13new_allocatorI5BlockEC1ERKS2_>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_ZNSt12_Vector_baseI5BlockSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f8a6 	bl	80027b8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implC1ERKS1_>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
	}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_ZSt18__do_alloc_on_moveISaI5BlockEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80026b0:	68b8      	ldr	r0, [r7, #8]
 80026b2:	f000 f893 	bl	80027dc <_ZSt4moveIRSaI5BlockEEONSt16remove_referenceIT_E4typeEOS4_>
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_ZNKSt6vectorI5BlockSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ffac 	bl	8002626 <_ZNKSt12_Vector_baseI5BlockSaIS0_EE19_M_get_Tp_allocatorEv>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f88f 	bl	80027f4 <_ZNSt6vectorI5BlockSaIS0_EE11_S_max_sizeERKS1_>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d201      	bcs.n	80026fa <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	e000      	b.n	80026fc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80026fa:	687b      	ldr	r3, [r7, #4]
    }
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_ZNSt16allocator_traitsISaI5BlockEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002712:	2200      	movs	r2, #0
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f888 	bl	800282c <_ZN9__gnu_cxx13new_allocatorI5BlockE8allocateEjPKv>
 800271c:	4603      	mov	r3, r0
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZNSt6vectorI5BlockSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f897 	bl	800286e <_ZSt12__relocate_aIP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002740:	4603      	mov	r3, r0
      }
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZSt32__make_move_if_noexcept_iteratorI5BlockSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f8a5 	bl	80028a8 <_ZNSt13move_iteratorIP5BlockEC1ES1_>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP5BlockES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8a6 	bl	80028cc <_ZSt18uninitialized_copyISt13move_iteratorIP5BlockES2_ET0_T_S5_S4_>
 8002780:	4603      	mov	r3, r0
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN9__gnu_cxx13new_allocatorI5BlockE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZN9__gnu_cxx13new_allocatorI5BlockEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff39 	bl	800263c <_ZNSaI5BlockEC1ERKS0_>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb73 	bl	8001eb8 <_ZNSt12_Vector_baseI5BlockSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_ZSt4moveIRSaI5BlockEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <_ZNSt6vectorI5BlockSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <_ZNSt6vectorI5BlockSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80027fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f875 	bl	80028f0 <_ZNSt16allocator_traitsISaI5BlockEE8max_sizeERKS1_>
 8002806:	4603      	mov	r3, r0
 8002808:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800280a:	f107 0208 	add.w	r2, r7, #8
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f877 	bl	8002908 <_ZSt3minIjERKT_S2_S2_>
 800281a:	4603      	mov	r3, r0
 800281c:	681b      	ldr	r3, [r3, #0]
      }
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	0aaaaaaa 	.word	0x0aaaaaaa

0800282c <_ZN9__gnu_cxx13new_allocatorI5BlockE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f879 	bl	8002930 <_ZNK9__gnu_cxx13new_allocatorI5BlockE11_M_max_sizeEv>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4293      	cmp	r3, r2
 8002844:	bf8c      	ite	hi
 8002846:	2301      	movhi	r3, #1
 8002848:	2300      	movls	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <_ZN9__gnu_cxx13new_allocatorI5BlockE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002850:	f009 f97d 	bl	800bb4e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f009 f961 	bl	800bb26 <_Znwj>
 8002864:	4603      	mov	r3, r0
      }
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <_ZSt12__relocate_aIP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800286e:	b5b0      	push	{r4, r5, r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f865 	bl	800294c <_ZSt12__niter_baseIP5BlockET_S2_>
 8002882:	4604      	mov	r4, r0
 8002884:	68b8      	ldr	r0, [r7, #8]
 8002886:	f000 f861 	bl	800294c <_ZSt12__niter_baseIP5BlockET_S2_>
 800288a:	4605      	mov	r5, r0
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f85d 	bl	800294c <_ZSt12__niter_baseIP5BlockET_S2_>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4629      	mov	r1, r5
 8002898:	4620      	mov	r0, r4
 800289a:	f000 f862 	bl	8002962 <_ZSt14__relocate_a_1IP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>
 800289e:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}

080028a8 <_ZNSt13move_iteratorIP5BlockEC1ES1_>:
      move_iterator(iterator_type __i)
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80028b2:	463b      	mov	r3, r7
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f87a 	bl	80029ae <_ZSt4moveIRP5BlockEONSt16remove_referenceIT_E4typeEOS4_>
 80028ba:	4603      	mov	r3, r0
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZSt18uninitialized_copyISt13move_iteratorIP5BlockES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f86f 	bl	80029c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5BlockES4_EET0_T_S7_S6_>
 80028e6:	4603      	mov	r3, r0
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZNSt16allocator_traitsISaI5BlockEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f892 	bl	8002a22 <_ZNK9__gnu_cxx13new_allocatorI5BlockE8max_sizeEv>
 80028fe:	4603      	mov	r3, r0
      }
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d201      	bcs.n	8002922 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	e000      	b.n	8002924 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002922:	687b      	ldr	r3, [r7, #4]
    }
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_ZNK9__gnu_cxx13new_allocatorI5BlockE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <_ZNK9__gnu_cxx13new_allocatorI5BlockE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	0aaaaaaa 	.word	0x0aaaaaaa

0800294c <_ZSt12__niter_baseIP5BlockET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_ZSt14__relocate_a_1IP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002962:	b590      	push	{r4, r7, lr}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d013      	beq.n	80029a4 <_ZSt14__relocate_a_1IP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f000 f85c 	bl	8002a3a <_ZSt11__addressofI5BlockEPT_RS1_>
 8002982:	4604      	mov	r4, r0
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f858 	bl	8002a3a <_ZSt11__addressofI5BlockEPT_RS1_>
 800298a:	4603      	mov	r3, r0
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4620      	mov	r0, r4
 8002992:	f000 f85d 	bl	8002a50 <_ZSt19__relocate_object_aI5BlockS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	330c      	adds	r3, #12
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	330c      	adds	r3, #12
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e7e7      	b.n	8002974 <_ZSt14__relocate_a_1IP5BlockS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80029a4:	697b      	ldr	r3, [r7, #20]
    }
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}

080029ae <_ZSt4moveIRP5BlockEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5BlockES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80029d4:	f107 0208 	add.w	r2, r7, #8
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f851 	bl	8002a86 <_ZStneIP5BlockEbRKSt13move_iteratorIT_ES6_>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5BlockES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f000 f825 	bl	8002a3a <_ZSt11__addressofI5BlockEPT_RS1_>
 80029f0:	4604      	mov	r4, r0
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f867 	bl	8002aca <_ZNKSt13move_iteratorIP5BlockEdeEv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4620      	mov	r0, r4
 8002a02:	f000 f86e 	bl	8002ae2 <_ZSt10_ConstructI5BlockJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f84c 	bl	8002aa8 <_ZNSt13move_iteratorIP5BlockEppEv>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	330c      	adds	r3, #12
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e7dd      	b.n	80029d4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP5BlockES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8002a18:	697b      	ldr	r3, [r7, #20]
	}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <_ZNK9__gnu_cxx13new_allocatorI5BlockE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff80 	bl	8002930 <_ZNK9__gnu_cxx13new_allocatorI5BlockE11_M_max_sizeEv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZSt11__addressofI5BlockEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_ZSt19__relocate_object_aI5BlockS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002a5c:	68b8      	ldr	r0, [r7, #8]
 8002a5e:	f7ff fa76 	bl	8001f4e <_ZSt4moveIR5BlockEONSt16remove_referenceIT_E4typeEOS3_>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fb5e 	bl	800212a <_ZNSt16allocator_traitsISaI5BlockEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002a6e:	68b8      	ldr	r0, [r7, #8]
 8002a70:	f7ff ffe3 	bl	8002a3a <_ZSt11__addressofI5BlockEPT_RS1_>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fdc7 	bl	800260c <_ZNSt16allocator_traitsISaI5BlockEE7destroyIS0_EEvRS1_PT_>
    }
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZStneIP5BlockEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f83f 	bl	8002b16 <_ZSteqIP5BlockEbRKSt13move_iteratorIT_ES6_>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f083 0301 	eor.w	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNSt13move_iteratorIP5BlockEppEv>:
      operator++()
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f103 020c 	add.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	601a      	str	r2, [r3, #0]
	return *this;
 8002abc:	687b      	ldr	r3, [r7, #4]
      }
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <_ZNKSt13move_iteratorIP5BlockEdeEv>:
      operator*() const
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZSt10_ConstructI5BlockJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002ae2:	b590      	push	{r4, r7, lr}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f7ff fb11 	bl	8002114 <_ZSt7forwardI5BlockEOT_RNSt16remove_referenceIS1_E4typeE>
 8002af2:	4604      	mov	r4, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	200c      	movs	r0, #12
 8002afa:	f7fe fc0e 	bl	800131a <_ZnwjPv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4622      	mov	r2, r4
 8002b02:	6810      	ldr	r0, [r2, #0]
 8002b04:	6851      	ldr	r1, [r2, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	6059      	str	r1, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}

08002b16 <_ZSteqIP5BlockEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002b16:	b590      	push	{r4, r7, lr}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f80e 	bl	8002b42 <_ZNKSt13move_iteratorIP5BlockE4baseEv>
 8002b26:	4604      	mov	r4, r0
 8002b28:	6838      	ldr	r0, [r7, #0]
 8002b2a:	f000 f80a 	bl	8002b42 <_ZNKSt13move_iteratorIP5BlockE4baseEv>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	429c      	cmp	r4, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}

08002b42 <_ZNKSt13move_iteratorIP5BlockE4baseEv>:
      base() const
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_ZN9Sequencer10getProjectEv>:
    Project& getProject() { return project; }
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_ZN17SequencerRendererC1Ev>:
    SequencerRenderer() : display(Display::getInstance()) {}
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	f002 fc94 	bl	80054a4 <_ZN7Display11getInstanceEv>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN17SequencerRenderer11getInstanceEv>:
    static constexpr uint8_t KEY_MENU = Keyboard::KEY_9;       // 9 key
    static constexpr uint8_t KEY_SETTINGS = Keyboard::KEY_12;  // 12 key
}

// Реализация SequencerRenderer
SequencerRenderer& SequencerRenderer::getInstance() {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
    static SequencerRenderer instance;
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_ZN17SequencerRenderer11getInstanceEv+0x48>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	f3bf 8f5b 	dmb	ish
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <_ZN17SequencerRenderer11getInstanceEv+0x42>
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <_ZN17SequencerRenderer11getInstanceEv+0x48>)
 8002bae:	f008 ffab 	bl	800bb08 <__cxa_guard_acquire>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <_ZN17SequencerRenderer11getInstanceEv+0x42>
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <_ZN17SequencerRenderer11getInstanceEv+0x4c>)
 8002bc4:	f7ff ffd4 	bl	8002b70 <_ZN17SequencerRendererC1Ev>
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <_ZN17SequencerRenderer11getInstanceEv+0x48>)
 8002bca:	f008 ffa9 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8002bce:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <_ZN17SequencerRenderer11getInstanceEv+0x4c>)
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200001b4 	.word	0x200001b4
 8002bd8:	200001b0 	.word	0x200001b0

08002bdc <_ZN17SequencerRenderer4initEv>:

bool SequencerRenderer::init() {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    return true;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <_ZN17SequencerRenderer16drawSplashScreenEv>:

void SequencerRenderer::drawSplashScreen() {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    display.clear(DisplayColor::BLACK);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fd0b 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    display.setCursor(0, 0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fd56 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("STM32F4");
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	491a      	ldr	r1, [pc, #104]	; (8002c84 <_ZN17SequencerRenderer16drawSplashScreenEv+0x90>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fed3 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 15);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	220f      	movs	r2, #15
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fd49 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Synthesizer");
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4914      	ldr	r1, [pc, #80]	; (8002c88 <_ZN17SequencerRenderer16drawSplashScreenEv+0x94>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fec6 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 30);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	221e      	movs	r2, #30
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 fd3c 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Keyboard");
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	490f      	ldr	r1, [pc, #60]	; (8002c8c <_ZN17SequencerRenderer16drawSplashScreenEv+0x98>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 feb9 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 45);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	222d      	movs	r2, #45	; 0x2d
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fd2f 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Loading...");
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4909      	ldr	r1, [pc, #36]	; (8002c90 <_ZN17SequencerRenderer16drawSplashScreenEv+0x9c>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 feac 	bl	80059c8 <_ZN7Display5printEPKc>
    display.update();
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fcf2 	bl	800565e <_ZN7Display6updateEv>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	0800d374 	.word	0x0800d374
 8002c88:	0800d37c 	.word	0x0800d37c
 8002c8c:	0800d388 	.word	0x0800d388
 8002c90:	0800d394 	.word	0x0800d394

08002c94 <_ZN17SequencerRenderer12drawMainMenuEv>:

void SequencerRenderer::drawMainMenu() {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	; 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    display.clear(DisplayColor::BLACK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fcbb 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    display.setCursor(0, 0);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f002 fd06 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("SEQUENCER MENU");
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	492b      	ldr	r1, [pc, #172]	; (8002d68 <_ZN17SequencerRenderer12drawMainMenuEv+0xd4>)
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fe83 	bl	80059c8 <_ZN7Display5printEPKc>
    
    // Отображаем громкость и темп
    Project& project = Sequencer::getInstance().getProject();
 8002cc2:	f7fe fcf5 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff46 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 8002cce:	62f8      	str	r0, [r7, #44]	; 0x2c
    char tempStr[32];
    sprintf(tempStr, "BPM: %d Vol: %d", project.bpm, project.volume);
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002cde:	f107 000c 	add.w	r0, r7, #12
 8002ce2:	4922      	ldr	r1, [pc, #136]	; (8002d6c <_ZN17SequencerRenderer12drawMainMenuEv+0xd8>)
 8002ce4:	f009 fcba 	bl	800c65c <siprintf>
    display.setCursor(0, 12);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	220c      	movs	r2, #12
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fce6 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print(tempStr);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f107 020c 	add.w	r2, r7, #12
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fe61 	bl	80059c8 <_ZN7Display5printEPKc>
    
    display.setCursor(0, 24);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2218      	movs	r2, #24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 fcd7 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("1,4,7,11: Edit tracks");
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4915      	ldr	r1, [pc, #84]	; (8002d70 <_ZN17SequencerRenderer12drawMainMenuEv+0xdc>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fe54 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 36);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 fcca 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("3: Play/Stop 6: Back");
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4910      	ldr	r1, [pc, #64]	; (8002d74 <_ZN17SequencerRenderer12drawMainMenuEv+0xe0>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 fe47 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 48);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2230      	movs	r2, #48	; 0x30
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fcbd 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("9: Help 12: Settings");
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	490a      	ldr	r1, [pc, #40]	; (8002d78 <_ZN17SequencerRenderer12drawMainMenuEv+0xe4>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fe3a 	bl	80059c8 <_ZN7Display5printEPKc>
    display.update();
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 fc80 	bl	800565e <_ZN7Display6updateEv>
}
 8002d5e:	bf00      	nop
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	0800d3a0 	.word	0x0800d3a0
 8002d6c:	0800d3b0 	.word	0x0800d3b0
 8002d70:	0800d3c0 	.word	0x0800d3c0
 8002d74:	0800d3d8 	.word	0x0800d3d8
 8002d78:	0800d3f0 	.word	0x0800d3f0

08002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>:

void SequencerRenderer::drawEditMode(const EditState& editState) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    display.clear(DisplayColor::BLACK);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fc46 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    
    // Статусная строка
    drawStatusBar(Sequencer::getInstance().getProject());
 8002d92:	f7fe fc8d 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fede 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa00 	bl	80031a8 <_ZN17SequencerRenderer13drawStatusBarERK7Project>
    
    // Отрисовка дорожек
    drawTracks(Sequencer::getInstance().getProject(), editState);
 8002da8:	f7fe fc82 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fed3 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8c6 	bl	8002f4c <_ZN17SequencerRenderer10drawTracksERK7ProjectRK9EditState>
    
    display.update();
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fc4a 	bl	800565e <_ZN7Display6updateEv>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <_ZN17SequencerRenderer16drawSettingsModeEv>:

void SequencerRenderer::drawSettingsMode() {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    display.clear(DisplayColor::BLACK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fc1b 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    display.setCursor(0, 0);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fc66 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("SETTINGS");
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4927      	ldr	r1, [pc, #156]	; (8002e98 <_ZN17SequencerRenderer16drawSettingsModeEv+0xc4>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fde3 	bl	80059c8 <_ZN7Display5printEPKc>
    
    Project& project = Sequencer::getInstance().getProject();
 8002e02:	f7fe fc55 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fea6 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 8002e0e:	60f8      	str	r0, [r7, #12]
    display.setCursor(0, 15);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	220f      	movs	r2, #15
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fc52 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.printf("BPM: %d", project.bpm);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8002e28:	461a      	mov	r2, r3
 8002e2a:	491c      	ldr	r1, [pc, #112]	; (8002e9c <_ZN17SequencerRenderer16drawSettingsModeEv+0xc8>)
 8002e2c:	f002 fe03 	bl	8005a36 <_ZN7Display6printfEPKcz>
    display.setCursor(0, 25);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2219      	movs	r2, #25
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fc42 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.printf("Volume: %d", project.volume);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4915      	ldr	r1, [pc, #84]	; (8002ea0 <_ZN17SequencerRenderer16drawSettingsModeEv+0xcc>)
 8002e4c:	f002 fdf3 	bl	8005a36 <_ZN7Display6printfEPKcz>
    display.setCursor(0, 35);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2223      	movs	r2, #35	; 0x23
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fc32 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Up/Down: Change");
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4910      	ldr	r1, [pc, #64]	; (8002ea4 <_ZN17SequencerRenderer16drawSettingsModeEv+0xd0>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fdaf 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 45);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	222d      	movs	r2, #45	; 0x2d
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fc25 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("Back: Main menu");
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <_ZN17SequencerRenderer16drawSettingsModeEv+0xd4>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fda2 	bl	80059c8 <_ZN7Display5printEPKc>
    
    display.update();
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fbe8 	bl	800565e <_ZN7Display6updateEv>
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	0800d408 	.word	0x0800d408
 8002e9c:	0800d414 	.word	0x0800d414
 8002ea0:	0800d41c 	.word	0x0800d41c
 8002ea4:	0800d428 	.word	0x0800d428
 8002ea8:	0800d438 	.word	0x0800d438

08002eac <_ZN17SequencerRenderer14drawHelpScreenEv>:

void SequencerRenderer::drawHelpScreen() {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    display.clear(DisplayColor::BLACK);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fbaf 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    display.setCursor(0, 0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fbfa 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("HELP");
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <_ZN17SequencerRenderer14drawHelpScreenEv+0x90>)
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fd77 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 15);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	220f      	movs	r2, #15
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fbed 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("1,4,7,11: Edit tracks");
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4914      	ldr	r1, [pc, #80]	; (8002f40 <_ZN17SequencerRenderer14drawHelpScreenEv+0x94>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fd6a 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 30);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	221e      	movs	r2, #30
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 fbe0 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("2,5,8,10: Navigation");
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	490f      	ldr	r1, [pc, #60]	; (8002f44 <_ZN17SequencerRenderer14drawHelpScreenEv+0x98>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fd5d 	bl	80059c8 <_ZN7Display5printEPKc>
    display.setCursor(0, 45);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	222d      	movs	r2, #45	; 0x2d
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fbd3 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.print("3,6,9,12: Actions");
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4909      	ldr	r1, [pc, #36]	; (8002f48 <_ZN17SequencerRenderer14drawHelpScreenEv+0x9c>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fd50 	bl	80059c8 <_ZN7Display5printEPKc>
    display.update();
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fb96 	bl	800565e <_ZN7Display6updateEv>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0800d448 	.word	0x0800d448
 8002f40:	0800d3c0 	.word	0x0800d3c0
 8002f44:	0800d450 	.word	0x0800d450
 8002f48:	0800d468 	.word	0x0800d468

08002f4c <_ZN17SequencerRenderer10drawTracksERK7ProjectRK9EditState>:

void SequencerRenderer::drawTracks(const Project& project, const EditState& editState) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < 6; i++) {
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d80f      	bhi.n	8002f82 <_ZN17SequencerRenderer10drawTracksERK7ProjectRK9EditState+0x36>
        drawTrack(i, project.tracks[i], editState);
 8002f62:	7dfa      	ldrb	r2, [r7, #23]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	441a      	add	r2, r3
 8002f70:	7df9      	ldrb	r1, [r7, #23]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f809 	bl	8002f8c <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState>
    for (uint8_t i = 0; i < 6; i++) {
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
 8002f80:	e7ec      	b.n	8002f5c <_ZN17SequencerRenderer10drawTracksERK7ProjectRK9EditState+0x10>
    }
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState>:

void SequencerRenderer::drawTrack(uint8_t trackIndex, const Track& track, const EditState& editState) {
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	72fb      	strb	r3, [r7, #11]
    uint8_t y = TRACKS_START_Y + trackIndex * TRACK_HEIGHT;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	330a      	adds	r3, #10
 8002fa4:	75bb      	strb	r3, [r7, #22]
    
    // Отрисовка названия дорожки
    display.setCursor(0, y);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	7dba      	ldrb	r2, [r7, #22]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fb87 	bl	80056c2 <_ZN7Display9setCursorEhh>
    if (track.type == TrackType::DRUM) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x42>
        display.printf("D%d", trackIndex + 1);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xf0>)
 8002fc8:	f002 fd35 	bl	8005a36 <_ZN7Display6printfEPKcz>
 8002fcc:	e007      	b.n	8002fde <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x52>
    } else {
        display.printf("P%d", trackIndex - 3);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xf4>)
 8002fda:	f002 fd2c 	bl	8005a36 <_ZN7Display6printfEPKcz>
    }
    
    // Отрисовка блоков
    uint8_t startBlock = 0; // TODO: Реализовать прокрутку блоков
 8002fde:	2300      	movs	r3, #0
 8002fe0:	757b      	strb	r3, [r7, #21]
    for (uint8_t blockIndex = startBlock; blockIndex < startBlock + MAX_VISIBLE_BLOCKS && blockIndex < track.blocks.size(); blockIndex++) {
 8002fe2:	7d7b      	ldrb	r3, [r7, #21]
 8002fe4:	75fb      	strb	r3, [r7, #23]
 8002fe6:	7d7b      	ldrb	r3, [r7, #21]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	db0a      	blt.n	8003006 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x7a>
 8002ff0:	7dfc      	ldrb	r4, [r7, #23]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ff14 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	429c      	cmp	r4, r3
 8003000:	d201      	bcs.n	8003006 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x7a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x7c>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d032      	beq.n	8003072 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xe6>
        uint8_t x = 20 + (blockIndex - startBlock) * BLOCK_WIDTH;
 800300c:	7dfa      	ldrb	r2, [r7, #23]
 800300e:	7d7b      	ldrb	r3, [r7, #21]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3314      	adds	r3, #20
 800301a:	753b      	strb	r3, [r7, #20]
        bool isSelected = (editState.selectedTrack == trackIndex && editState.selectedBlock == blockIndex);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	7afa      	ldrb	r2, [r7, #11]
 8003022:	429a      	cmp	r2, r3
 8003024:	d106      	bne.n	8003034 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xa8>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	7dfa      	ldrb	r2, [r7, #23]
 800302c:	429a      	cmp	r2, r3
 800302e:	d101      	bne.n	8003034 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xa8>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0xaa>
 8003034:	2300      	movs	r3, #0
 8003036:	74fb      	strb	r3, [r7, #19]
        bool isCurrent = (track.currentBlock == blockIndex);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7d1b      	ldrb	r3, [r3, #20]
 800303c:	7dfa      	ldrb	r2, [r7, #23]
 800303e:	429a      	cmp	r2, r3
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	74bb      	strb	r3, [r7, #18]
        
        drawBlock(x, y, track.blocks[blockIndex], isSelected, isCurrent);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3308      	adds	r3, #8
 800304c:	7dfa      	ldrb	r2, [r7, #23]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fdff 	bl	8003c54 <_ZNKSt6vectorI5BlockSaIS0_EEixEj>
 8003056:	7dba      	ldrb	r2, [r7, #22]
 8003058:	7d39      	ldrb	r1, [r7, #20]
 800305a:	7cbb      	ldrb	r3, [r7, #18]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f80d 	bl	8003084 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb>
    for (uint8_t blockIndex = startBlock; blockIndex < startBlock + MAX_VISIBLE_BLOCKS && blockIndex < track.blocks.size(); blockIndex++) {
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	3301      	adds	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e7b9      	b.n	8002fe6 <_ZN17SequencerRenderer9drawTrackEhRK5TrackRK9EditState+0x5a>
    }
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	bf00      	nop
 800307c:	0800d47c 	.word	0x0800d47c
 8003080:	0800d480 	.word	0x0800d480

08003084 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb>:
void SequencerRenderer::drawPianoTrack(uint8_t trackIndex, const Track& track, const EditState& editState) {
    // Реализация отрисовки пианино дорожки
    // Аналогично drawTrack, но с отображением нот
}

void SequencerRenderer::drawBlock(uint8_t x, uint8_t y, const Block& block, bool isSelected, bool isCurrent) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af04      	add	r7, sp, #16
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	72fb      	strb	r3, [r7, #11]
 8003092:	4613      	mov	r3, r2
 8003094:	72bb      	strb	r3, [r7, #10]
    // Рамка блока
    display.drawRect(x, y, BLOCK_WIDTH, TRACK_HEIGHT - 1, DisplayColor::WHITE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	7aba      	ldrb	r2, [r7, #10]
 800309c:	7af9      	ldrb	r1, [r7, #11]
 800309e:	2301      	movs	r3, #1
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	2307      	movs	r3, #7
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2320      	movs	r3, #32
 80030a8:	f002 fba5 	bl	80057f6 <_ZN7Display8drawRectEhhhh12DisplayColor>
    
    // Отрисовка тактов
    for (uint8_t beatIndex = 0; beatIndex < 4; beatIndex++) {
 80030ac:	2300      	movs	r3, #0
 80030ae:	75fb      	strb	r3, [r7, #23]
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d843      	bhi.n	800313e <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0xba>
        uint8_t beatX = x + beatIndex * BEAT_WIDTH;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	4413      	add	r3, r2
 80030c0:	75bb      	strb	r3, [r7, #22]
        bool beatSelected = isSelected && (Sequencer::getInstance().getProject().currentBeat == beatIndex);
 80030c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x62>
 80030ca:	f7fe faf1 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fd42 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030dc:	7dfa      	ldrb	r2, [r7, #23]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d101      	bne.n	80030e6 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x62>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x64>
 80030e6:	2300      	movs	r3, #0
 80030e8:	757b      	strb	r3, [r7, #21]
        bool beatCurrent = isCurrent && (Sequencer::getInstance().getProject().currentBeat == beatIndex);
 80030ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x8a>
 80030f2:	f7fe fadd 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fd2e 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003104:	7dfa      	ldrb	r2, [r7, #23]
 8003106:	429a      	cmp	r2, r3
 8003108:	d101      	bne.n	800310e <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x8a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x8c>
 800310e:	2300      	movs	r3, #0
 8003110:	753b      	strb	r3, [r7, #20]
        
        drawBeat(beatX, y, block.beats[beatIndex], beatSelected, beatCurrent, TrackType::DRUM);
 8003112:	7dfa      	ldrb	r2, [r7, #23]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	18d0      	adds	r0, r2, r3
 800311e:	7aba      	ldrb	r2, [r7, #10]
 8003120:	7db9      	ldrb	r1, [r7, #22]
 8003122:	2300      	movs	r3, #0
 8003124:	9302      	str	r3, [sp, #8]
 8003126:	7d3b      	ldrb	r3, [r7, #20]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	7d7b      	ldrb	r3, [r7, #21]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4603      	mov	r3, r0
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f808 	bl	8003146 <_ZN17SequencerRenderer8drawBeatEhhRK4Beatbb9TrackType>
    for (uint8_t beatIndex = 0; beatIndex < 4; beatIndex++) {
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	3301      	adds	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
 800313c:	e7b8      	b.n	80030b0 <_ZN17SequencerRenderer9drawBlockEhhRK5Blockbb+0x2c>
    }
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_ZN17SequencerRenderer8drawBeatEhhRK4Beatbb9TrackType>:

void SequencerRenderer::drawBeat(uint8_t x, uint8_t y, const Beat& beat, bool isSelected, bool isCurrent, TrackType trackType) {
 8003146:	b590      	push	{r4, r7, lr}
 8003148:	b089      	sub	sp, #36	; 0x24
 800314a:	af04      	add	r7, sp, #16
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	72fb      	strb	r3, [r7, #11]
 8003154:	4613      	mov	r3, r2
 8003156:	72bb      	strb	r3, [r7, #10]
    if (trackType == TrackType::DRUM) {
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <_ZN17SequencerRenderer8drawBeatEhhRK4Beatbb9TrackType+0x36>
        drawBeatBox(x, y, beat.active, isSelected, isCurrent);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7818      	ldrb	r0, [r3, #0]
 8003162:	7aba      	ldrb	r2, [r7, #10]
 8003164:	7af9      	ldrb	r1, [r7, #11]
 8003166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4603      	mov	r3, r0
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f859 	bl	800322c <_ZN17SequencerRenderer11drawBeatBoxEhhbbb>
    } else {
        drawNoteBox(x, y, beat.note, beat.halfTone, isSelected, isCurrent);
    }
}
 800317a:	e011      	b.n	80031a0 <_ZN17SequencerRenderer8drawBeatEhhRK4Beatbb9TrackType+0x5a>
        drawNoteBox(x, y, beat.note, beat.halfTone, isSelected, isCurrent);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	785c      	ldrb	r4, [r3, #1]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	789b      	ldrb	r3, [r3, #2]
 8003184:	7ab8      	ldrb	r0, [r7, #10]
 8003186:	7af9      	ldrb	r1, [r7, #11]
 8003188:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800318c:	9202      	str	r2, [sp, #8]
 800318e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003192:	9201      	str	r2, [sp, #4]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4623      	mov	r3, r4
 8003198:	4602      	mov	r2, r0
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f87e 	bl	800329c <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb>
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <_ZN17SequencerRenderer13drawStatusBarERK7Project>:

void SequencerRenderer::drawStatusBar(const Project& project) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    display.setCursor(0, 0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fa81 	bl	80056c2 <_ZN7Display9setCursorEhh>
    display.printf("BPM:%d Vol:%d", project.bpm, project.volume);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80031ca:	461a      	mov	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80031d2:	4913      	ldr	r1, [pc, #76]	; (8003220 <_ZN17SequencerRenderer13drawStatusBarERK7Project+0x78>)
 80031d4:	f002 fc2f 	bl	8005a36 <_ZN7Display6printfEPKcz>
    
    if (project.isPlaying) {
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <_ZN17SequencerRenderer13drawStatusBarERK7Project+0x56>
        display.setCursor(80, 0);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	2150      	movs	r1, #80	; 0x50
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fa69 	bl	80056c2 <_ZN7Display9setCursorEhh>
        display.print("PLAY");
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	490b      	ldr	r1, [pc, #44]	; (8003224 <_ZN17SequencerRenderer13drawStatusBarERK7Project+0x7c>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fbe6 	bl	80059c8 <_ZN7Display5printEPKc>
    } else {
        display.setCursor(80, 0);
        display.print("STOP");
    }
}
 80031fc:	e00c      	b.n	8003218 <_ZN17SequencerRenderer13drawStatusBarERK7Project+0x70>
        display.setCursor(80, 0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	2150      	movs	r1, #80	; 0x50
 8003206:	4618      	mov	r0, r3
 8003208:	f002 fa5b 	bl	80056c2 <_ZN7Display9setCursorEhh>
        display.print("STOP");
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4905      	ldr	r1, [pc, #20]	; (8003228 <_ZN17SequencerRenderer13drawStatusBarERK7Project+0x80>)
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fbd8 	bl	80059c8 <_ZN7Display5printEPKc>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	0800d484 	.word	0x0800d484
 8003224:	0800d494 	.word	0x0800d494
 8003228:	0800d49c 	.word	0x0800d49c

0800322c <_ZN17SequencerRenderer11drawBeatBoxEhhbbb>:

void SequencerRenderer::drawBeatBox(uint8_t x, uint8_t y, bool active, bool selected, bool current) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	70fb      	strb	r3, [r7, #3]
 800323e:	460b      	mov	r3, r1
 8003240:	70bb      	strb	r3, [r7, #2]
 8003242:	4613      	mov	r3, r2
 8003244:	707b      	strb	r3, [r7, #1]
    DisplayColor color = DisplayColor::BLACK;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
    
    if (active) {
 800324a:	787b      	ldrb	r3, [r7, #1]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <_ZN17SequencerRenderer11drawBeatBoxEhhbbb+0x28>
        color = DisplayColor::WHITE;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
    }
    
    display.drawFilledRect(x + 1, y + 1, BEAT_WIDTH - 2, TRACK_HEIGHT - 3, color);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	3301      	adds	r3, #1
 800325c:	b2d9      	uxtb	r1, r3
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	3301      	adds	r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2305      	movs	r3, #5
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2306      	movs	r3, #6
 800326e:	f002 fb17 	bl	80058a0 <_ZN7Display14drawFilledRectEhhhh12DisplayColor>
    
    // Рамка для выделения
    if (selected || current) {
 8003272:	7e3b      	ldrb	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <_ZN17SequencerRenderer11drawBeatBoxEhhbbb+0x52>
 8003278:	7f3b      	ldrb	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <_ZN17SequencerRenderer11drawBeatBoxEhhbbb+0x68>
        display.drawRect(x, y, BEAT_WIDTH, TRACK_HEIGHT - 1, DisplayColor::WHITE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	78ba      	ldrb	r2, [r7, #2]
 8003284:	78f9      	ldrb	r1, [r7, #3]
 8003286:	2301      	movs	r3, #1
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2307      	movs	r3, #7
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2308      	movs	r3, #8
 8003290:	f002 fab1 	bl	80057f6 <_ZN7Display8drawRectEhhhh12DisplayColor>
    }
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb>:

void SequencerRenderer::drawNoteBox(uint8_t x, uint8_t y, uint8_t note, bool halfTone, bool selected, bool current) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	70fb      	strb	r3, [r7, #3]
 80032ae:	460b      	mov	r3, r1
 80032b0:	70bb      	strb	r3, [r7, #2]
 80032b2:	4613      	mov	r3, r2
 80032b4:	707b      	strb	r3, [r7, #1]
    if (note == 255) {
 80032b6:	787b      	ldrb	r3, [r7, #1]
 80032b8:	2bff      	cmp	r3, #255	; 0xff
 80032ba:	d112      	bne.n	80032e2 <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x46>
        // Пустая нота
        if (selected || current) {
 80032bc:	7f3b      	ldrb	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x2e>
 80032c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x9c>
            display.drawRect(x, y, BEAT_WIDTH, TRACK_HEIGHT - 1, DisplayColor::WHITE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	78ba      	ldrb	r2, [r7, #2]
 80032d0:	78f9      	ldrb	r1, [r7, #3]
 80032d2:	2301      	movs	r3, #1
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2307      	movs	r3, #7
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2308      	movs	r3, #8
 80032dc:	f002 fa8b 	bl	80057f6 <_ZN7Display8drawRectEhhhh12DisplayColor>
        }
        return;
 80032e0:	e02a      	b.n	8003338 <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x9c>
    }
    
    // Отрисовка ноты
    display.setCursor(x + 1, y + 1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2d9      	uxtb	r1, r3
 80032ec:	78bb      	ldrb	r3, [r7, #2]
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	f002 f9e5 	bl	80056c2 <_ZN7Display9setCursorEhh>
    const char* noteName = getNoteName(note, halfTone);
 80032f8:	7e3a      	ldrb	r2, [r7, #24]
 80032fa:	787b      	ldrb	r3, [r7, #1]
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f81e 	bl	8003340 <_ZNK17SequencerRenderer11getNoteNameEhb>
 8003304:	60f8      	str	r0, [r7, #12]
    display.print(noteName);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fb5b 	bl	80059c8 <_ZN7Display5printEPKc>
    
    // Рамка для выделения
    if (selected || current) {
 8003312:	7f3b      	ldrb	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x84>
 8003318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x9e>
        display.drawRect(x, y, BEAT_WIDTH, TRACK_HEIGHT - 1, DisplayColor::WHITE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	78ba      	ldrb	r2, [r7, #2]
 8003326:	78f9      	ldrb	r1, [r7, #3]
 8003328:	2301      	movs	r3, #1
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	2307      	movs	r3, #7
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2308      	movs	r3, #8
 8003332:	f002 fa60 	bl	80057f6 <_ZN7Display8drawRectEhhhh12DisplayColor>
 8003336:	e000      	b.n	800333a <_ZN17SequencerRenderer11drawNoteBoxEhhhbbb+0x9e>
        return;
 8003338:	bf00      	nop
    }
}
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZNK17SequencerRenderer11getNoteNameEhb>:

const char* SequencerRenderer::getNoteName(uint8_t note, bool halfTone) const {
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
 800334c:	4613      	mov	r3, r2
 800334e:	70bb      	strb	r3, [r7, #2]
    static const char* noteNames[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
    
    if (note >= 12) return "?";
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b0b      	cmp	r3, #11
 8003354:	d901      	bls.n	800335a <_ZNK17SequencerRenderer11getNoteNameEhb+0x1a>
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <_ZNK17SequencerRenderer11getNoteNameEhb+0x4c>)
 8003358:	e011      	b.n	800337e <_ZNK17SequencerRenderer11getNoteNameEhb+0x3e>
    
    uint8_t index = note + (halfTone ? 1 : 0);
 800335a:	78bb      	ldrb	r3, [r7, #2]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <_ZNK17SequencerRenderer11getNoteNameEhb+0x24>
 8003360:	2201      	movs	r2, #1
 8003362:	e000      	b.n	8003366 <_ZNK17SequencerRenderer11getNoteNameEhb+0x26>
 8003364:	2200      	movs	r2, #0
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	4413      	add	r3, r2
 800336a:	73fb      	strb	r3, [r7, #15]
    if (index >= 12) index = 0;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b0b      	cmp	r3, #11
 8003370:	d901      	bls.n	8003376 <_ZNK17SequencerRenderer11getNoteNameEhb+0x36>
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
    
    return noteNames[index];
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	4a05      	ldr	r2, [pc, #20]	; (8003390 <_ZNK17SequencerRenderer11getNoteNameEhb+0x50>)
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	0800d4d4 	.word	0x0800d4d4
 8003390:	20000000 	.word	0x20000000

08003394 <_ZN10MenuSystem11getInstanceEv>:

// Реализация MenuSystem
MenuSystem& MenuSystem::getInstance() {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
    static MenuSystem instance;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <_ZN10MenuSystem11getInstanceEv+0x44>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f3bf 8f5b 	dmb	ish
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <_ZN10MenuSystem11getInstanceEv+0x3c>
 80033b4:	4808      	ldr	r0, [pc, #32]	; (80033d8 <_ZN10MenuSystem11getInstanceEv+0x44>)
 80033b6:	f008 fba7 	bl	800bb08 <__cxa_guard_acquire>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <_ZN10MenuSystem11getInstanceEv+0x3c>
 80033ca:	4803      	ldr	r0, [pc, #12]	; (80033d8 <_ZN10MenuSystem11getInstanceEv+0x44>)
 80033cc:	f008 fba8 	bl	800bb20 <__cxa_guard_release>
    return instance;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <_ZN10MenuSystem11getInstanceEv+0x48>)
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200001d8 	.word	0x200001d8
 80033dc:	200001b8 	.word	0x200001b8

080033e0 <_ZN10MenuSystem4initEv>:

bool MenuSystem::init() {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    currentMode = SequencerMode::SPLASH_SCREEN;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    splashStartTime = HAL_GetTick();
 80033ee:	f004 fa3d 	bl	800786c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]
    
    // Инициализация состояния редактирования
    editState.selectedTrack = 0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	711a      	strb	r2, [r3, #4]
    editState.selectedBlock = 0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	715a      	strb	r2, [r3, #5]
    editState.selectedBeat = 0;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	719a      	strb	r2, [r3, #6]
    editState.isEditing = false;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	71da      	strb	r2, [r3, #7]
    editState.currentNote = 0; // C
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	721a      	strb	r2, [r3, #8]
    editState.currentHalfTone = false;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	725a      	strb	r2, [r3, #9]
    
    // Инициализация состояния клавиш
    for (int i = 0; i < 13; i++) {
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	dc09      	bgt.n	800343a <_ZN10MenuSystem4initEv+0x5a>
        keyPressed[i] = false;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	3310      	adds	r3, #16
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 13; i++) {
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e7f2      	b.n	8003420 <_ZN10MenuSystem4initEv+0x40>
    }
    
    return true;
 800343a:	2301      	movs	r3, #1
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_ZN10MenuSystem10onKeyPressEh>:

void MenuSystem::onKeyPress(uint8_t keyCode) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
    if (keyCode == 0 || keyCode > 12) return;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <_ZN10MenuSystem10onKeyPressEh+0x8c>
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d839      	bhi.n	80034d0 <_ZN10MenuSystem10onKeyPressEh+0x8c>
    
    keyPressed[keyCode] = true;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	2201      	movs	r2, #1
 8003464:	741a      	strb	r2, [r3, #16]
    
    switch (currentMode) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d833      	bhi.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <_ZN10MenuSystem10onKeyPressEh+0x30>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003489 	.word	0x08003489
 8003478:	0800349f 	.word	0x0800349f
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034c3 	.word	0x080034c3
        case SequencerMode::SPLASH_SCREEN:
            // Любая клавиша переходит в главное меню
            Uart::getInstance().printf("Splash screen: key %d pressed, switching to main menu\n", keyCode);
 8003488:	f003 fc32 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	461a      	mov	r2, r3
 8003490:	4912      	ldr	r1, [pc, #72]	; (80034dc <_ZN10MenuSystem10onKeyPressEh+0x98>)
 8003492:	f003 fcb6 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            showMainMenu();
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f83a 	bl	8003510 <_ZN10MenuSystem12showMainMenuEv>
            break;
 800349c:	e01b      	b.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
            
        case SequencerMode::MAIN_MENU:
            processMainMenu(keyCode);
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8b6 	bl	8003614 <_ZN10MenuSystem15processMainMenuEh>
            break;
 80034a8:	e015      	b.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
            
        case SequencerMode::EDIT_MODE:
            processEditMode(keyCode);
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f950 	bl	8003754 <_ZN10MenuSystem15processEditModeEh>
            break;
 80034b4:	e00f      	b.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
            
        case SequencerMode::SETTINGS_MODE:
            processSettingsMode(keyCode);
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa8c 	bl	80039d8 <_ZN10MenuSystem19processSettingsModeEh>
            break;
 80034c0:	e009      	b.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
            
        case SequencerMode::HELP_SCREEN:
            if (keyCode == KeyMapping::KEY_BACK) {
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d105      	bne.n	80034d4 <_ZN10MenuSystem10onKeyPressEh+0x90>
                showMainMenu();
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f821 	bl	8003510 <_ZN10MenuSystem12showMainMenuEv>
            }
            break;
 80034ce:	e001      	b.n	80034d4 <_ZN10MenuSystem10onKeyPressEh+0x90>
    if (keyCode == 0 || keyCode > 12) return;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <_ZN10MenuSystem10onKeyPressEh+0x92>
            break;
 80034d4:	bf00      	nop
    }
}
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	0800d4d8 	.word	0x0800d4d8

080034e0 <_ZN10MenuSystem12onKeyReleaseEh>:

void MenuSystem::onKeyRelease(uint8_t keyCode) {
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
    if (keyCode == 0 || keyCode > 12) return;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <_ZN10MenuSystem12onKeyReleaseEh+0x24>
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d805      	bhi.n	8003504 <_ZN10MenuSystem12onKeyReleaseEh+0x24>
    keyPressed[keyCode] = false;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	741a      	strb	r2, [r3, #16]
 8003502:	e000      	b.n	8003506 <_ZN10MenuSystem12onKeyReleaseEh+0x26>
    if (keyCode == 0 || keyCode > 12) return;
 8003504:	bf00      	nop
}
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_ZN10MenuSystem12showMainMenuEv>:
void MenuSystem::showSplashScreen() {
    currentMode = SequencerMode::SPLASH_SCREEN;
    splashStartTime = HAL_GetTick();
}

void MenuSystem::showMainMenu() {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    currentMode = SequencerMode::MAIN_MENU;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
    Uart::getInstance().printf("Switched to MAIN_MENU mode\n");
 800351e:	f003 fbe7 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003522:	4603      	mov	r3, r0
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <_ZN10MenuSystem12showMainMenuEv+0x30>)
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fc6b 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    // Принудительно обновляем дисплей
    SequencerRenderer::getInstance().drawMainMenu();
 800352c:	f7ff fb2e 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 8003530:	4603      	mov	r3, r0
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fbae 	bl	8002c94 <_ZN17SequencerRenderer12drawMainMenuEv>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0800d510 	.word	0x0800d510

08003544 <_ZN10MenuSystem12showEditModeEv>:

void MenuSystem::showEditMode() {
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b087      	sub	sp, #28
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
    currentMode = SequencerMode::EDIT_MODE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
    editState.isEditing = true;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	71da      	strb	r2, [r3, #7]
    
    // Отладочный вывод
    Uart::getInstance().printf("Entering Edit Mode: track=%d, block=%d, beat=%d\n", 
 8003558:	f003 fbca 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	791b      	ldrb	r3, [r3, #4]
    Uart::getInstance().printf("Entering Edit Mode: track=%d, block=%d, beat=%d\n", 
 8003560:	461a      	mov	r2, r3
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	795b      	ldrb	r3, [r3, #5]
    Uart::getInstance().printf("Entering Edit Mode: track=%d, block=%d, beat=%d\n", 
 8003566:	4619      	mov	r1, r3
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	799b      	ldrb	r3, [r3, #6]
    Uart::getInstance().printf("Entering Edit Mode: track=%d, block=%d, beat=%d\n", 
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	460b      	mov	r3, r1
 8003570:	4919      	ldr	r1, [pc, #100]	; (80035d8 <_ZN10MenuSystem12showEditModeEv+0x94>)
 8003572:	f003 fc46 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // Убеждаемся, что selectedBlock в пределах
    Track& track = Sequencer::getInstance().getTrack(editState.selectedTrack);
 8003576:	f7fe f89b 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fe f9c2 	bl	800190c <_ZN9Sequencer8getTrackEh>
 8003588:	60f8      	str	r0, [r7, #12]
    if (editState.selectedBlock >= track.blocks.size()) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	795b      	ldrb	r3, [r3, #5]
 800358e:	461c      	mov	r4, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3308      	adds	r3, #8
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fc45 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 800359a:	4603      	mov	r3, r0
 800359c:	429c      	cmp	r4, r3
 800359e:	bf2c      	ite	cs
 80035a0:	2301      	movcs	r3, #1
 80035a2:	2300      	movcc	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <_ZN10MenuSystem12showEditModeEv+0x7a>
        editState.selectedBlock = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	715a      	strb	r2, [r3, #5]
        Uart::getInstance().printf("Reset selectedBlock to 0\n");
 80035b0:	f003 fb9e 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4909      	ldr	r1, [pc, #36]	; (80035dc <_ZN10MenuSystem12showEditModeEv+0x98>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fc22 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    }
    
    // Принудительно обновляем дисплей
    SequencerRenderer::getInstance().drawEditMode(editState);
 80035be:	f7ff fae5 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7ff fbd6 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}
 80035d8:	0800d52c 	.word	0x0800d52c
 80035dc:	0800d560 	.word	0x0800d560

080035e0 <_ZN10MenuSystem16showSettingsModeEv>:

void MenuSystem::showSettingsMode() {
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    currentMode = SequencerMode::SETTINGS_MODE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_ZN10MenuSystem14showHelpScreenEv>:

void MenuSystem::showHelpScreen() {
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    currentMode = SequencerMode::HELP_SCREEN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_ZN10MenuSystem15processMainMenuEh>:

void MenuSystem::processMainMenu(uint8_t keyCode) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
    switch (keyCode) {
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	3b01      	subs	r3, #1
 8003624:	2b0b      	cmp	r3, #11
 8003626:	f200 8086 	bhi.w	8003736 <_ZN10MenuSystem15processMainMenuEh+0x122>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <_ZN10MenuSystem15processMainMenuEh+0x1c>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003661 	.word	0x08003661
 8003634:	08003737 	.word	0x08003737
 8003638:	080036c1 	.word	0x080036c1
 800363c:	08003661 	.word	0x08003661
 8003640:	080036af 	.word	0x080036af
 8003644:	080036af 	.word	0x080036af
 8003648:	08003661 	.word	0x08003661
 800364c:	08003737 	.word	0x08003737
 8003650:	0800372f 	.word	0x0800372f
 8003654:	08003737 	.word	0x08003737
 8003658:	08003661 	.word	0x08003661
 800365c:	08003719 	.word	0x08003719
        case KeyMapping::KEY_TRACK_1:
        case KeyMapping::KEY_TRACK_2:
        case KeyMapping::KEY_TRACK_3:
        case KeyMapping::KEY_TRACK_4:
            // Выбор дорожки для редактирования (1,4,7,11 -> 0,1,2,3)
            if (keyCode == KeyMapping::KEY_TRACK_1) editState.selectedTrack = 0;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d103      	bne.n	800366e <_ZN10MenuSystem15processMainMenuEh+0x5a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	711a      	strb	r2, [r3, #4]
 800366c:	e013      	b.n	8003696 <_ZN10MenuSystem15processMainMenuEh+0x82>
            else if (keyCode == KeyMapping::KEY_TRACK_2) editState.selectedTrack = 1;
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d103      	bne.n	800367c <_ZN10MenuSystem15processMainMenuEh+0x68>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	711a      	strb	r2, [r3, #4]
 800367a:	e00c      	b.n	8003696 <_ZN10MenuSystem15processMainMenuEh+0x82>
            else if (keyCode == KeyMapping::KEY_TRACK_3) editState.selectedTrack = 2;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b07      	cmp	r3, #7
 8003680:	d103      	bne.n	800368a <_ZN10MenuSystem15processMainMenuEh+0x76>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	711a      	strb	r2, [r3, #4]
 8003688:	e005      	b.n	8003696 <_ZN10MenuSystem15processMainMenuEh+0x82>
            else if (keyCode == KeyMapping::KEY_TRACK_4) editState.selectedTrack = 3;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	2b0b      	cmp	r3, #11
 800368e:	d102      	bne.n	8003696 <_ZN10MenuSystem15processMainMenuEh+0x82>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	711a      	strb	r2, [r3, #4]
            Uart::getInstance().printf("Selected track %d, entering edit mode\n", editState.selectedTrack);
 8003696:	f003 fb2b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	791b      	ldrb	r3, [r3, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	4927      	ldr	r1, [pc, #156]	; (8003740 <_ZN10MenuSystem15processMainMenuEh+0x12c>)
 80036a2:	f003 fbae 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            showEditMode();
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff4c 	bl	8003544 <_ZN10MenuSystem12showEditModeEv>
            break;
 80036ac:	e044      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
            
        case Keyboard::KEY_5:
        case Keyboard::KEY_6:
            // Пианино дорожки (5->4, 6->5)
            editState.selectedTrack = keyCode + 1; 
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	3301      	adds	r3, #1
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	711a      	strb	r2, [r3, #4]
            showEditMode();
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff43 	bl	8003544 <_ZN10MenuSystem12showEditModeEv>
            break;
 80036be:	e03b      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
            
        case KeyMapping::KEY_OK:
            // Play/Stop
            Uart::getInstance().printf("Play/Stop key pressed\n");
 80036c0:	f003 fb16 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80036c4:	4603      	mov	r3, r0
 80036c6:	491f      	ldr	r1, [pc, #124]	; (8003744 <_ZN10MenuSystem15processMainMenuEh+0x130>)
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fb9a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            if (Sequencer::getInstance().isPlaying()) {
 80036ce:	f7fd ffef 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc ff82 	bl	80005de <_ZNK9Sequencer9isPlayingEv>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <_ZN10MenuSystem15processMainMenuEh+0xe8>
                Uart::getInstance().printf("Stopping sequencer\n");
 80036e0:	f003 fb06 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4918      	ldr	r1, [pc, #96]	; (8003748 <_ZN10MenuSystem15processMainMenuEh+0x134>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 fb8a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                Sequencer::getInstance().stop();
 80036ee:	f7fd ffdf 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe f8d8 	bl	80018aa <_ZN9Sequencer4stopEv>
            } else {
                Uart::getInstance().printf("Starting sequencer\n");
                Sequencer::getInstance().play();
            }
            break;
 80036fa:	e01d      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
                Uart::getInstance().printf("Starting sequencer\n");
 80036fc:	f003 faf8 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003700:	4603      	mov	r3, r0
 8003702:	4912      	ldr	r1, [pc, #72]	; (800374c <_ZN10MenuSystem15processMainMenuEh+0x138>)
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fb7c 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                Sequencer::getInstance().play();
 800370a:	f7fd ffd1 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 800370e:	4603      	mov	r3, r0
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe f8a1 	bl	8001858 <_ZN9Sequencer4playEv>
            break;
 8003716:	e00f      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
            
        case KeyMapping::KEY_SETTINGS:
            Uart::getInstance().printf("Settings key pressed, switching to settings mode\n");
 8003718:	f003 faea 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800371c:	4603      	mov	r3, r0
 800371e:	490c      	ldr	r1, [pc, #48]	; (8003750 <_ZN10MenuSystem15processMainMenuEh+0x13c>)
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fb6e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            showSettingsMode();
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff5a 	bl	80035e0 <_ZN10MenuSystem16showSettingsModeEv>
            break;
 800372c:	e004      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
            
        case KeyMapping::KEY_MENU:
            // Показать справку
            showHelpScreen();
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff63 	bl	80035fa <_ZN10MenuSystem14showHelpScreenEv>
            break;
 8003734:	e000      	b.n	8003738 <_ZN10MenuSystem15processMainMenuEh+0x124>
            
        default:
            // Игнорируем неизвестные клавиши
            break;
 8003736:	bf00      	nop
    }
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	0800d57c 	.word	0x0800d57c
 8003744:	0800d5a4 	.word	0x0800d5a4
 8003748:	0800d5bc 	.word	0x0800d5bc
 800374c:	0800d5d0 	.word	0x0800d5d0
 8003750:	0800d5e4 	.word	0x0800d5e4

08003754 <_ZN10MenuSystem15processEditModeEh>:

void MenuSystem::processEditMode(uint8_t keyCode) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
    Track& track = Sequencer::getInstance().getTrack(editState.selectedTrack);
 8003760:	f7fd ffa6 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe f8cd 	bl	800190c <_ZN9Sequencer8getTrackEh>
 8003772:	60b8      	str	r0, [r7, #8]
    
    switch (keyCode) {
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	3b01      	subs	r3, #1
 8003778:	2b0a      	cmp	r3, #10
 800377a:	f200 80eb 	bhi.w	8003954 <_ZN10MenuSystem15processEditModeEh+0x200>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <_ZN10MenuSystem15processEditModeEh+0x30>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037b1 	.word	0x080037b1
 8003788:	0800386d 	.word	0x0800386d
 800378c:	08003955 	.word	0x08003955
 8003790:	080037b1 	.word	0x080037b1
 8003794:	080038a5 	.word	0x080038a5
 8003798:	0800394d 	.word	0x0800394d
 800379c:	080037b1 	.word	0x080037b1
 80037a0:	080038dd 	.word	0x080038dd
 80037a4:	08003955 	.word	0x08003955
 80037a8:	08003915 	.word	0x08003915
 80037ac:	080037b1 	.word	0x080037b1
        case KeyMapping::KEY_TRACK_2:
        case KeyMapping::KEY_TRACK_3:
        case KeyMapping::KEY_TRACK_4:
            // Для барабанных дорожек - установка/снятие удара в конкретном такте
            // Для пианино дорожек - выбор такта
            if (track.type == TrackType::DRUM) {
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d127      	bne.n	8003808 <_ZN10MenuSystem15processEditModeEh+0xb4>
                // Определяем номер такта по нажатой клавише
                uint8_t beatIndex = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]
                if (keyCode == KeyMapping::KEY_TRACK_1) beatIndex = 0;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <_ZN10MenuSystem15processEditModeEh+0x74>
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e010      	b.n	80037ea <_ZN10MenuSystem15processEditModeEh+0x96>
                else if (keyCode == KeyMapping::KEY_TRACK_2) beatIndex = 1;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d102      	bne.n	80037d4 <_ZN10MenuSystem15processEditModeEh+0x80>
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e00a      	b.n	80037ea <_ZN10MenuSystem15processEditModeEh+0x96>
                else if (keyCode == KeyMapping::KEY_TRACK_3) beatIndex = 2;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	d102      	bne.n	80037e0 <_ZN10MenuSystem15processEditModeEh+0x8c>
 80037da:	2302      	movs	r3, #2
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e004      	b.n	80037ea <_ZN10MenuSystem15processEditModeEh+0x96>
                else if (keyCode == KeyMapping::KEY_TRACK_4) beatIndex = 3;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b0b      	cmp	r3, #11
 80037e4:	d101      	bne.n	80037ea <_ZN10MenuSystem15processEditModeEh+0x96>
 80037e6:	2303      	movs	r3, #3
 80037e8:	73fb      	strb	r3, [r7, #15]
                
                // Устанавливаем выбранный такт и переключаем удар
                editState.selectedBeat = beatIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	719a      	strb	r2, [r3, #6]
                toggleBeat();
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f96b 	bl	8003acc <_ZN10MenuSystem10toggleBeatEv>
                Uart::getInstance().printf("Drum track: toggled beat %d\n", editState.selectedBeat);
 80037f6:	f003 fa7b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	799b      	ldrb	r3, [r3, #6]
 80037fe:	461a      	mov	r2, r3
 8003800:	495b      	ldr	r1, [pc, #364]	; (8003970 <_ZN10MenuSystem15processEditModeEh+0x21c>)
 8003802:	f003 fafe 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 8003806:	e027      	b.n	8003858 <_ZN10MenuSystem15processEditModeEh+0x104>
            } else if (track.type == TrackType::PIANO) {
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d123      	bne.n	8003858 <_ZN10MenuSystem15processEditModeEh+0x104>
                // Выбираем такт для пианино
                uint8_t beatIndex = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	73bb      	strb	r3, [r7, #14]
                if (keyCode == KeyMapping::KEY_TRACK_1) beatIndex = 0;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <_ZN10MenuSystem15processEditModeEh+0xcc>
 800381a:	2300      	movs	r3, #0
 800381c:	73bb      	strb	r3, [r7, #14]
 800381e:	e010      	b.n	8003842 <_ZN10MenuSystem15processEditModeEh+0xee>
                else if (keyCode == KeyMapping::KEY_TRACK_2) beatIndex = 1;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d102      	bne.n	800382c <_ZN10MenuSystem15processEditModeEh+0xd8>
 8003826:	2301      	movs	r3, #1
 8003828:	73bb      	strb	r3, [r7, #14]
 800382a:	e00a      	b.n	8003842 <_ZN10MenuSystem15processEditModeEh+0xee>
                else if (keyCode == KeyMapping::KEY_TRACK_3) beatIndex = 2;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b07      	cmp	r3, #7
 8003830:	d102      	bne.n	8003838 <_ZN10MenuSystem15processEditModeEh+0xe4>
 8003832:	2302      	movs	r3, #2
 8003834:	73bb      	strb	r3, [r7, #14]
 8003836:	e004      	b.n	8003842 <_ZN10MenuSystem15processEditModeEh+0xee>
                else if (keyCode == KeyMapping::KEY_TRACK_4) beatIndex = 3;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b0b      	cmp	r3, #11
 800383c:	d101      	bne.n	8003842 <_ZN10MenuSystem15processEditModeEh+0xee>
 800383e:	2303      	movs	r3, #3
 8003840:	73bb      	strb	r3, [r7, #14]
                
                editState.selectedBeat = beatIndex;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7bba      	ldrb	r2, [r7, #14]
 8003846:	719a      	strb	r2, [r3, #6]
                Uart::getInstance().printf("Piano track: selected beat %d\n", editState.selectedBeat);
 8003848:	f003 fa52 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	799b      	ldrb	r3, [r3, #6]
 8003850:	461a      	mov	r2, r3
 8003852:	4948      	ldr	r1, [pc, #288]	; (8003974 <_ZN10MenuSystem15processEditModeEh+0x220>)
 8003854:	f003 fad5 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            }
            // Принудительно обновляем дисплей
            SequencerRenderer::getInstance().drawEditMode(editState);
 8003858:	f7ff f998 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7ff fa89 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            break;
 800386a:	e07c      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            
        case KeyMapping::KEY_UP:
            // Навигация вверх
            if (editState.selectedTrack > 0) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d071      	beq.n	8003958 <_ZN10MenuSystem15processEditModeEh+0x204>
                editState.selectedTrack--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	711a      	strb	r2, [r3, #4]
                Uart::getInstance().printf("Track up: selected track = %d\n", editState.selectedTrack);
 8003880:	f003 fa36 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	461a      	mov	r2, r3
 800388a:	493b      	ldr	r1, [pc, #236]	; (8003978 <_ZN10MenuSystem15processEditModeEh+0x224>)
 800388c:	f003 fab9 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                // Принудительно обновляем дисплей
                SequencerRenderer::getInstance().drawEditMode(editState);
 8003890:	f7ff f97c 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7ff fa6d 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            }
            break;
 80038a2:	e059      	b.n	8003958 <_ZN10MenuSystem15processEditModeEh+0x204>
            
        case KeyMapping::KEY_DOWN:
            // Навигация вниз
            if (editState.selectedTrack < MAX_TRACKS - 1) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	791b      	ldrb	r3, [r3, #4]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d857      	bhi.n	800395c <_ZN10MenuSystem15processEditModeEh+0x208>
                editState.selectedTrack++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	791b      	ldrb	r3, [r3, #4]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	711a      	strb	r2, [r3, #4]
                Uart::getInstance().printf("Track down: selected track = %d\n", editState.selectedTrack);
 80038b8:	f003 fa1a 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	791b      	ldrb	r3, [r3, #4]
 80038c0:	461a      	mov	r2, r3
 80038c2:	492e      	ldr	r1, [pc, #184]	; (800397c <_ZN10MenuSystem15processEditModeEh+0x228>)
 80038c4:	f003 fa9d 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                // Принудительно обновляем дисплей
                SequencerRenderer::getInstance().drawEditMode(editState);
 80038c8:	f7ff f960 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff fa51 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            }
            break;
 80038da:	e03f      	b.n	800395c <_ZN10MenuSystem15processEditModeEh+0x208>
            
        case KeyMapping::KEY_LEFT:
            // Предыдущий такт
            if (editState.selectedBeat > 0) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	799b      	ldrb	r3, [r3, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03d      	beq.n	8003960 <_ZN10MenuSystem15processEditModeEh+0x20c>
                editState.selectedBeat--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	799b      	ldrb	r3, [r3, #6]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	719a      	strb	r2, [r3, #6]
                Uart::getInstance().printf("Beat left: selected beat = %d\n", editState.selectedBeat);
 80038f0:	f003 f9fe 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	799b      	ldrb	r3, [r3, #6]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4921      	ldr	r1, [pc, #132]	; (8003980 <_ZN10MenuSystem15processEditModeEh+0x22c>)
 80038fc:	f003 fa81 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                // Принудительно обновляем дисплей
                SequencerRenderer::getInstance().drawEditMode(editState);
 8003900:	f7ff f944 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7ff fa35 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            }
            break;
 8003912:	e025      	b.n	8003960 <_ZN10MenuSystem15processEditModeEh+0x20c>
            
        case KeyMapping::KEY_RIGHT:
            // Следующий такт
            if (editState.selectedBeat < 3) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	799b      	ldrb	r3, [r3, #6]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d823      	bhi.n	8003964 <_ZN10MenuSystem15processEditModeEh+0x210>
                editState.selectedBeat++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	799b      	ldrb	r3, [r3, #6]
 8003920:	3301      	adds	r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	719a      	strb	r2, [r3, #6]
                Uart::getInstance().printf("Beat right: selected beat = %d\n", editState.selectedBeat);
 8003928:	f003 f9e2 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	799b      	ldrb	r3, [r3, #6]
 8003930:	461a      	mov	r2, r3
 8003932:	4914      	ldr	r1, [pc, #80]	; (8003984 <_ZN10MenuSystem15processEditModeEh+0x230>)
 8003934:	f003 fa65 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                // Принудительно обновляем дисплей
                SequencerRenderer::getInstance().drawEditMode(editState);
 8003938:	f7ff f928 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff fa19 	bl	8002d7c <_ZN17SequencerRenderer12drawEditModeERK9EditState>
            }
            break;
 800394a:	e00b      	b.n	8003964 <_ZN10MenuSystem15processEditModeEh+0x210>
            
        case KeyMapping::KEY_BACK:
            showMainMenu();
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fddf 	bl	8003510 <_ZN10MenuSystem12showMainMenuEv>
            break;
 8003952:	e008      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            
        default:
            // Игнорируем неизвестные клавиши
            break;
 8003954:	bf00      	nop
 8003956:	e006      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            break;
 8003958:	bf00      	nop
 800395a:	e004      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            break;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <_ZN10MenuSystem15processEditModeEh+0x212>
            break;
 8003964:	bf00      	nop
    }
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	0800d618 	.word	0x0800d618
 8003974:	0800d638 	.word	0x0800d638
 8003978:	0800d658 	.word	0x0800d658
 800397c:	0800d678 	.word	0x0800d678
 8003980:	0800d69c 	.word	0x0800d69c
 8003984:	0800d6bc 	.word	0x0800d6bc

08003988 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	da01      	bge.n	80039a2 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	e000      	b.n	80039a4 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80039a2:	687b      	ldr	r3, [r7, #4]
    }
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	da01      	bge.n	80039ca <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	e000      	b.n	80039cc <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 80039ca:	687b      	ldr	r3, [r7, #4]
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_ZN10MenuSystem19processSettingsModeEh>:

void MenuSystem::processSettingsMode(uint8_t keyCode) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
    Project& project = Sequencer::getInstance().getProject();
 80039e4:	f7fd fe64 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f8b5 	bl	8002b5a <_ZN9Sequencer10getProjectEv>
 80039f0:	61f8      	str	r0, [r7, #28]
    
    switch (keyCode) {
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	3b02      	subs	r3, #2
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d863      	bhi.n	8003ac2 <_ZN10MenuSystem19processSettingsModeEh+0xea>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <_ZN10MenuSystem19processSettingsModeEh+0x28>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003ac3 	.word	0x08003ac3
 8003a08:	08003ac3 	.word	0x08003ac3
 8003a0c:	08003a51 	.word	0x08003a51
 8003a10:	08003ab5 	.word	0x08003ab5
 8003a14:	08003ac3 	.word	0x08003ac3
 8003a18:	08003a7d 	.word	0x08003a7d
 8003a1c:	08003ac3 	.word	0x08003ac3
 8003a20:	08003a99 	.word	0x08003a99
        case KeyMapping::KEY_UP:
            // Увеличить BPM
            project.bpm = std::min(240, project.bpm + 10);
 8003a24:	23f0      	movs	r3, #240	; 0xf0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8003a2e:	330a      	adds	r3, #10
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	f107 0210 	add.w	r2, r7, #16
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ffa3 	bl	8003988 <_ZSt3minIiERKT_S2_S2_>
 8003a42:	4603      	mov	r3, r0
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
            break;
 8003a4e:	e038      	b.n	8003ac2 <_ZN10MenuSystem19processSettingsModeEh+0xea>
            
        case KeyMapping::KEY_DOWN:
            // Уменьшить BPM
            project.bpm = std::max(60, project.bpm - 10);
 8003a50:	233c      	movs	r3, #60	; 0x3c
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8003a5a:	3b0a      	subs	r3, #10
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	f107 0218 	add.w	r2, r7, #24
 8003a62:	f107 0314 	add.w	r3, r7, #20
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ffa1 	bl	80039b0 <_ZSt3maxIiERKT_S2_S2_>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
            break;
 8003a7a:	e022      	b.n	8003ac2 <_ZN10MenuSystem19processSettingsModeEh+0xea>
            
        case KeyMapping::KEY_LEFT:
            // Уменьшить громкость
            if (project.volume > 0) {
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01a      	beq.n	8003abc <_ZN10MenuSystem19processSettingsModeEh+0xe4>
                project.volume--;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            }
            break;
 8003a96:	e011      	b.n	8003abc <_ZN10MenuSystem19processSettingsModeEh+0xe4>
            
        case KeyMapping::KEY_RIGHT:
            // Увеличить громкость
            if (project.volume < 10) {
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d80e      	bhi.n	8003ac0 <_ZN10MenuSystem19processSettingsModeEh+0xe8>
                project.volume++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
            }
            break;
 8003ab2:	e005      	b.n	8003ac0 <_ZN10MenuSystem19processSettingsModeEh+0xe8>
            
        case KeyMapping::KEY_BACK:
            showMainMenu();
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fd2b 	bl	8003510 <_ZN10MenuSystem12showMainMenuEv>
            break;
 8003aba:	e002      	b.n	8003ac2 <_ZN10MenuSystem19processSettingsModeEh+0xea>
            break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <_ZN10MenuSystem19processSettingsModeEh+0xea>
            break;
 8003ac0:	bf00      	nop
    }
}
 8003ac2:	bf00      	nop
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop

08003acc <_ZN10MenuSystem10toggleBeatEv>:

void MenuSystem::toggleBeat() {
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b089      	sub	sp, #36	; 0x24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]
    Track& track = Sequencer::getInstance().getTrack(editState.selectedTrack);
 8003ad4:	f7fd fdec 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fd ff13 	bl	800190c <_ZN9Sequencer8getTrackEh>
 8003ae6:	6178      	str	r0, [r7, #20]
    
    // Отладочный вывод
    Uart::getInstance().printf("toggleBeat: track=%d, block=%d, beat=%d\n", 
 8003ae8:	f003 f902 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	791b      	ldrb	r3, [r3, #4]
    Uart::getInstance().printf("toggleBeat: track=%d, block=%d, beat=%d\n", 
 8003af0:	461a      	mov	r2, r3
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	795b      	ldrb	r3, [r3, #5]
    Uart::getInstance().printf("toggleBeat: track=%d, block=%d, beat=%d\n", 
 8003af6:	4619      	mov	r1, r3
        editState.selectedTrack, editState.selectedBlock, editState.selectedBeat);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	799b      	ldrb	r3, [r3, #6]
    Uart::getInstance().printf("toggleBeat: track=%d, block=%d, beat=%d\n", 
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	460b      	mov	r3, r1
 8003b00:	4949      	ldr	r1, [pc, #292]	; (8003c28 <_ZN10MenuSystem10toggleBeatEv+0x15c>)
 8003b02:	f003 f97e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    Uart::getInstance().printf("track.blocks.size()=%d\n", track.blocks.size());
 8003b06:	f003 f8f3 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe f987 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 8003b16:	4603      	mov	r3, r0
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4944      	ldr	r1, [pc, #272]	; (8003c2c <_ZN10MenuSystem10toggleBeatEv+0x160>)
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f003 f970 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    if (track.blocks.empty()) {
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	3308      	adds	r3, #8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f960 	bl	8001dec <_ZNKSt6vectorI5BlockSaIS0_EE5emptyEv>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <_ZN10MenuSystem10toggleBeatEv+0x76>
        Uart::getInstance().printf("ERROR: No blocks in track!\n");
 8003b32:	f003 f8dd 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	493d      	ldr	r1, [pc, #244]	; (8003c30 <_ZN10MenuSystem10toggleBeatEv+0x164>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 f961 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        return;
 8003b40:	e06e      	b.n	8003c20 <_ZN10MenuSystem10toggleBeatEv+0x154>
    }
    
    // Проверяем границы
    if (editState.selectedBlock >= track.blocks.size()) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	795b      	ldrb	r3, [r3, #5]
 8003b46:	461c      	mov	r4, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe f969 	bl	8001e24 <_ZNKSt6vectorI5BlockSaIS0_EE4sizeEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	429c      	cmp	r4, r3
 8003b56:	bf2c      	ite	cs
 8003b58:	2301      	movcs	r3, #1
 8003b5a:	2300      	movcc	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <_ZN10MenuSystem10toggleBeatEv+0xaa>
        Uart::getInstance().printf("ERROR: selectedBlock out of bounds!\n");
 8003b62:	f003 f8c5 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4932      	ldr	r1, [pc, #200]	; (8003c34 <_ZN10MenuSystem10toggleBeatEv+0x168>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 f949 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        editState.selectedBlock = 0; // Сбрасываем на первый блок
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	715a      	strb	r2, [r3, #5]
    }
    
    Block& block = track.blocks[editState.selectedBlock];
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f103 0208 	add.w	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	795b      	ldrb	r3, [r3, #5]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe f964 	bl	8001e50 <_ZNSt6vectorI5BlockSaIS0_EEixEj>
 8003b88:	6138      	str	r0, [r7, #16]
    Beat& beat = block.beats[editState.selectedBeat];
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	799b      	ldrb	r3, [r3, #6]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    
    if (track.type == TrackType::DRUM) {
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d114      	bne.n	8003bce <_ZN10MenuSystem10toggleBeatEv+0x102>
        beat.active = !beat.active;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	701a      	strb	r2, [r3, #0]
        Uart::getInstance().printf("Drum beat toggled: %s\n", beat.active ? "ON" : "OFF");
 8003bb2:	f003 f89d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <_ZN10MenuSystem10toggleBeatEv+0xf6>
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <_ZN10MenuSystem10toggleBeatEv+0x16c>)
 8003bc0:	e000      	b.n	8003bc4 <_ZN10MenuSystem10toggleBeatEv+0xf8>
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <_ZN10MenuSystem10toggleBeatEv+0x170>)
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	491e      	ldr	r1, [pc, #120]	; (8003c40 <_ZN10MenuSystem10toggleBeatEv+0x174>)
 8003bc8:	f003 f91b 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 8003bcc:	e028      	b.n	8003c20 <_ZN10MenuSystem10toggleBeatEv+0x154>
    } else {
        if (beat.note == 255) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2bff      	cmp	r3, #255	; 0xff
 8003bd4:	d117      	bne.n	8003c06 <_ZN10MenuSystem10toggleBeatEv+0x13a>
            // Установить ноту
            beat.note = editState.currentNote;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7a1a      	ldrb	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	705a      	strb	r2, [r3, #1]
            beat.halfTone = editState.currentHalfTone;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7a5a      	ldrb	r2, [r3, #9]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	709a      	strb	r2, [r3, #2]
            Uart::getInstance().printf("Note set: %d%s\n", beat.note, beat.halfTone ? "#" : "");
 8003be6:	f003 f883 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	789b      	ldrb	r3, [r3, #2]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <_ZN10MenuSystem10toggleBeatEv+0x130>
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <_ZN10MenuSystem10toggleBeatEv+0x178>)
 8003bfa:	e000      	b.n	8003bfe <_ZN10MenuSystem10toggleBeatEv+0x132>
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <_ZN10MenuSystem10toggleBeatEv+0x17c>)
 8003bfe:	4913      	ldr	r1, [pc, #76]	; (8003c4c <_ZN10MenuSystem10toggleBeatEv+0x180>)
 8003c00:	f003 f8ff 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 8003c04:	e00c      	b.n	8003c20 <_ZN10MenuSystem10toggleBeatEv+0x154>
        } else {
            // Убрать ноту
            beat.note = 255;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	705a      	strb	r2, [r3, #1]
            beat.halfTone = false;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	709a      	strb	r2, [r3, #2]
            Uart::getInstance().printf("Note removed\n");
 8003c12:	f003 f86d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003c16:	4603      	mov	r3, r0
 8003c18:	490d      	ldr	r1, [pc, #52]	; (8003c50 <_ZN10MenuSystem10toggleBeatEv+0x184>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 f8f1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        }
    }
}
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd90      	pop	{r4, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	0800d6dc 	.word	0x0800d6dc
 8003c2c:	0800d708 	.word	0x0800d708
 8003c30:	0800d720 	.word	0x0800d720
 8003c34:	0800d73c 	.word	0x0800d73c
 8003c38:	0800d764 	.word	0x0800d764
 8003c3c:	0800d768 	.word	0x0800d768
 8003c40:	0800d76c 	.word	0x0800d76c
 8003c44:	0800d784 	.word	0x0800d784
 8003c48:	0800d788 	.word	0x0800d788
 8003c4c:	0800d78c 	.word	0x0800d78c
 8003c50:	0800d79c 	.word	0x0800d79c

08003c54 <_ZNKSt6vectorI5BlockSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
      }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <_ZN11UartControl11getInstanceEv>:
#include "UartControl.hpp"
#include "drivers/Uart.hpp"
#include "scheduler/Scheduler.hpp"
#include "stm32f4xx_hal.h"

UartControl& UartControl::getInstance() {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    static UartControl instance;
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <_ZN11UartControl11getInstanceEv+0x44>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f3bf 8f5b 	dmb	ish
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <_ZN11UartControl11getInstanceEv+0x3c>
 8003c9c:	4808      	ldr	r0, [pc, #32]	; (8003cc0 <_ZN11UartControl11getInstanceEv+0x44>)
 8003c9e:	f007 ff33 	bl	800bb08 <__cxa_guard_acquire>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <_ZN11UartControl11getInstanceEv+0x3c>
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <_ZN11UartControl11getInstanceEv+0x44>)
 8003cb4:	f007 ff34 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <_ZN11UartControl11getInstanceEv+0x48>)
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000210 	.word	0x20000210
 8003cc4:	200001dc 	.word	0x200001dc

08003cc8 <_ZN11UartControl4initEv>:

bool UartControl::init() {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	6078      	str	r0, [r7, #4]
    // Инициализация состояния
    currentState = UartState::ENABLED;  // По умолчанию UART включен
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    indicatorActive = false;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    indicatorStartTime = 0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    // Инициализация кнопки (PC15 - боковая кнопка)
    Button_Init(&sideButton, GPIOC, GPIO_PIN_15, BUTTON_DEBOUNCE_MS, BUTTON_LONG_PRESS_MS);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1d18      	adds	r0, r3, #4
 8003ce8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2332      	movs	r3, #50	; 0x32
 8003cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cf4:	4913      	ldr	r1, [pc, #76]	; (8003d44 <_ZN11UartControl4initEv+0x7c>)
 8003cf6:	f000 f94b 	bl	8003f90 <Button_Init>
    
    // Инициализация светодиода (PD14 - желтый/красный индикатор)
    Led_Init(&statusLed, GPIOD, GPIO_PIN_14);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d02:	4911      	ldr	r1, [pc, #68]	; (8003d48 <_ZN11UartControl4initEv+0x80>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb2d 	bl	8004364 <Led_Init>
    
    // Установка начального состояния светодиода
    setLedState();
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8dd 	bl	8003eca <_ZN11UartControl11setLedStateEv>
    
    // Отладочный вывод
    Uart::getInstance().printf("UartControl: Initialized (PC15 button, PD14 LED)\n");
 8003d10:	f002 ffee 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003d14:	4603      	mov	r3, r0
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <_ZN11UartControl4initEv+0x84>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 f872 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    Uart::getInstance().printf("UartControl: UART is %s\n", 
 8003d1e:	f002 ffe7 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
        currentState == UartState::ENABLED ? "ENABLED" : "DISABLED");
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
    Uart::getInstance().printf("UartControl: UART is %s\n", 
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <_ZN11UartControl4initEv+0x66>
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <_ZN11UartControl4initEv+0x88>)
 8003d2c:	e000      	b.n	8003d30 <_ZN11UartControl4initEv+0x68>
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <_ZN11UartControl4initEv+0x8c>)
 8003d30:	461a      	mov	r2, r3
 8003d32:	4909      	ldr	r1, [pc, #36]	; (8003d58 <_ZN11UartControl4initEv+0x90>)
 8003d34:	f003 f865 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    return true;
 8003d38:	2301      	movs	r3, #1
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020c00 	.word	0x40020c00
 8003d4c:	0800d7f4 	.word	0x0800d7f4
 8003d50:	0800d828 	.word	0x0800d828
 8003d54:	0800d830 	.word	0x0800d830
 8003d58:	0800d83c 	.word	0x0800d83c

08003d5c <_ZN11UartControl6updateEv>:

void UartControl::update() {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8003d64:	f003 fd82 	bl	800786c <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]
    
    // Обработка кнопки
    Button_Poll(&sideButton);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f938 	bl	8003fe4 <Button_Poll>
    
    if (Button_EventReady(&sideButton)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f9b3 	bl	80040e4 <Button_EventReady>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <_ZN11UartControl6updateEv+0x42>
        handleButtonEvent();
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f80c 	bl	8003dac <_ZN11UartControl17handleButtonEventEv>
        Button_EventClear(&sideButton);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f9bb 	bl	8004114 <Button_EventClear>
    }
    
    // Убрали периодический отладочный вывод для улучшения производительности
    
    // Обновление индикации
    updateIndicator();
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f872 	bl	8003e88 <_ZN11UartControl15updateIndicatorEv>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZN11UartControl17handleButtonEventEv>:

void UartControl::handleButtonEvent() {
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    uint8_t isLongPress = Button_EventIsLong(&sideButton);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f99f 	bl	80040fc <Button_EventIsLong>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	73fb      	strb	r3, [r7, #15]
    
    if (isLongPress) {
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01f      	beq.n	8003e08 <_ZN11UartControl17handleButtonEventEv+0x5c>
        // Длинное нажатие - переключение состояния UART
        toggleUart();
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8b9 	bl	8003f40 <_ZN11UartControl10toggleUartEv>
        
        // Индикация красным светодиодом
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Красный светодиод
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dd4:	4825      	ldr	r0, [pc, #148]	; (8003e6c <_ZN11UartControl17handleButtonEventEv+0xc0>)
 8003dd6:	f004 f8b5 	bl	8007f44 <HAL_GPIO_WritePin>
        indicatorActive = true;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        indicatorStartTime = HAL_GetTick();
 8003de2:	f003 fd43 	bl	800786c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        // Отладочный вывод
        Uart::getInstance().printf("UART toggled: %s\n", 
 8003dec:	f002 ff80 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
            currentState == UartState::ENABLED ? "ENABLED" : "DISABLED");
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
        Uart::getInstance().printf("UART toggled: %s\n", 
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <_ZN11UartControl17handleButtonEventEv+0x50>
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <_ZN11UartControl17handleButtonEventEv+0xc4>)
 8003dfa:	e000      	b.n	8003dfe <_ZN11UartControl17handleButtonEventEv+0x52>
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <_ZN11UartControl17handleButtonEventEv+0xc8>)
 8003dfe:	461a      	mov	r2, r3
 8003e00:	491d      	ldr	r1, [pc, #116]	; (8003e78 <_ZN11UartControl17handleButtonEventEv+0xcc>)
 8003e02:	f002 fffe 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        Uart::getInstance().printf("\n=== TASKS INFO (Button) ===\n");
        Scheduler::getInstance().printTaskInfo();
        Uart::getInstance().printf("Uptime: %lu ms\n", HAL_GetTick());
        Uart::getInstance().printf("=== END TASKS INFO ===\n");
    }
}
 8003e06:	e02d      	b.n	8003e64 <_ZN11UartControl17handleButtonEventEv+0xb8>
        indicatorActive = true;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        indicatorStartTime = HAL_GetTick();
 8003e10:	f003 fd2c 	bl	800786c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Желтый светодиод
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e20:	4812      	ldr	r0, [pc, #72]	; (8003e6c <_ZN11UartControl17handleButtonEventEv+0xc0>)
 8003e22:	f004 f88f 	bl	8007f44 <HAL_GPIO_WritePin>
        Uart::getInstance().printf("\n=== TASKS INFO (Button) ===\n");
 8003e26:	f002 ff63 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4913      	ldr	r1, [pc, #76]	; (8003e7c <_ZN11UartControl17handleButtonEventEv+0xd0>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 ffe7 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        Scheduler::getInstance().printTaskInfo();
 8003e34:	f003 fa68 	bl	8007308 <_ZN9Scheduler11getInstanceEv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fbf8 	bl	8007630 <_ZNK9Scheduler13printTaskInfoEv>
        Uart::getInstance().printf("Uptime: %lu ms\n", HAL_GetTick());
 8003e40:	f002 ff56 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003e44:	4604      	mov	r4, r0
 8003e46:	f003 fd11 	bl	800786c <HAL_GetTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	490c      	ldr	r1, [pc, #48]	; (8003e80 <_ZN11UartControl17handleButtonEventEv+0xd4>)
 8003e50:	4620      	mov	r0, r4
 8003e52:	f002 ffd6 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        Uart::getInstance().printf("=== END TASKS INFO ===\n");
 8003e56:	f002 ff4b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4909      	ldr	r1, [pc, #36]	; (8003e84 <_ZN11UartControl17handleButtonEventEv+0xd8>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f002 ffcf 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	0800d828 	.word	0x0800d828
 8003e74:	0800d830 	.word	0x0800d830
 8003e78:	0800d858 	.word	0x0800d858
 8003e7c:	0800d86c 	.word	0x0800d86c
 8003e80:	0800d88c 	.word	0x0800d88c
 8003e84:	0800d89c 	.word	0x0800d89c

08003e88 <_ZN11UartControl15updateIndicatorEv>:

void UartControl::updateIndicator() {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    if (indicatorActive) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <_ZN11UartControl15updateIndicatorEv+0x3a>
        if ((HAL_GetTick() - indicatorStartTime) >= LED_INDICATOR_MS) {
 8003e9a:	f003 fce7 	bl	800786c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2bc7      	cmp	r3, #199	; 0xc7
 8003ea8:	bf8c      	ite	hi
 8003eaa:	2301      	movhi	r3, #1
 8003eac:	2300      	movls	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <_ZN11UartControl15updateIndicatorEv+0x3a>
            // Завершаем индикацию
            indicatorActive = false;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            setLedState();
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f804 	bl	8003eca <_ZN11UartControl11setLedStateEv>
        }
    }
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZN11UartControl11setLedStateEv>:

void UartControl::setLedState() {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
    if (indicatorActive) {
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d111      	bne.n	8003f00 <_ZN11UartControl11setLedStateEv+0x36>
        // Во время индикации светодиод уже установлен в handleButtonEvent
        return;
    }
    
    // Устанавливаем светодиод в соответствии с состоянием UART
    if (currentState == UartState::ENABLED) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <_ZN11UartControl11setLedStateEv+0x28>
        // UART включен - желтый светодиод (светится постоянно)
        Led_Set(&statusLed, GPIO_PIN_SET);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa4d 	bl	800438a <Led_Set>
 8003ef0:	e007      	b.n	8003f02 <_ZN11UartControl11setLedStateEv+0x38>
    } else {
        // UART выключен - светодиод выключен
        Led_Set(&statusLed, GPIO_PIN_RESET);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa46 	bl	800438a <Led_Set>
 8003efe:	e000      	b.n	8003f02 <_ZN11UartControl11setLedStateEv+0x38>
        return;
 8003f00:	bf00      	nop
    }
}
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN11UartControl10enableUartEv>:

void UartControl::enableUart() {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    currentState = UartState::ENABLED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    setLedState();
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffd7 	bl	8003eca <_ZN11UartControl11setLedStateEv>
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN11UartControl11disableUartEv>:

void UartControl::disableUart() {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
    currentState = UartState::DISABLED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    setLedState();
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ffc9 	bl	8003eca <_ZN11UartControl11setLedStateEv>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZN11UartControl10toggleUartEv>:

void UartControl::toggleUart() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    if (currentState == UartState::ENABLED) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <_ZN11UartControl10toggleUartEv+0x18>
        disableUart();
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ffe7 	bl	8003f24 <_ZN11UartControl11disableUartEv>
    } else {
        enableUart();
    }
}
 8003f56:	e002      	b.n	8003f5e <_ZN11UartControl10toggleUartEv+0x1e>
        enableUart();
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ffd5 	bl	8003f08 <_ZN11UartControl10enableUartEv>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <phys_pressed>:
#include "button.h"

/* считаем кнопку active-low (нажатие -> 0). При необходимости поменяйте phys_pressed */
static inline uint8_t phys_pressed(GPIO_TypeDef *port, uint16_t pin)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	807b      	strh	r3, [r7, #2]
    return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) ? 1 : 0;
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f003 ffcc 	bl	8007f14 <HAL_GPIO_ReadPin>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <Button_Init>:

void Button_Init(Button_t *b, GPIO_TypeDef *port, uint16_t pin, uint32_t debounce_ms, uint32_t long_press_ms)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
    b->port = port;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	601a      	str	r2, [r3, #0]
    b->pin = pin;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	809a      	strh	r2, [r3, #4]
    b->debounce_ms = debounce_ms;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	609a      	str	r2, [r3, #8]
    b->long_press_ms = long_press_ms;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	60da      	str	r2, [r3, #12]
    b->state = BUTTON_STATE_IDLE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	741a      	strb	r2, [r3, #16]
    b->last_change_tick = HAL_GetTick();
 8003fbe:	f003 fc55 	bl	800786c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	615a      	str	r2, [r3, #20]
    b->press_tick = 0;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
    b->event_ready = 0;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    b->last_event_is_long = 0;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	775a      	strb	r2, [r3, #29]
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <Button_Poll>:

void Button_Poll(Button_t *b)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8003fec:	f003 fc3e 	bl	800786c <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]
    uint8_t pressed = phys_pressed(b->port, b->pin);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	889b      	ldrh	r3, [r3, #4]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7ff ffb2 	bl	8003f66 <phys_pressed>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]

    switch (b->state) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7c1b      	ldrb	r3, [r3, #16]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d85a      	bhi.n	80040c4 <Button_Poll+0xe0>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <Button_Poll+0x30>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004025 	.word	0x08004025
 8004018:	08004039 	.word	0x08004039
 800401c:	08004065 	.word	0x08004065
 8004020:	08004079 	.word	0x08004079
    case BUTTON_STATE_IDLE:
        if (pressed) {
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d050      	beq.n	80040cc <Button_Poll+0xe8>
            b->state = BUTTON_STATE_DEBOUNCE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	741a      	strb	r2, [r3, #16]
            b->last_change_tick = now;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	615a      	str	r2, [r3, #20]
        }
        break;
 8004036:	e049      	b.n	80040cc <Button_Poll+0xe8>
    case BUTTON_STATE_DEBOUNCE:
        if ((now - b->last_change_tick) >= b->debounce_ms) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d343      	bcc.n	80040d0 <Button_Poll+0xec>
            if (pressed) {
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <Button_Poll+0x78>
                b->state = BUTTON_STATE_PRESSED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	741a      	strb	r2, [r3, #16]
                b->press_tick = now;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	619a      	str	r2, [r3, #24]
            } else {
                b->state = BUTTON_STATE_IDLE;
            }
        }
        break;
 800405a:	e039      	b.n	80040d0 <Button_Poll+0xec>
                b->state = BUTTON_STATE_IDLE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	741a      	strb	r2, [r3, #16]
        break;
 8004062:	e035      	b.n	80040d0 <Button_Poll+0xec>
    case BUTTON_STATE_PRESSED:
        if (!pressed) {
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d134      	bne.n	80040d4 <Button_Poll+0xf0>
            b->state = BUTTON_STATE_RELEASE_DEBOUNCE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	741a      	strb	r2, [r3, #16]
            b->last_change_tick = now;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	615a      	str	r2, [r3, #20]
        }
        break;
 8004076:	e02d      	b.n	80040d4 <Button_Poll+0xf0>
    case BUTTON_STATE_RELEASE_DEBOUNCE:
        if ((now - b->last_change_tick) >= b->debounce_ms) {
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	d327      	bcc.n	80040d8 <Button_Poll+0xf4>
            if (!pressed) {
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <Button_Poll+0xd8>
                uint32_t duration = now - b->press_tick;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	60fb      	str	r3, [r7, #12]
                b->last_event_is_long = (duration >= b->long_press_ms) ? 1 : 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	429a      	cmp	r2, r3
 80040a0:	bf2c      	ite	cs
 80040a2:	2301      	movcs	r3, #1
 80040a4:	2300      	movcc	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	775a      	strb	r2, [r3, #29]
                b->event_ready = 1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]
                b->state = BUTTON_STATE_IDLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	741a      	strb	r2, [r3, #16]
            } else {
                b->state = BUTTON_STATE_PRESSED;
            }
        }
        break;
 80040ba:	e00d      	b.n	80040d8 <Button_Poll+0xf4>
                b->state = BUTTON_STATE_PRESSED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	741a      	strb	r2, [r3, #16]
        break;
 80040c2:	e009      	b.n	80040d8 <Button_Poll+0xf4>
    default:
        b->state = BUTTON_STATE_IDLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	741a      	strb	r2, [r3, #16]
        break;
 80040ca:	e006      	b.n	80040da <Button_Poll+0xf6>
        break;
 80040cc:	bf00      	nop
 80040ce:	e004      	b.n	80040da <Button_Poll+0xf6>
        break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <Button_Poll+0xf6>
        break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <Button_Poll+0xf6>
        break;
 80040d8:	bf00      	nop
    }
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <Button_EventReady>:

int Button_EventReady(Button_t *b) { return b->event_ready; }
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7f1b      	ldrb	r3, [r3, #28]
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <Button_EventIsLong>:
uint8_t Button_EventIsLong(Button_t *b) { return b->last_event_is_long; }
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7f5b      	ldrb	r3, [r3, #29]
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <Button_EventClear>:
void Button_EventClear(Button_t *b) { b->event_ready = 0; }
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <uart_on_receive_isr>:
extern "C" {

// Scheduler wrapper functions - removed scheduler_tick as it's no longer needed

// Uart wrapper functions  
void uart_on_receive_isr(void) {
 800412e:	b580      	push	{r7, lr}
 8004130:	af00      	add	r7, sp, #0
    Uart::getInstance().onReceiveISR();
 8004132:	f002 fddd 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004136:	4603      	mov	r3, r0
 8004138:	4618      	mov	r0, r3
 800413a:	f002 fe9b 	bl	8006e74 <_ZN4Uart12onReceiveISREv>
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}

08004142 <uart_process_tx_buffer>:

void uart_process_tx_buffer(void) {
 8004142:	b580      	push	{r7, lr}
 8004144:	af00      	add	r7, sp, #0
    Uart::getInstance().processTxBuffer();
 8004146:	f002 fdd3 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800414a:	4603      	mov	r3, r0
 800414c:	4618      	mov	r0, r3
 800414e:	f002 feed 	bl	8006f2c <_ZN4Uart15processTxBufferEv>
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b35      	ldr	r3, [pc, #212]	; (8004248 <MX_GPIO_Init+0xf0>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <MX_GPIO_Init+0xf0>)
 8004178:	f043 0310 	orr.w	r3, r3, #16
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b32      	ldr	r3, [pc, #200]	; (8004248 <MX_GPIO_Init+0xf0>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <MX_GPIO_Init+0xf0>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <MX_GPIO_Init+0xf0>)
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <MX_GPIO_Init+0xf0>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a26      	ldr	r2, [pc, #152]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4b19      	ldr	r3, [pc, #100]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a18      	ldr	r2, [pc, #96]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <MX_GPIO_Init+0xf0>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004200:	4812      	ldr	r0, [pc, #72]	; (800424c <MX_GPIO_Init+0xf4>)
 8004202:	f003 fe9f 	bl	8007f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004206:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800420a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800420c:	2301      	movs	r3, #1
 800420e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004214:	2300      	movs	r3, #0
 8004216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4619      	mov	r1, r3
 800421e:	480b      	ldr	r0, [pc, #44]	; (800424c <MX_GPIO_Init+0xf4>)
 8004220:	f003 fccc 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 - Side Button */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800422e:	2301      	movs	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_GPIO_Init+0xf8>)
 800423a:	f003 fcbf 	bl	8007bbc <HAL_GPIO_Init>

}
 800423e:	bf00      	nop
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40020c00 	.word	0x40020c00
 8004250:	40020800 	.word	0x40020800

08004254 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <MX_I2C1_Init+0x74>)
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <MX_I2C1_Init+0x78>)
 800425c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <MX_I2C1_Init+0x7c>)
 8004262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_I2C1_Init+0x74>)
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004270:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <MX_I2C1_Init+0x74>)
 800427a:	2200      	movs	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004284:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <MX_I2C1_Init+0x74>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <MX_I2C1_Init+0x74>)
 8004292:	f003 fe71 	bl	8007f78 <HAL_I2C_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800429c:	f000 fb5a 	bl	8004954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042a0:	2100      	movs	r1, #0
 80042a2:	4809      	ldr	r0, [pc, #36]	; (80042c8 <MX_I2C1_Init+0x74>)
 80042a4:	f004 fe27 	bl	8008ef6 <HAL_I2CEx_ConfigAnalogFilter>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80042ae:	f000 fb51 	bl	8004954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042b2:	2100      	movs	r1, #0
 80042b4:	4804      	ldr	r0, [pc, #16]	; (80042c8 <MX_I2C1_Init+0x74>)
 80042b6:	f004 fe5a 	bl	8008f6e <HAL_I2CEx_ConfigDigitalFilter>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80042c0:	f000 fb48 	bl	8004954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000214 	.word	0x20000214
 80042cc:	40005400 	.word	0x40005400
 80042d0:	00061a80 	.word	0x00061a80

080042d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_I2C_MspInit+0x84>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d12c      	bne.n	8004350 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_I2C_MspInit+0x88>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a17      	ldr	r2, [pc, #92]	; (800435c <HAL_I2C_MspInit+0x88>)
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_I2C_MspInit+0x88>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004318:	2312      	movs	r3, #18
 800431a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004320:	2303      	movs	r3, #3
 8004322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004324:	2304      	movs	r3, #4
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	480c      	ldr	r0, [pc, #48]	; (8004360 <HAL_I2C_MspInit+0x8c>)
 8004330:	f003 fc44 	bl	8007bbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_I2C_MspInit+0x88>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	4a07      	ldr	r2, [pc, #28]	; (800435c <HAL_I2C_MspInit+0x88>)
 800433e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004342:	6413      	str	r3, [r2, #64]	; 0x40
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_I2C_MspInit+0x88>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	; 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40005400 	.word	0x40005400
 800435c:	40023800 	.word	0x40023800
 8004360:	40020400 	.word	0x40020400

08004364 <Led_Init>:
#include "led.h"

void Led_Init(Led_t *led, GPIO_TypeDef *port, uint16_t pin)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
    led->port = port;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	601a      	str	r2, [r3, #0]
    led->pin = pin;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	809a      	strh	r2, [r3, #4]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <Led_Set>:

void Led_Set(Led_t *led, GPIO_PinState state)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(led->port, led->pin, state);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	889b      	ldrh	r3, [r3, #4]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f003 fdcf 	bl	8007f44 <HAL_GPIO_WritePin>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <_ZNK9Scheduler12getTaskCountEv>:
    void sleepTask(Task* task, uint32_t ms);
    void blockTask(Task* task);
    void unblockTask(Task* task);
    
    // Отладочная информация
    uint8_t getTaskCount() const { return taskCount; }
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_ZN4NoteC1Etmh>:
struct Note {
    uint16_t frequency;  // Частота в Гц (0 = тишина)
    uint32_t duration;  // Длительность в мс
    uint8_t channel;     // Канал (0-3)
    
    Note(uint16_t freq = 0, uint32_t dur = 0, uint8_t ch = 0) 
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	460b      	mov	r3, r1
 80043d6:	817b      	strh	r3, [r7, #10]
 80043d8:	4613      	mov	r3, r2
 80043da:	727b      	strb	r3, [r7, #9]
        : frequency(freq), duration(dur), channel(ch) {}
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	897a      	ldrh	r2, [r7, #10]
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	7a7a      	ldrb	r2, [r7, #9]
 80043ec:	721a      	strb	r2, [r3, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_ZN6MelodyC1EPK4Notett>:
struct Melody {
    const Note* notes;
    uint16_t length;
    uint16_t tempo;  // Темп в BPM
    
    Melody(const Note* n, uint16_t len, uint16_t t = 120) 
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	460b      	mov	r3, r1
 800440c:	80fb      	strh	r3, [r7, #6]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
        : notes(n), length(len), tempo(t) {}
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	809a      	strh	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	88ba      	ldrh	r2, [r7, #4]
 8004422:	80da      	strh	r2, [r3, #6]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b091      	sub	sp, #68	; 0x44
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800443a:	f003 f9b1 	bl	80077a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800443e:	f000 fa1f 	bl	8004880 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004442:	f7ff fe89 	bl	8004158 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8004446:	f000 fd0f 	bl	8004e68 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800444a:	f7ff ff03 	bl	8004254 <MX_I2C1_Init>
  MX_TIM1_Init();
 800444e:	f000 fbf7 	bl	8004c40 <MX_TIM1_Init>
  
  // Тест UART сразу после инициализации (через драйвер)
  Uart::getInstance().printf("UART Test OK\n");
 8004452:	f002 fc4d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004456:	4603      	mov	r3, r0
 8004458:	495b      	ldr	r1, [pc, #364]	; (80045c8 <main+0x194>)
 800445a:	4618      	mov	r0, r3
 800445c:	f002 fcd1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  /* USER CODE BEGIN 2 */
  // Инициализация планировщика
  Scheduler& scheduler = Scheduler::getInstance();
 8004460:	f002 ff52 	bl	8007308 <_ZN9Scheduler11getInstanceEv>
 8004464:	63f8      	str	r0, [r7, #60]	; 0x3c
  scheduler.init();
 8004466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004468:	f002 ff74 	bl	8007354 <_ZN9Scheduler4initEv>
  
  // Инициализация драйверов
  Display::getInstance().init();
 800446c:	f001 f81a 	bl	80054a4 <_ZN7Display11getInstanceEv>
 8004470:	4603      	mov	r3, r0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f83c 	bl	80054f0 <_ZN7Display4initEv>
  Keyboard::getInstance().init();
 8004478:	f001 fb90 	bl	8005b9c <_ZN8Keyboard11getInstanceEv>
 800447c:	4603      	mov	r3, r0
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fbb2 	bl	8005be8 <_ZN8Keyboard4initEv>
  Buzzer::getInstance().init();
 8004484:	f000 fd9c 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8004488:	4603      	mov	r3, r0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fdc0 	bl	8005010 <_ZN6Buzzer4initEv>
  Synthesizer::getInstance().init();
 8004490:	f001 fe8c 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8004494:	4603      	mov	r3, r0
 8004496:	4618      	mov	r0, r3
 8004498:	f001 feb0 	bl	80061fc <_ZN11Synthesizer4initEv>
  
  // Тестирование зуделки перед запуском шедулера
  Uart::getInstance().printf("=== BUZZER TEST START ===\n");
 800449c:	f002 fc28 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80044a0:	4603      	mov	r3, r0
 80044a2:	494a      	ldr	r1, [pc, #296]	; (80045cc <main+0x198>)
 80044a4:	4618      	mov	r0, r3
 80044a6:	f002 fcac 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  
  // Настройка параметров зуделки
  Buzzer::getInstance().setGlobalVolume(8);  // Устанавливаем громкость 8 из 10
 80044aa:	f000 fd89 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2108      	movs	r1, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fe39 	bl	800512a <_ZN6Buzzer15setGlobalVolumeEh>
  Uart::getInstance().printf("Buzzer global volume set to 8\n");
 80044b8:	f002 fc1a 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80044bc:	4603      	mov	r3, r0
 80044be:	4944      	ldr	r1, [pc, #272]	; (80045d0 <main+0x19c>)
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 fc9e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  
  // Простой тест PWM - прямая настройка таймера
  Uart::getInstance().printf("Direct PWM test...\n");
 80044c6:	f002 fc13 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4941      	ldr	r1, [pc, #260]	; (80045d4 <main+0x1a0>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f002 fc97 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  TIM1->PSC = 89;  // Предделитель
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <main+0x1a4>)
 80044d6:	2259      	movs	r2, #89	; 0x59
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM1->ARR = 100;  // Период
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <main+0x1a4>)
 80044dc:	2264      	movs	r2, #100	; 0x64
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CCR1 = 500;  // Duty cycle 50%
 80044e0:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <main+0x1a4>)
 80044e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044e6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80044e8:	2100      	movs	r1, #0
 80044ea:	483c      	ldr	r0, [pc, #240]	; (80045dc <main+0x1a8>)
 80044ec:	f005 fa7e 	bl	80099ec <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 80044f0:	2064      	movs	r0, #100	; 0x64
 80044f2:	f003 f9c7 	bl	8007884 <HAL_Delay>
  TIM1->CCR1 = 0;  // Выключаем
 80044f6:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <main+0x1a4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(50);
 80044fc:	2032      	movs	r0, #50	; 0x32
 80044fe:	f003 f9c1 	bl	8007884 <HAL_Delay>
  Uart::getInstance().printf("Direct PWM test completed\n");
 8004502:	f002 fbf5 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004506:	4603      	mov	r3, r0
 8004508:	4935      	ldr	r1, [pc, #212]	; (80045e0 <main+0x1ac>)
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fc79 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  const Note testMelody[] = {
    Note(Buzzer::NOTE_C4, 200, 0),   // До 4-й октавы, 500мс
    Note(Buzzer::NOTE_E4, 200, 0),   // Ми 4-й октавы, 500мс  
    Note(Buzzer::NOTE_G4, 200, 0),   // Соль 4-й октавы, 500мс
    Note(Buzzer::NOTE_C5, 500, 0)   // До 5-й октавы, 1000мс
  };
 8004510:	f107 0408 	add.w	r4, r7, #8
 8004514:	2300      	movs	r3, #0
 8004516:	22c8      	movs	r2, #200	; 0xc8
 8004518:	f44f 7183 	mov.w	r1, #262	; 0x106
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff53 	bl	80043c8 <_ZN4NoteC1Etmh>
 8004522:	340c      	adds	r4, #12
 8004524:	2300      	movs	r3, #0
 8004526:	22c8      	movs	r2, #200	; 0xc8
 8004528:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff ff4b 	bl	80043c8 <_ZN4NoteC1Etmh>
 8004532:	340c      	adds	r4, #12
 8004534:	2300      	movs	r3, #0
 8004536:	22c8      	movs	r2, #200	; 0xc8
 8004538:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800453c:	4620      	mov	r0, r4
 800453e:	f7ff ff43 	bl	80043c8 <_ZN4NoteC1Etmh>
 8004542:	f104 000c 	add.w	r0, r4, #12
 8004546:	2300      	movs	r3, #0
 8004548:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800454c:	f240 210b 	movw	r1, #523	; 0x20b
 8004550:	f7ff ff3a 	bl	80043c8 <_ZN4NoteC1Etmh>
  
  Melody testMelodyObj(testMelody, 4, 120);  // Темп 120 BPM
 8004554:	f107 0108 	add.w	r1, r7, #8
 8004558:	4638      	mov	r0, r7
 800455a:	2378      	movs	r3, #120	; 0x78
 800455c:	2204      	movs	r2, #4
 800455e:	f7ff ff4d 	bl	80043fc <_ZN6MelodyC1EPK4Notett>
  Uart::getInstance().printf("Playing test melody...\n");
 8004562:	f002 fbc5 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004566:	4603      	mov	r3, r0
 8004568:	491e      	ldr	r1, [pc, #120]	; (80045e4 <main+0x1b0>)
 800456a:	4618      	mov	r0, r3
 800456c:	f002 fc49 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Buzzer::getInstance().playMelody(testMelodyObj);
 8004570:	f000 fd26 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8004574:	4602      	mov	r2, r0
 8004576:	463b      	mov	r3, r7
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 fdeb 	bl	8005156 <_ZN6Buzzer10playMelodyERK6Melody>
  
  // Ждем завершения мелодии
  uint32_t melodyStartTime = HAL_GetTick();
 8004580:	f003 f974 	bl	800786c <HAL_GetTick>
 8004584:	63b8      	str	r0, [r7, #56]	; 0x38
  while (Buzzer::getInstance().isPlaying() && (HAL_GetTick() - melodyStartTime < 1500)) {
 8004586:	f000 fd1b 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 800458a:	4603      	mov	r3, r0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fdf1 	bl	8005174 <_ZNK6Buzzer9isPlayingEv>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <main+0x17a>
 8004598:	f003 f968 	bl	800786c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f240 52db 	movw	r2, #1499	; 0x5db
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d801      	bhi.n	80045ae <main+0x17a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <main+0x17c>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d019      	beq.n	80045e8 <main+0x1b4>
    Buzzer::getInstance().update();
 80045b4:	f000 fd04 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fde8 	bl	8005190 <_ZN6Buzzer6updateEv>
    HAL_Delay(10);
 80045c0:	200a      	movs	r0, #10
 80045c2:	f003 f95f 	bl	8007884 <HAL_Delay>
  while (Buzzer::getInstance().isPlaying() && (HAL_GetTick() - melodyStartTime < 1500)) {
 80045c6:	e7de      	b.n	8004586 <main+0x152>
 80045c8:	0800d8b4 	.word	0x0800d8b4
 80045cc:	0800d8c4 	.word	0x0800d8c4
 80045d0:	0800d8e0 	.word	0x0800d8e0
 80045d4:	0800d900 	.word	0x0800d900
 80045d8:	40010000 	.word	0x40010000
 80045dc:	2000026c 	.word	0x2000026c
 80045e0:	0800d914 	.word	0x0800d914
 80045e4:	0800d930 	.word	0x0800d930
  }
  
  Uart::getInstance().printf("Test melody completed\n");
 80045e8:	f002 fb82 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4997      	ldr	r1, [pc, #604]	; (800484c <main+0x418>)
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 fc06 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  // Тест синтезатора
  Uart::getInstance().printf("Testing synthesizer...\n");
 80045f6:	f002 fb7b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4994      	ldr	r1, [pc, #592]	; (8004850 <main+0x41c>)
 80045fe:	4618      	mov	r0, r3
 8004600:	f002 fbff 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Synthesizer::getInstance().noteOn(0, 60, 64);  // MIDI note 60 (C4)
 8004604:	f001 fdd2 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	223c      	movs	r2, #60	; 0x3c
 800460c:	2100      	movs	r1, #0
 800460e:	f001 fe4b 	bl	80062a8 <_ZN11Synthesizer6noteOnEhhh>
  HAL_Delay(1000);
 8004612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004616:	f003 f935 	bl	8007884 <HAL_Delay>
  Synthesizer::getInstance().noteOff(0, 60);
 800461a:	f001 fdc7 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 800461e:	4603      	mov	r3, r0
 8004620:	223c      	movs	r2, #60	; 0x3c
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fee9 	bl	80063fc <_ZN11Synthesizer7noteOffEhh>
  HAL_Delay(200);
 800462a:	20c8      	movs	r0, #200	; 0xc8
 800462c:	f003 f92a 	bl	8007884 <HAL_Delay>
  
  Synthesizer::getInstance().noteOn(0, 64, 64);  // MIDI note 64 (E4)
 8004630:	f001 fdbc 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8004634:	2340      	movs	r3, #64	; 0x40
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	2100      	movs	r1, #0
 800463a:	f001 fe35 	bl	80062a8 <_ZN11Synthesizer6noteOnEhhh>
  HAL_Delay(1000);
 800463e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004642:	f003 f91f 	bl	8007884 <HAL_Delay>
  Synthesizer::getInstance().noteOff(0, 64);
 8004646:	f001 fdb1 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 800464a:	4603      	mov	r3, r0
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fed3 	bl	80063fc <_ZN11Synthesizer7noteOffEhh>
  HAL_Delay(200);
 8004656:	20c8      	movs	r0, #200	; 0xc8
 8004658:	f003 f914 	bl	8007884 <HAL_Delay>
  
  Synthesizer::getInstance().noteOn(0, 67, 64);  // MIDI note 67 (G4)
 800465c:	f001 fda6 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8004660:	2340      	movs	r3, #64	; 0x40
 8004662:	2243      	movs	r2, #67	; 0x43
 8004664:	2100      	movs	r1, #0
 8004666:	f001 fe1f 	bl	80062a8 <_ZN11Synthesizer6noteOnEhhh>
  HAL_Delay(1000);
 800466a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800466e:	f003 f909 	bl	8007884 <HAL_Delay>
  Synthesizer::getInstance().allNotesOff();
 8004672:	f001 fd9b 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	f001 ff03 	bl	8006484 <_ZN11Synthesizer11allNotesOffEv>
  
  Uart::getInstance().printf("Synthesizer test completed\n");
 800467e:	f002 fb37 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004682:	4603      	mov	r3, r0
 8004684:	4973      	ldr	r1, [pc, #460]	; (8004854 <main+0x420>)
 8004686:	4618      	mov	r0, r3
 8004688:	f002 fbbb 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("=== BUZZER TEST END ===\n");
 800468c:	f002 fb30 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004690:	4603      	mov	r3, r0
 8004692:	4971      	ldr	r1, [pc, #452]	; (8004858 <main+0x424>)
 8004694:	4618      	mov	r0, r3
 8004696:	f002 fbb4 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  
  // Инициализация компонентов секвенсора
  Sequencer::getInstance().init();
 800469a:	f7fd f809 	bl	80016b0 <_ZN9Sequencer11getInstanceEv>
 800469e:	4603      	mov	r3, r0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd f889 	bl	80017b8 <_ZN9Sequencer4initEv>
  MenuSystem::getInstance().init();
 80046a6:	f7fe fe75 	bl	8003394 <_ZN10MenuSystem11getInstanceEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fe97 	bl	80033e0 <_ZN10MenuSystem4initEv>
  SequencerRenderer::getInstance().init();
 80046b2:	f7fe fa6b 	bl	8002b8c <_ZN17SequencerRenderer11getInstanceEv>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fa8f 	bl	8002bdc <_ZN17SequencerRenderer4initEv>
  Images::getInstance().init();
 80046be:	f7fc fdf9 	bl	80012b4 <_ZN6Images11getInstanceEv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fc fe1d 	bl	8001304 <_ZN6Images4initEv>
  
  // Отладочный вывод через драйвер UART
  Uart::getInstance().printf("STM32F4 System Starting...\n");
 80046ca:	f002 fb11 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4962      	ldr	r1, [pc, #392]	; (800485c <main+0x428>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f002 fb95 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Scheduler initialized\n");
 80046d8:	f002 fb0a 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80046dc:	4603      	mov	r3, r0
 80046de:	4960      	ldr	r1, [pc, #384]	; (8004860 <main+0x42c>)
 80046e0:	4618      	mov	r0, r3
 80046e2:	f002 fb8e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Display initialized\n");
 80046e6:	f002 fb03 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80046ea:	4603      	mov	r3, r0
 80046ec:	495d      	ldr	r1, [pc, #372]	; (8004864 <main+0x430>)
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 fb87 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Keyboard initialized\n");
 80046f4:	f002 fafc 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80046f8:	4603      	mov	r3, r0
 80046fa:	495b      	ldr	r1, [pc, #364]	; (8004868 <main+0x434>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f002 fb80 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Buzzer initialized\n");
 8004702:	f002 faf5 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004706:	4603      	mov	r3, r0
 8004708:	4958      	ldr	r1, [pc, #352]	; (800486c <main+0x438>)
 800470a:	4618      	mov	r0, r3
 800470c:	f002 fb79 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Synthesizer initialized\n");
 8004710:	f002 faee 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004714:	4603      	mov	r3, r0
 8004716:	4956      	ldr	r1, [pc, #344]	; (8004870 <main+0x43c>)
 8004718:	4618      	mov	r0, r3
 800471a:	f002 fb72 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  
  // Добавление задач
  scheduler.addTask(new KeyboardTask());
 800471e:	2014      	movs	r0, #20
 8004720:	f007 fa01 	bl	800bb26 <_Znwj>
 8004724:	4603      	mov	r3, r0
 8004726:	461c      	mov	r4, r3
 8004728:	4620      	mov	r0, r4
 800472a:	f7fb ffb7 	bl	800069c <_ZN12KeyboardTaskC1Ev>
 800472e:	4621      	mov	r1, r4
 8004730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004732:	f002 fe2b 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new DisplayTask());
 8004736:	2018      	movs	r0, #24
 8004738:	f007 f9f5 	bl	800bb26 <_Znwj>
 800473c:	4603      	mov	r3, r0
 800473e:	461c      	mov	r4, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc f87f 	bl	8000844 <_ZN11DisplayTaskC1Ev>
 8004746:	4621      	mov	r1, r4
 8004748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800474a:	f002 fe1f 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new UartTask());
 800474e:	2014      	movs	r0, #20
 8004750:	f007 f9e9 	bl	800bb26 <_Znwj>
 8004754:	4603      	mov	r3, r0
 8004756:	461c      	mov	r4, r3
 8004758:	4620      	mov	r0, r4
 800475a:	f7fc f937 	bl	80009cc <_ZN8UartTaskC1Ev>
 800475e:	4621      	mov	r1, r4
 8004760:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004762:	f002 fe13 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new BuzzerTask());
 8004766:	2014      	movs	r0, #20
 8004768:	f007 f9dd 	bl	800bb26 <_Znwj>
 800476c:	4603      	mov	r3, r0
 800476e:	461c      	mov	r4, r3
 8004770:	4620      	mov	r0, r4
 8004772:	f7fc faf9 	bl	8000d68 <_ZN10BuzzerTaskC1Ev>
 8004776:	4621      	mov	r1, r4
 8004778:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800477a:	f002 fe07 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new SynthesizerTask());
 800477e:	2014      	movs	r0, #20
 8004780:	f007 f9d1 	bl	800bb26 <_Znwj>
 8004784:	4603      	mov	r3, r0
 8004786:	461c      	mov	r4, r3
 8004788:	4620      	mov	r0, r4
 800478a:	f7fc fb1f 	bl	8000dcc <_ZN15SynthesizerTaskC1Ev>
 800478e:	4621      	mov	r1, r4
 8004790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004792:	f002 fdfb 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new PianoTask());
 8004796:	2014      	movs	r0, #20
 8004798:	f007 f9c5 	bl	800bb26 <_Znwj>
 800479c:	4603      	mov	r3, r0
 800479e:	461c      	mov	r4, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7fc fb45 	bl	8000e30 <_ZN9PianoTaskC1Ev>
 80047a6:	4621      	mov	r1, r4
 80047a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047aa:	f002 fdef 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new SequencerTask());
 80047ae:	2014      	movs	r0, #20
 80047b0:	f007 f9b9 	bl	800bb26 <_Znwj>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461c      	mov	r4, r3
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7fc fb69 	bl	8000e90 <_ZN13SequencerTaskC1Ev>
 80047be:	4621      	mov	r1, r4
 80047c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047c2:	f002 fde3 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new UartControlTask());
 80047c6:	2014      	movs	r0, #20
 80047c8:	f007 f9ad 	bl	800bb26 <_Znwj>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461c      	mov	r4, r3
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7fc fbc5 	bl	8000f60 <_ZN15UartControlTaskC1Ev>
 80047d6:	4621      	mov	r1, r4
 80047d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047da:	f002 fdd7 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  scheduler.addTask(new DebugTask());
 80047de:	2014      	movs	r0, #20
 80047e0:	f007 f9a1 	bl	800bb26 <_Znwj>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461c      	mov	r4, r3
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fc fbeb 	bl	8000fc4 <_ZN9DebugTaskC1Ev>
 80047ee:	4621      	mov	r1, r4
 80047f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047f2:	f002 fdcb 	bl	800738c <_ZN9Scheduler7addTaskEP4Task>
  
  // Отладочный вывод информации о задачах
  Uart::getInstance().printf("=== SCHEDULER INITIALIZATION ===\n");
 80047f6:	f002 fa7b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	491d      	ldr	r1, [pc, #116]	; (8004874 <main+0x440>)
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 faff 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  Uart::getInstance().printf("Added %d tasks to scheduler\n", scheduler.getTaskCount());
 8004804:	f002 fa74 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004808:	4604      	mov	r4, r0
 800480a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800480c:	f7ff fdcf 	bl	80043ae <_ZNK9Scheduler12getTaskCountEv>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	4918      	ldr	r1, [pc, #96]	; (8004878 <main+0x444>)
 8004816:	4620      	mov	r0, r4
 8004818:	f002 faf3 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  scheduler.printTaskInfo();
 800481c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800481e:	f002 ff07 	bl	8007630 <_ZNK9Scheduler13printTaskInfoEv>
  Uart::getInstance().printf("=== END SCHEDULER INFO ===\n");
 8004822:	f002 fa65 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8004826:	4603      	mov	r3, r0
 8004828:	4914      	ldr	r1, [pc, #80]	; (800487c <main+0x448>)
 800482a:	4618      	mov	r0, r3
 800482c:	f002 fae9 	bl	8006e02 <_ZN4Uart6printfEPKcz>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Запускаем планировщик задач
    scheduler.run();
 8004830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004832:	f002 fdcf 	bl	80073d4 <_ZN9Scheduler3runEv>
    
    // Обрабатываем UART драйвер (неблокирующая отправка)
    Uart::getInstance().process();
 8004836:	f002 fa5b 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800483a:	4603      	mov	r3, r0
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fba5 	bl	8006f8c <_ZN4Uart7processEv>
    
    // Минимальная задержка для стабильности системы
    HAL_Delay(1);
 8004842:	2001      	movs	r0, #1
 8004844:	f003 f81e 	bl	8007884 <HAL_Delay>
    scheduler.run();
 8004848:	e7f2      	b.n	8004830 <main+0x3fc>
 800484a:	bf00      	nop
 800484c:	0800d948 	.word	0x0800d948
 8004850:	0800d960 	.word	0x0800d960
 8004854:	0800d978 	.word	0x0800d978
 8004858:	0800d994 	.word	0x0800d994
 800485c:	0800d9b0 	.word	0x0800d9b0
 8004860:	0800d9cc 	.word	0x0800d9cc
 8004864:	0800d9e4 	.word	0x0800d9e4
 8004868:	0800d9fc 	.word	0x0800d9fc
 800486c:	0800da14 	.word	0x0800da14
 8004870:	0800da28 	.word	0x0800da28
 8004874:	0800da44 	.word	0x0800da44
 8004878:	0800da68 	.word	0x0800da68
 800487c:	0800da88 	.word	0x0800da88

08004880 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b094      	sub	sp, #80	; 0x50
 8004884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004886:	f107 0320 	add.w	r3, r7, #32
 800488a:	2230      	movs	r2, #48	; 0x30
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f007 fda8 	bl	800c3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	4b28      	ldr	r3, [pc, #160]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a27      	ldr	r2, [pc, #156]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6413      	str	r3, [r2, #64]	; 0x40
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <_Z18SystemClock_Configv+0xd0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <_Z18SystemClock_Configv+0xd0>)
 80048ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <_Z18SystemClock_Configv+0xd0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048e0:	2302      	movs	r3, #2
 80048e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048e4:	2301      	movs	r3, #1
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048e8:	2310      	movs	r3, #16
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 fb79 	bl	8008fec <HAL_RCC_OscConfig>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800490a:	f000 f823 	bl	8004954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800490e:	230f      	movs	r3, #15
 8004910:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800491a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800491e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f004 fdd6 	bl	80094dc <HAL_RCC_ClockConfig>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004940:	f000 f808 	bl	8004954 <Error_Handler>
  }
}
 8004944:	bf00      	nop
 8004946:	3750      	adds	r7, #80	; 0x50
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40023800 	.word	0x40023800
 8004950:	40007000 	.word	0x40007000

08004954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004958:	b672      	cpsid	i
}
 800495a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800495c:	e7fe      	b.n	800495c <Error_Handler+0x8>
	...

08004960 <PCA9538_Read_Register>:
#include "i2c.h"
#include "pca9538.h"

extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af04      	add	r7, sp, #16
 8004966:	4603      	mov	r3, r0
 8004968:	603a      	str	r2, [r7, #0]
 800496a:	80fb      	strh	r3, [r7, #6]
 800496c:	460b      	mov	r3, r1
 800496e:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b299      	uxth	r1, r3
 8004978:	797b      	ldrb	r3, [r7, #5]
 800497a:	b29a      	uxth	r2, r3
 800497c:	2364      	movs	r3, #100	; 0x64
 800497e:	9302      	str	r3, [sp, #8]
 8004980:	2301      	movs	r3, #1
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2301      	movs	r3, #1
 800498a:	4804      	ldr	r0, [pc, #16]	; (800499c <PCA9538_Read_Register+0x3c>)
 800498c:	f003 fd32 	bl	80083f4 <HAL_I2C_Mem_Read>
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000214 	.word	0x20000214

080049a0 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af04      	add	r7, sp, #16
 80049a6:	4603      	mov	r3, r0
 80049a8:	603a      	str	r2, [r7, #0]
 80049aa:	80fb      	strh	r3, [r7, #6]
 80049ac:	460b      	mov	r3, r1
 80049ae:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	b299      	uxth	r1, r3
 80049b8:	797b      	ldrb	r3, [r7, #5]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	2364      	movs	r3, #100	; 0x64
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	2301      	movs	r3, #1
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2301      	movs	r3, #1
 80049ca:	4804      	ldr	r0, [pc, #16]	; (80049dc <PCA9538_Write_Register+0x3c>)
 80049cc:	f003 fc18 	bl	8008200 <HAL_I2C_Mem_Write>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000214 	.word	0x20000214

080049e0 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ffb4 	bl	8004960 <PCA9538_Read_Register>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a18:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_MspInit+0x4c>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a58:	e7fe      	b.n	8004a58 <NMI_Handler+0x4>

08004a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a5e:	e7fe      	b.n	8004a5e <HardFault_Handler+0x4>

08004a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a64:	e7fe      	b.n	8004a64 <MemManage_Handler+0x4>

08004a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a66:	b480      	push	{r7}
 8004a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a6a:	e7fe      	b.n	8004a6a <BusFault_Handler+0x4>

08004a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a70:	e7fe      	b.n	8004a70 <UsageFault_Handler+0x4>

08004a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aa0:	f002 fed0 	bl	8007844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <TIM6_DAC_IRQHandler+0x10>)
 8004aae:	f005 f8d5 	bl	8009c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200002b4 	.word	0x200002b4

08004abc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    // TIM6 больше не используется для планировщика
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <USART6_IRQHandler+0x10>)
 8004ad6:	f006 f8c1 	bl	800ac5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200002fc 	.word	0x200002fc

08004ae4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback 0 */

  /* USER CODE END HAL_UART_RxCpltCallback 0 */
  if (huart->Instance == USART6) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <HAL_UART_RxCpltCallback+0x20>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_UART_RxCpltCallback+0x16>
    uart_on_receive_isr();
 8004af6:	f7ff fb1a 	bl	800412e <uart_on_receive_isr>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback 1 */

  /* USER CODE END HAL_UART_RxCpltCallback 1 */
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40011400 	.word	0x40011400

08004b08 <HAL_UART_ErrorCallback>:
  * @brief  Error callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_ErrorCallback 0 */

  /* USER CODE END HAL_UART_ErrorCallback 0 */
  if (huart->Instance == USART6) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <HAL_UART_ErrorCallback+0x28>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_ErrorCallback+0x20>
    // Перезапускаем прием при ошибке
    HAL_UART_Receive_IT(huart, &huart->pRxBuffPtr[0], 1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f006 f86a 	bl	800abfc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_ErrorCallback 1 */

  /* USER CODE END HAL_UART_ErrorCallback 1 */
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40011400 	.word	0x40011400

08004b34 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback 0 */

  /* USER CODE END HAL_UART_TxCpltCallback 0 */
  if (huart->Instance == USART6) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <HAL_UART_TxCpltCallback+0x20>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_TxCpltCallback+0x16>
    uart_process_tx_buffer();
 8004b46:	f7ff fafc 	bl	8004142 <uart_process_tx_buffer>
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback 1 */

  /* USER CODE END HAL_UART_TxCpltCallback 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40011400 	.word	0x40011400

08004b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b5c:	4802      	ldr	r0, [pc, #8]	; (8004b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004b5e:	f005 f87d 	bl	8009c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	2000026c 	.word	0x2000026c

08004b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	return 1;
 8004b70:	2301      	movs	r3, #1
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_kill>:

int _kill(int pid, int sig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b86:	f007 fbe5 	bl	800c354 <__errno>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2216      	movs	r2, #22
 8004b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_exit>:

void _exit (int status)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ffe7 	bl	8004b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bae:	e7fe      	b.n	8004bae <_exit+0x12>

08004bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <_sbrk+0x5c>)
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <_sbrk+0x60>)
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <_sbrk+0x64>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <_sbrk+0x64>)
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <_sbrk+0x68>)
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <_sbrk+0x64>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d207      	bcs.n	8004bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be0:	f007 fbb8 	bl	800c354 <__errno>
 8004be4:	4603      	mov	r3, r0
 8004be6:	220c      	movs	r2, #12
 8004be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e009      	b.n	8004c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <_sbrk+0x64>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <_sbrk+0x64>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4a05      	ldr	r2, [pc, #20]	; (8004c14 <_sbrk+0x64>)
 8004c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20030000 	.word	0x20030000
 8004c10:	00000400 	.word	0x00000400
 8004c14:	20000268 	.word	0x20000268
 8004c18:	20001de8 	.word	0x20001de8

08004c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <SystemInit+0x20>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <SystemInit+0x20>)
 8004c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b096      	sub	sp, #88	; 0x58
 8004c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	615a      	str	r2, [r3, #20]
 8004c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	2220      	movs	r2, #32
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f007 fbb3 	bl	800c3e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004c80:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <MX_TIM1_Init+0x140>)
 8004c82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004c86:	2259      	movs	r2, #89	; 0x59
 8004c88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8a:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004c90:	4b3a      	ldr	r3, [pc, #232]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004c98:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ca0:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ca6:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cac:	4833      	ldr	r0, [pc, #204]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004cae:	f004 fdf5 	bl	800989c <HAL_TIM_Base_Init>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004cb8:	f7ff fe4c 	bl	8004954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	482c      	ldr	r0, [pc, #176]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004cca:	f005 f991 	bl	8009ff0 <HAL_TIM_ConfigClockSource>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004cd4:	f7ff fe3e 	bl	8004954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cd8:	4828      	ldr	r0, [pc, #160]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004cda:	f004 fe2e 	bl	800993a <HAL_TIM_PWM_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004ce4:	f7ff fe36 	bl	8004954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4821      	ldr	r0, [pc, #132]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004cf8:	f005 fd7a 	bl	800a7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004d02:	f7ff fe27 	bl	8004954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8004d0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d14:	2300      	movs	r3, #0
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d20:	2300      	movs	r3, #0
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4813      	ldr	r0, [pc, #76]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004d2e:	f005 f89d 	bl	8009e6c <HAL_TIM_PWM_ConfigChannel>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8004d38:	f7ff fe0c 	bl	8004954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4807      	ldr	r0, [pc, #28]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004d60:	f005 fdc2 	bl	800a8e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004d6a:	f7ff fdf3 	bl	8004954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d6e:	4803      	ldr	r0, [pc, #12]	; (8004d7c <MX_TIM1_Init+0x13c>)
 8004d70:	f000 f840 	bl	8004df4 <HAL_TIM_MspPostInit>

}
 8004d74:	bf00      	nop
 8004d76:	3758      	adds	r7, #88	; 0x58
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	2000026c 	.word	0x2000026c
 8004d80:	40010000 	.word	0x40010000

08004d84 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM6_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_TIM_Base_MspInit+0x64>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004db2:	e012      	b.n	8004dda <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_TIM_Base_MspInit+0x6c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10d      	bne.n	8004dda <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004dc8:	f043 0310 	orr.w	r3, r3, #16
 8004dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_TIM_Base_MspInit+0x68>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40001000 	.word	0x40001000

08004df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_TIM_MspPostInit+0x68>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d11e      	bne.n	8004e54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e20:	f043 0310 	orr.w	r3, r3, #16
 8004e24:	6313      	str	r3, [r2, #48]	; 0x30
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4805      	ldr	r0, [pc, #20]	; (8004e64 <HAL_TIM_MspPostInit+0x70>)
 8004e50:	f002 feb4 	bl	8007bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40021000 	.word	0x40021000

08004e68 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <MX_USART6_UART_Init+0x50>)
 8004e70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e8e:	220c      	movs	r2, #12
 8004e90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004e9e:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <MX_USART6_UART_Init+0x4c>)
 8004ea0:	f005 fd88 	bl	800a9b4 <HAL_UART_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004eaa:	f7ff fd53 	bl	8004954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200002fc 	.word	0x200002fc
 8004eb8:	40011400 	.word	0x40011400

08004ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_UART_MspInit+0x84>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d12b      	bne.n	8004f36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004ee8:	f043 0320 	orr.w	r3, r3, #32
 8004eec:	6453      	str	r3, [r2, #68]	; 0x44
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_UART_MspInit+0x88>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f16:	23c0      	movs	r3, #192	; 0xc0
 8004f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f22:	2303      	movs	r3, #3
 8004f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004f26:	2308      	movs	r3, #8
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4805      	ldr	r0, [pc, #20]	; (8004f48 <HAL_UART_MspInit+0x8c>)
 8004f32:	f002 fe43 	bl	8007bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004f36:	bf00      	nop
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40011400 	.word	0x40011400
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40020800 	.word	0x40020800

08004f4c <_ZNK12MelodyPlayer9isPlayingEv>:
    void stop();
    void pause();
    void resume();
    
    // Состояние
    bool isPlaying() const { return playing; }
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7b1b      	ldrb	r3, [r3, #12]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_ZN6Buzzer7ChannelC1Ev>:
    struct Channel {
        uint16_t frequency;
        uint8_t volume;
        bool active;
        
        Channel() : frequency(0), volume(0), active(false) {}
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	709a      	strb	r2, [r3, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	70da      	strb	r2, [r3, #3]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <_ZN6BuzzerC1Ev>:
    Buzzer() = default;
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2403      	movs	r4, #3
 8004f98:	461d      	mov	r5, r3
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	db05      	blt.n	8004faa <_ZN6BuzzerC1Ev+0x1e>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7ff ffe0 	bl	8004f64 <_ZN6Buzzer7ChannelC1Ev>
 8004fa4:	3504      	adds	r5, #4
 8004fa6:	3c01      	subs	r4, #1
 8004fa8:	e7f7      	b.n	8004f9a <_ZN6BuzzerC1Ev+0xe>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3314      	adds	r3, #20
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f98a 	bl	80052c8 <_ZN12MelodyPlayerC1Ev>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004fc0 <_ZN6Buzzer11getInstanceEv>:
#include "stm32f4xx_hal.h"

// Внешние переменные из HAL
extern TIM_HandleTypeDef htim1;

Buzzer& Buzzer::getInstance() {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
    static Buzzer instance;
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <_ZN6Buzzer11getInstanceEv+0x48>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f3bf 8f5b 	dmb	ish
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <_ZN6Buzzer11getInstanceEv+0x42>
 8004fe0:	4809      	ldr	r0, [pc, #36]	; (8005008 <_ZN6Buzzer11getInstanceEv+0x48>)
 8004fe2:	f006 fd91 	bl	800bb08 <__cxa_guard_acquire>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <_ZN6Buzzer11getInstanceEv+0x42>
 8004ff6:	4805      	ldr	r0, [pc, #20]	; (800500c <_ZN6Buzzer11getInstanceEv+0x4c>)
 8004ff8:	f7ff ffc8 	bl	8004f8c <_ZN6BuzzerC1Ev>
 8004ffc:	4802      	ldr	r0, [pc, #8]	; (8005008 <_ZN6Buzzer11getInstanceEv+0x48>)
 8004ffe:	f006 fd8f 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8005002:	4b02      	ldr	r3, [pc, #8]	; (800500c <_ZN6Buzzer11getInstanceEv+0x4c>)
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000364 	.word	0x20000364
 800500c:	20000340 	.word	0x20000340

08005010 <_ZN6Buzzer4initEv>:

bool Buzzer::init() {
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
    // Инициализация каналов
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d80d      	bhi.n	800503e <_ZN6Buzzer4initEv+0x2e>
        channels[i] = Channel();
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff9c 	bl	8004f64 <_ZN6Buzzer7ChannelC1Ev>
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	3301      	adds	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e7ee      	b.n	800501c <_ZN6Buzzer4initEv+0xc>
    }
    
    globalVolume = MAX_VOLUME;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	220a      	movs	r2, #10
 8005042:	741a      	strb	r2, [r3, #16]
    
    // Запуск таймера
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005044:	2100      	movs	r1, #0
 8005046:	4804      	ldr	r0, [pc, #16]	; (8005058 <_ZN6Buzzer4initEv+0x48>)
 8005048:	f004 fcd0 	bl	80099ec <HAL_TIM_PWM_Start>
    
    return true;
 800504c:	2301      	movs	r3, #1
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2000026c 	.word	0x2000026c

0800505c <_ZN6Buzzer8playNoteEhth>:

void Buzzer::playNote(uint8_t channel, uint16_t frequency, uint8_t volume) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	70fb      	strb	r3, [r7, #3]
 800506e:	460b      	mov	r3, r1
 8005070:	803b      	strh	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	70bb      	strb	r3, [r7, #2]
    if (channel >= MAX_CHANNELS) return;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d82a      	bhi.n	80050d2 <_ZN6Buzzer8playNoteEhth+0x76>
    
    Uart::getInstance().printf("Buzzer::playNote: ch=%d, freq=%d, vol=%d\n", 
 800507c:	f001 fe38 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	883b      	ldrh	r3, [r7, #0]
 8005084:	78b9      	ldrb	r1, [r7, #2]
 8005086:	9100      	str	r1, [sp, #0]
 8005088:	4914      	ldr	r1, [pc, #80]	; (80050dc <_ZN6Buzzer8playNoteEhth+0x80>)
 800508a:	f001 feba 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                              channel, frequency, volume);
    
    channels[channel].frequency = frequency;
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8839      	ldrh	r1, [r7, #0]
 8005094:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    channels[channel].volume = (volume > MAX_VOLUME) ? MAX_VOLUME : volume;
 8005098:	78bb      	ldrb	r3, [r7, #2]
 800509a:	2b0a      	cmp	r3, #10
 800509c:	d802      	bhi.n	80050a4 <_ZN6Buzzer8playNoteEhth+0x48>
 800509e:	1cbb      	adds	r3, r7, #2
 80050a0:	7819      	ldrb	r1, [r3, #0]
 80050a2:	e000      	b.n	80050a6 <_ZN6Buzzer8playNoteEhth+0x4a>
 80050a4:	210a      	movs	r1, #10
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	460a      	mov	r2, r1
 80050b0:	709a      	strb	r2, [r3, #2]
    channels[channel].active = (frequency > 0);
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	883a      	ldrh	r2, [r7, #0]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2201      	movne	r2, #1
 80050bc:	2200      	moveq	r2, #0
 80050be:	b2d1      	uxtb	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	460a      	mov	r2, r1
 80050c8:	70da      	strb	r2, [r3, #3]
    
    updatePWM();
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f86e 	bl	80051ac <_ZN6Buzzer9updatePWMEv>
 80050d0:	e000      	b.n	80050d4 <_ZN6Buzzer8playNoteEhth+0x78>
    if (channel >= MAX_CHANNELS) return;
 80050d2:	bf00      	nop
}
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800daa4 	.word	0x0800daa4

080050e0 <_ZN6Buzzer7stopAllEv>:
    channels[channel].volume = 0;
    
    updatePWM();
}

void Buzzer::stopAll() {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d814      	bhi.n	800511c <_ZN6Buzzer7stopAllEv+0x3c>
        channels[i].active = false;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	70da      	strb	r2, [r3, #3]
        channels[i].frequency = 0;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2100      	movs	r1, #0
 8005104:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        channels[i].volume = 0;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	2200      	movs	r2, #0
 8005112:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	3301      	adds	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e7e7      	b.n	80050ec <_ZN6Buzzer7stopAllEv+0xc>
    }
    
    updatePWM();
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f845 	bl	80051ac <_ZN6Buzzer9updatePWMEv>
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_ZN6Buzzer15setGlobalVolumeEh>:
    
    channels[channel].volume = (volume > MAX_VOLUME) ? MAX_VOLUME : volume;
    updatePWM();
}

void Buzzer::setGlobalVolume(uint8_t volume) {
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
    globalVolume = (volume > MAX_VOLUME) ? MAX_VOLUME : volume;
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	2b0a      	cmp	r3, #10
 800513a:	d802      	bhi.n	8005142 <_ZN6Buzzer15setGlobalVolumeEh+0x18>
 800513c:	1cfb      	adds	r3, r7, #3
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	e000      	b.n	8005144 <_ZN6Buzzer15setGlobalVolumeEh+0x1a>
 8005142:	220a      	movs	r2, #10
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	741a      	strb	r2, [r3, #16]
    updatePWM();
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f82f 	bl	80051ac <_ZN6Buzzer9updatePWMEv>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZN6Buzzer10playMelodyERK6Melody>:

void Buzzer::playMelody(const Melody& melody) {
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
    melodyPlayer.play(melody);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3314      	adds	r3, #20
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f8c8 	bl	80052fc <_ZN12MelodyPlayer4playERK6Melody>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_ZNK6Buzzer9isPlayingEv>:

void Buzzer::stopMelody() {
    melodyPlayer.stop();
}

bool Buzzer::isPlaying() const {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
    return melodyPlayer.isPlaying();
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3314      	adds	r3, #20
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fee3 	bl	8004f4c <_ZNK12MelodyPlayer9isPlayingEv>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_ZN6Buzzer6updateEv>:

void Buzzer::update() {
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    melodyPlayer.update();
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3314      	adds	r3, #20
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f8f7 	bl	8005390 <_ZN12MelodyPlayer6updateEv>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <_ZN6Buzzer9updatePWMEv>:

void Buzzer::updatePWM() {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
    // Находим активный канал с максимальной частотой
    uint16_t maxFreq = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	82fb      	strh	r3, [r7, #22]
    uint8_t maxVolume = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	757b      	strb	r3, [r7, #21]
    
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 80051bc:	2300      	movs	r3, #0
 80051be:	753b      	strb	r3, [r7, #20]
 80051c0:	7d3b      	ldrb	r3, [r7, #20]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d81c      	bhi.n	8005200 <_ZN6Buzzer9updatePWMEv+0x54>
        if (channels[i].active && channels[i].frequency > maxFreq) {
 80051c6:	7d3b      	ldrb	r3, [r7, #20]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	78db      	ldrb	r3, [r3, #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d011      	beq.n	80051f8 <_ZN6Buzzer9updatePWMEv+0x4c>
 80051d4:	7d3a      	ldrb	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80051dc:	8afa      	ldrh	r2, [r7, #22]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d20a      	bcs.n	80051f8 <_ZN6Buzzer9updatePWMEv+0x4c>
            maxFreq = channels[i].frequency;
 80051e2:	7d3a      	ldrb	r2, [r7, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80051ea:	82fb      	strh	r3, [r7, #22]
            maxVolume = channels[i].volume;
 80051ec:	7d3b      	ldrb	r3, [r7, #20]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 80051f8:	7d3b      	ldrb	r3, [r7, #20]
 80051fa:	3301      	adds	r3, #1
 80051fc:	753b      	strb	r3, [r7, #20]
 80051fe:	e7df      	b.n	80051c0 <_ZN6Buzzer9updatePWMEv+0x14>
        }
    }
    
    if (maxFreq > 0 && maxFreq < 20000) { // Проверяем разумные пределы частоты
 8005200:	8afb      	ldrh	r3, [r7, #22]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04d      	beq.n	80052a2 <_ZN6Buzzer9updatePWMEv+0xf6>
 8005206:	8afb      	ldrh	r3, [r7, #22]
 8005208:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800520c:	4293      	cmp	r3, r2
 800520e:	d848      	bhi.n	80052a2 <_ZN6Buzzer9updatePWMEv+0xf6>
        // Настраиваем частоту и громкость
        // Частота = PCLK / ((PSC + 1) * (ARR + 1))
        // Для простоты используем ARR = 1000, тогда PSC = PCLK / (freq * 1000) - 1
        uint32_t pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f004 fb1c 	bl	800984c <HAL_RCC_GetPCLK1Freq>
 8005214:	60b8      	str	r0, [r7, #8]
        uint32_t psc = (pclk / (maxFreq * 1000)) - 1;
 8005216:	8afb      	ldrh	r3, [r7, #22]
 8005218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	fbb3 f3f2 	udiv	r3, r3, r2
 8005228:	3b01      	subs	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
        
        // Ограничиваем PSC разумными значениями
        if (psc > 65535) psc = 65535;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005232:	d302      	bcc.n	800523a <_ZN6Buzzer9updatePWMEv+0x8e>
 8005234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005238:	613b      	str	r3, [r7, #16]
        if (psc < 1) psc = 1;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <_ZN6Buzzer9updatePWMEv+0x98>
 8005240:	2301      	movs	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
        
        // Останавливаем таймер перед изменением параметров
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005244:	2100      	movs	r1, #0
 8005246:	481d      	ldr	r0, [pc, #116]	; (80052bc <_ZN6Buzzer9updatePWMEv+0x110>)
 8005248:	f004 fc98 	bl	8009b7c <HAL_TIM_PWM_Stop>
        
        TIM1->PSC = psc;
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <_ZN6Buzzer9updatePWMEv+0x114>)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	6293      	str	r3, [r2, #40]	; 0x28
        TIM1->ARR = 1000;
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <_ZN6Buzzer9updatePWMEv+0x114>)
 8005254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005258:	62da      	str	r2, [r3, #44]	; 0x2c
        
        // Устанавливаем duty cycle для громкости
        uint32_t duty = (maxVolume * globalVolume * 1000) / (MAX_VOLUME * MAX_VOLUME);
 800525a:	7d7b      	ldrb	r3, [r7, #21]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	7c12      	ldrb	r2, [r2, #16]
 8005260:	fb03 f202 	mul.w	r2, r3, r2
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
        if (duty > 1000) duty = 1000;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005274:	d902      	bls.n	800527c <_ZN6Buzzer9updatePWMEv+0xd0>
 8005276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800527a:	60fb      	str	r3, [r7, #12]
        TIM1->CCR1 = duty;
 800527c:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <_ZN6Buzzer9updatePWMEv+0x114>)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6353      	str	r3, [r2, #52]	; 0x34
        
        // Запускаем таймер с новыми параметрами
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005282:	2100      	movs	r1, #0
 8005284:	480d      	ldr	r0, [pc, #52]	; (80052bc <_ZN6Buzzer9updatePWMEv+0x110>)
 8005286:	f004 fbb1 	bl	80099ec <HAL_TIM_PWM_Start>
        
        // Отладочный вывод
        Uart::getInstance().printf("PWM: freq=%d, pclk=%lu, psc=%lu, duty=%lu\n", 
 800528a:	f001 fd31 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800528e:	8afa      	ldrh	r2, [r7, #22]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <_ZN6Buzzer9updatePWMEv+0x118>)
 800529c:	f001 fdb1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                                  maxFreq, pclk, psc, duty);
 80052a0:	e007      	b.n	80052b2 <_ZN6Buzzer9updatePWMEv+0x106>
    } else {
        // Выключаем звук
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80052a2:	2100      	movs	r1, #0
 80052a4:	4805      	ldr	r0, [pc, #20]	; (80052bc <_ZN6Buzzer9updatePWMEv+0x110>)
 80052a6:	f004 fc69 	bl	8009b7c <HAL_TIM_PWM_Stop>
        TIM1->CCR1 = 0;
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <_ZN6Buzzer9updatePWMEv+0x114>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000026c 	.word	0x2000026c
 80052c0:	40010000 	.word	0x40010000
 80052c4:	0800dad0 	.word	0x0800dad0

080052c8 <_ZN12MelodyPlayerC1Ev>:
    // Простое микширование - находим канал с максимальной частотой
    updatePWM();
}

// Реализация MelodyPlayer
MelodyPlayer::MelodyPlayer() 
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
    : currentMelody(nullptr), currentNote(0), noteStartTime(0), playing(false), paused(false) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	809a      	strh	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	731a      	strb	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	735a      	strb	r2, [r3, #13]
}
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <_ZN12MelodyPlayer4playERK6Melody>:

void MelodyPlayer::play(const Melody& melody) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
    currentMelody = &melody;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]
    currentNote = 0;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	809a      	strh	r2, [r3, #4]
    noteStartTime = HAL_GetTick();
 8005312:	f002 faab 	bl	800786c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	609a      	str	r2, [r3, #8]
    playing = true;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	731a      	strb	r2, [r3, #12]
    paused = false;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	735a      	strb	r2, [r3, #13]
    
    // Начинаем воспроизведение первой ноты
    if (currentNote < currentMelody->length) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	889a      	ldrh	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	889b      	ldrh	r3, [r3, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d214      	bcs.n	8005360 <_ZN12MelodyPlayer4playERK6Melody+0x64>
        const Note& note = currentMelody->notes[currentNote];
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	889b      	ldrh	r3, [r3, #4]
 8005340:	4619      	mov	r1, r3
 8005342:	460b      	mov	r3, r1
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	440b      	add	r3, r1
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
        Buzzer::getInstance().playNote(note.channel, note.frequency, Buzzer::MAX_VOLUME);
 800534e:	f7ff fe37 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	7a19      	ldrb	r1, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	230a      	movs	r3, #10
 800535c:	f7ff fe7e 	bl	800505c <_ZN6Buzzer8playNoteEhth>
    }
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZN12MelodyPlayer4stopEv>:

void MelodyPlayer::stop() {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    playing = false;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	731a      	strb	r2, [r3, #12]
    paused = false;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	735a      	strb	r2, [r3, #13]
    Buzzer::getInstance().stopAll();
 800537c:	f7ff fe20 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8005380:	4603      	mov	r3, r0
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff feac 	bl	80050e0 <_ZN6Buzzer7stopAllEv>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZN12MelodyPlayer6updateEv>:
            Buzzer::getInstance().playNote(note.channel, note.frequency, Buzzer::MAX_VOLUME);
        }
    }
}

void MelodyPlayer::update() {
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    if (!playing || paused) return;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7b1b      	ldrb	r3, [r3, #12]
 800539c:	f083 0301 	eor.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d15b      	bne.n	800545e <_ZN12MelodyPlayer6updateEv+0xce>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7b5b      	ldrb	r3, [r3, #13]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d157      	bne.n	800545e <_ZN12MelodyPlayer6updateEv+0xce>
    
    if (currentNote >= currentMelody->length) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	889a      	ldrh	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	889b      	ldrh	r3, [r3, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d303      	bcc.n	80053c4 <_ZN12MelodyPlayer6updateEv+0x34>
        stop();
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ffd3 	bl	8005368 <_ZN12MelodyPlayer4stopEv>
        return;
 80053c2:	e04d      	b.n	8005460 <_ZN12MelodyPlayer6updateEv+0xd0>
    }
    
    const Note& note = currentMelody->notes[currentNote];
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	889b      	ldrh	r3, [r3, #4]
 80053ce:	4619      	mov	r1, r3
 80053d0:	460b      	mov	r3, r1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	440b      	add	r3, r1
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    uint32_t noteDuration = getNoteDuration(note.duration);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f83f 	bl	8005466 <_ZNK12MelodyPlayer15getNoteDurationEm>
 80053e8:	6138      	str	r0, [r7, #16]
    
    if (HAL_GetTick() - noteStartTime >= noteDuration) {
 80053ea:	f002 fa3f 	bl	800786c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bf94      	ite	ls
 80053fc:	2301      	movls	r3, #1
 80053fe:	2300      	movhi	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d02c      	beq.n	8005460 <_ZN12MelodyPlayer6updateEv+0xd0>
        // Переходим к следующей ноте
        currentNote++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	889b      	ldrh	r3, [r3, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	809a      	strh	r2, [r3, #4]
        noteStartTime = HAL_GetTick();
 8005412:	f002 fa2b 	bl	800786c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]
        
        if (currentNote < currentMelody->length) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	889a      	ldrh	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	889b      	ldrh	r3, [r3, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	d215      	bcs.n	8005456 <_ZN12MelodyPlayer6updateEv+0xc6>
            const Note& nextNote = currentMelody->notes[currentNote];
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	889b      	ldrh	r3, [r3, #4]
 8005434:	4619      	mov	r1, r3
 8005436:	460b      	mov	r3, r1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	440b      	add	r3, r1
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
            Buzzer::getInstance().playNote(nextNote.channel, nextNote.frequency, Buzzer::MAX_VOLUME);
 8005442:	f7ff fdbd 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	7a19      	ldrb	r1, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	230a      	movs	r3, #10
 8005450:	f7ff fe04 	bl	800505c <_ZN6Buzzer8playNoteEhth>
 8005454:	e004      	b.n	8005460 <_ZN12MelodyPlayer6updateEv+0xd0>
        } else {
            stop();
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff86 	bl	8005368 <_ZN12MelodyPlayer4stopEv>
 800545c:	e000      	b.n	8005460 <_ZN12MelodyPlayer6updateEv+0xd0>
    if (!playing || paused) return;
 800545e:	bf00      	nop
        }
    }
}
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZNK12MelodyPlayer15getNoteDurationEm>:

uint32_t MelodyPlayer::getNoteDuration(uint32_t duration) const {
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
    if (currentMelody == nullptr) return 0;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <_ZNK12MelodyPlayer15getNoteDurationEm+0x16>
 8005478:	2300      	movs	r3, #0
 800547a:	e00d      	b.n	8005498 <_ZNK12MelodyPlayer15getNoteDurationEm+0x32>
    
    // Конвертируем длительность ноты в миллисекунды на основе темпа
    // 60000 мс / (BPM * 4) = длительность четвертной ноты
    uint32_t quarterNoteMs = 60000 / (currentMelody->tempo * 4);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	88db      	ldrh	r3, [r3, #6]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005488:	fb92 f3f3 	sdiv	r3, r2, r3
 800548c:	60fb      	str	r3, [r7, #12]
    return (duration * quarterNoteMs) / 4;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	089b      	lsrs	r3, r3, #2
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <_ZN7Display11getInstanceEv>:
#include <stdio.h>

// Внешние переменные из HAL
extern I2C_HandleTypeDef hi2c1;

Display& Display::getInstance() {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
    static Display instance;
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <_ZN7Display11getInstanceEv+0x44>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f3bf 8f5b 	dmb	ish
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <_ZN7Display11getInstanceEv+0x3c>
 80054c4:	4808      	ldr	r0, [pc, #32]	; (80054e8 <_ZN7Display11getInstanceEv+0x44>)
 80054c6:	f006 fb1f 	bl	800bb08 <__cxa_guard_acquire>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <_ZN7Display11getInstanceEv+0x3c>
 80054da:	4803      	ldr	r0, [pc, #12]	; (80054e8 <_ZN7Display11getInstanceEv+0x44>)
 80054dc:	f006 fb20 	bl	800bb20 <__cxa_guard_release>
    return instance;
 80054e0:	4b02      	ldr	r3, [pc, #8]	; (80054ec <_ZN7Display11getInstanceEv+0x48>)
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	2000076c 	.word	0x2000076c
 80054ec:	20000368 	.word	0x20000368

080054f0 <_ZN7Display4initEv>:

bool Display::init() {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
    // Инициализация состояния
    currentX = 0;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    currentY = 0;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    inverted = false;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    initialized = false;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    
    // Очистка буфера
    clear(DisplayColor::BLACK);
 8005518:	2100      	movs	r1, #0
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f87f 	bl	800561e <_ZN7Display5clearE12DisplayColor>
    
    // Последовательность инициализации OLED SSD1306
    HAL_Delay(100);
 8005520:	2064      	movs	r0, #100	; 0x64
 8005522:	f002 f9af 	bl	8007884 <HAL_Delay>
    
    writeCommand(0xAE); // Display OFF
 8005526:	21ae      	movs	r1, #174	; 0xae
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 faa1 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x20); // Set Memory Addressing Mode
 800552e:	2120      	movs	r1, #32
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fa9d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x10); // Page addressing mode
 8005536:	2110      	movs	r1, #16
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa99 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xB0); // Set Page Start Address
 800553e:	21b0      	movs	r1, #176	; 0xb0
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa95 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xC8); // Set COM Output Scan Direction
 8005546:	21c8      	movs	r1, #200	; 0xc8
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa91 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x00); // Set Low Column Start Address
 800554e:	2100      	movs	r1, #0
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa8d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x10); // Set High Column Start Address
 8005556:	2110      	movs	r1, #16
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa89 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x40); // Set Start Line Address
 800555e:	2140      	movs	r1, #64	; 0x40
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa85 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x81); // Set Contrast Control
 8005566:	2181      	movs	r1, #129	; 0x81
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa81 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xFF); // Contrast value
 800556e:	21ff      	movs	r1, #255	; 0xff
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa7d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xA1); // Set Segment Re-map
 8005576:	21a1      	movs	r1, #161	; 0xa1
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fa79 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xA6); // Set Normal Display
 800557e:	21a6      	movs	r1, #166	; 0xa6
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa75 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xA8); // Set Multiplex Ratio
 8005586:	21a8      	movs	r1, #168	; 0xa8
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fa71 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x3F); // 1/64 duty
 800558e:	213f      	movs	r1, #63	; 0x3f
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa6d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xA4); // Set Entire Display ON
 8005596:	21a4      	movs	r1, #164	; 0xa4
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa69 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xD3); // Set Display Offset
 800559e:	21d3      	movs	r1, #211	; 0xd3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa65 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x00); // No offset
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa61 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xD5); // Set Display Clock Divide Ratio
 80055ae:	21d5      	movs	r1, #213	; 0xd5
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa5d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xF0); // Divide ratio
 80055b6:	21f0      	movs	r1, #240	; 0xf0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fa59 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xD9); // Set Pre-charge Period
 80055be:	21d9      	movs	r1, #217	; 0xd9
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa55 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x22); // Pre-charge period
 80055c6:	2122      	movs	r1, #34	; 0x22
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa51 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xDA); // Set COM Hardware Configuration
 80055ce:	21da      	movs	r1, #218	; 0xda
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa4d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x12); // COM configuration
 80055d6:	2112      	movs	r1, #18
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa49 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xDB); // Set VCOMH Deselect Level
 80055de:	21db      	movs	r1, #219	; 0xdb
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa45 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x20); // VCOMH level
 80055e6:	2120      	movs	r1, #32
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fa41 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x8D); // Charge Pump Setting
 80055ee:	218d      	movs	r1, #141	; 0x8d
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa3d 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0x14); // Enable charge pump
 80055f6:	2114      	movs	r1, #20
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fa39 	bl	8005a70 <_ZN7Display12writeCommandEh>
    writeCommand(0xAF); // Display ON
 80055fe:	21af      	movs	r1, #175	; 0xaf
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa35 	bl	8005a70 <_ZN7Display12writeCommandEh>
    
    // Обновляем экран
    update();
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f829 	bl	800565e <_ZN7Display6updateEv>
    
    initialized = true;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    return true;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZN7Display5clearE12DisplayColor>:

void Display::clear(DisplayColor color) {
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
    uint8_t fillValue = (color == DisplayColor::BLACK) ? 0x00 : 0xFF;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <_ZN7Display5clearE12DisplayColor+0x14>
 800562e:	2300      	movs	r3, #0
 8005630:	e000      	b.n	8005634 <_ZN7Display5clearE12DisplayColor+0x16>
 8005632:	23ff      	movs	r3, #255	; 0xff
 8005634:	737b      	strb	r3, [r7, #13]
    
    for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8005636:	2300      	movs	r3, #0
 8005638:	81fb      	strh	r3, [r7, #14]
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d207      	bcs.n	8005652 <_ZN7Display5clearE12DisplayColor+0x34>
        buffer[i] = fillValue;
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7b79      	ldrb	r1, [r7, #13]
 8005648:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 800564a:	89fb      	ldrh	r3, [r7, #14]
 800564c:	3301      	adds	r3, #1
 800564e:	81fb      	strh	r3, [r7, #14]
 8005650:	e7f3      	b.n	800563a <_ZN7Display5clearE12DisplayColor+0x1c>
    }
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <_ZN7Display6updateEv>:

void Display::update() {
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
    if (!initialized) return;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800566c:	f083 0301 	eor.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d121      	bne.n	80056ba <_ZN7Display6updateEv+0x5c>
    
    for (uint8_t page = 0; page < 8; page++) {
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b07      	cmp	r3, #7
 800567e:	d81d      	bhi.n	80056bc <_ZN7Display6updateEv+0x5e>
        writeCommand(0xB0 + page); // Set page address
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	3b50      	subs	r3, #80	; 0x50
 8005684:	b2db      	uxtb	r3, r3
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9f1 	bl	8005a70 <_ZN7Display12writeCommandEh>
        writeCommand(0x00);        // Set low column address
 800568e:	2100      	movs	r1, #0
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9ed 	bl	8005a70 <_ZN7Display12writeCommandEh>
        writeCommand(0x10);        // Set high column address
 8005696:	2110      	movs	r1, #16
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9e9 	bl	8005a70 <_ZN7Display12writeCommandEh>
        
        // Отправляем данные страницы
        uint8_t* pageData = &buffer[WIDTH * page];
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	01db      	lsls	r3, r3, #7
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
        writeData(pageData, WIDTH);
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f9f7 	bl	8005aa0 <_ZN7Display9writeDataEPht>
    for (uint8_t page = 0; page < 8; page++) {
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	3301      	adds	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e7df      	b.n	800567a <_ZN7Display6updateEv+0x1c>
    if (!initialized) return;
 80056ba:	bf00      	nop
    }
}
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <_ZN7Display9setCursorEhh>:

void Display::setInverted(bool inverted) {
    this->inverted = inverted;
}

void Display::setCursor(uint8_t x, uint8_t y) {
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	70fb      	strb	r3, [r7, #3]
 80056ce:	4613      	mov	r3, r2
 80056d0:	70bb      	strb	r3, [r7, #2]
    currentX = x;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
    currentY = y;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	78ba      	ldrb	r2, [r7, #2]
 80056de:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <_ZN7Display9drawPixelEhh12DisplayColor>:

void Display::drawPixel(uint8_t x, uint8_t y, DisplayColor color) {
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	72fb      	strb	r3, [r7, #11]
 80056fc:	4613      	mov	r3, r2
 80056fe:	72bb      	strb	r3, [r7, #10]
    if (!isPixelInBounds(x, y)) return;
 8005700:	7aba      	ldrb	r2, [r7, #10]
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	4619      	mov	r1, r3
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f9e4 	bl	8005ad4 <_ZNK7Display15isPixelInBoundsEhh>
 800570c:	4603      	mov	r3, r0
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <_ZN7Display9drawPixelEhh12DisplayColor+0x54>
    
    DisplayColor actualColor = inverted ? (color == DisplayColor::BLACK ? DisplayColor::WHITE : DisplayColor::BLACK) : color;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <_ZN7Display9drawPixelEhh12DisplayColor+0x42>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <_ZN7Display9drawPixelEhh12DisplayColor+0x3e>
 8005728:	2301      	movs	r3, #1
 800572a:	e002      	b.n	8005732 <_ZN7Display9drawPixelEhh12DisplayColor+0x44>
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <_ZN7Display9drawPixelEhh12DisplayColor+0x44>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	617b      	str	r3, [r7, #20]
    setPixelInBuffer(x, y, actualColor);
 8005734:	7aba      	ldrb	r2, [r7, #10]
 8005736:	7af9      	ldrb	r1, [r7, #11]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f9e2 	bl	8005b04 <_ZN7Display16setPixelInBufferEhh12DisplayColor>
 8005740:	e000      	b.n	8005744 <_ZN7Display9drawPixelEhh12DisplayColor+0x56>
    if (!isPixelInBounds(x, y)) return;
 8005742:	bf00      	nop
}
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZN7Display9drawHLineEhhh12DisplayColor>:
            y += sy;
        }
    }
}

void Display::drawHLine(uint8_t x1, uint8_t x2, uint8_t y, DisplayColor color) {
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	4608      	mov	r0, r1
 8005754:	4611      	mov	r1, r2
 8005756:	461a      	mov	r2, r3
 8005758:	4603      	mov	r3, r0
 800575a:	70fb      	strb	r3, [r7, #3]
 800575c:	460b      	mov	r3, r1
 800575e:	70bb      	strb	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
    if (x1 > x2) {
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	78bb      	ldrb	r3, [r7, #2]
 8005768:	429a      	cmp	r2, r3
 800576a:	d905      	bls.n	8005778 <_ZN7Display9drawHLineEhhh12DisplayColor+0x2e>
        uint8_t temp = x1;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	73bb      	strb	r3, [r7, #14]
        x1 = x2;
 8005770:	78bb      	ldrb	r3, [r7, #2]
 8005772:	70fb      	strb	r3, [r7, #3]
        x2 = temp;
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	70bb      	strb	r3, [r7, #2]
    }
    
    for (uint8_t x = x1; x <= x2; x++) {
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	73fb      	strb	r3, [r7, #15]
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	78bb      	ldrb	r3, [r7, #2]
 8005780:	429a      	cmp	r2, r3
 8005782:	d809      	bhi.n	8005798 <_ZN7Display9drawHLineEhhh12DisplayColor+0x4e>
        drawPixel(x, y, color);
 8005784:	787a      	ldrb	r2, [r7, #1]
 8005786:	7bf9      	ldrb	r1, [r7, #15]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffaf 	bl	80056ee <_ZN7Display9drawPixelEhh12DisplayColor>
    for (uint8_t x = x1; x <= x2; x++) {
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	3301      	adds	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e7f1      	b.n	800577c <_ZN7Display9drawHLineEhhh12DisplayColor+0x32>
    }
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_ZN7Display9drawVLineEhhh12DisplayColor>:

void Display::drawVLine(uint8_t y1, uint8_t y2, uint8_t x, DisplayColor color) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	70fb      	strb	r3, [r7, #3]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70bb      	strb	r3, [r7, #2]
 80057b6:	4613      	mov	r3, r2
 80057b8:	707b      	strb	r3, [r7, #1]
    if (y1 > y2) {
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	78bb      	ldrb	r3, [r7, #2]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d905      	bls.n	80057ce <_ZN7Display9drawVLineEhhh12DisplayColor+0x2e>
        uint8_t temp = y1;
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	73bb      	strb	r3, [r7, #14]
        y1 = y2;
 80057c6:	78bb      	ldrb	r3, [r7, #2]
 80057c8:	70fb      	strb	r3, [r7, #3]
        y2 = temp;
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	70bb      	strb	r3, [r7, #2]
    }
    
    for (uint8_t y = y1; y <= y2; y++) {
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	73fb      	strb	r3, [r7, #15]
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	78bb      	ldrb	r3, [r7, #2]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d809      	bhi.n	80057ee <_ZN7Display9drawVLineEhhh12DisplayColor+0x4e>
        drawPixel(x, y, color);
 80057da:	7bfa      	ldrb	r2, [r7, #15]
 80057dc:	7879      	ldrb	r1, [r7, #1]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff84 	bl	80056ee <_ZN7Display9drawPixelEhh12DisplayColor>
    for (uint8_t y = y1; y <= y2; y++) {
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	3301      	adds	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e7f1      	b.n	80057d2 <_ZN7Display9drawVLineEhhh12DisplayColor+0x32>
    }
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZN7Display8drawRectEhhhh12DisplayColor>:

void Display::drawRect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, DisplayColor color) {
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af02      	add	r7, sp, #8
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	461a      	mov	r2, r3
 8005804:	4603      	mov	r3, r0
 8005806:	70fb      	strb	r3, [r7, #3]
 8005808:	460b      	mov	r3, r1
 800580a:	70bb      	strb	r3, [r7, #2]
 800580c:	4613      	mov	r3, r2
 800580e:	707b      	strb	r3, [r7, #1]
    drawHLine(x, x + width - 1, y, color);                    // Верхняя линия
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	787b      	ldrb	r3, [r7, #1]
 8005814:	4413      	add	r3, r2
 8005816:	b2db      	uxtb	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	78b8      	ldrb	r0, [r7, #2]
 800581e:	78f9      	ldrb	r1, [r7, #3]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4603      	mov	r3, r0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff8f 	bl	800574a <_ZN7Display9drawHLineEhhh12DisplayColor>
    drawHLine(x, x + width - 1, y + height - 1, color);      // Нижняя линия
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	787b      	ldrb	r3, [r7, #1]
 8005830:	4413      	add	r3, r2
 8005832:	b2db      	uxtb	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b2d8      	uxtb	r0, r3
 8005838:	78ba      	ldrb	r2, [r7, #2]
 800583a:	7c3b      	ldrb	r3, [r7, #16]
 800583c:	4413      	add	r3, r2
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	78f9      	ldrb	r1, [r7, #3]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	4602      	mov	r2, r0
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff ff7b 	bl	800574a <_ZN7Display9drawHLineEhhh12DisplayColor>
    drawVLine(y, y + height - 1, x, color);                  // Левая линия
 8005854:	78ba      	ldrb	r2, [r7, #2]
 8005856:	7c3b      	ldrb	r3, [r7, #16]
 8005858:	4413      	add	r3, r2
 800585a:	b2db      	uxtb	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	78f8      	ldrb	r0, [r7, #3]
 8005862:	78b9      	ldrb	r1, [r7, #2]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	4603      	mov	r3, r0
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff98 	bl	80057a0 <_ZN7Display9drawVLineEhhh12DisplayColor>
    drawVLine(y, y + height - 1, x + width - 1, color);      // Правая линия
 8005870:	78ba      	ldrb	r2, [r7, #2]
 8005872:	7c3b      	ldrb	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b2d8      	uxtb	r0, r3
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	787b      	ldrb	r3, [r7, #1]
 8005880:	4413      	add	r3, r2
 8005882:	b2db      	uxtb	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b2da      	uxtb	r2, r3
 8005888:	78b9      	ldrb	r1, [r7, #2]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	4602      	mov	r2, r0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff84 	bl	80057a0 <_ZN7Display9drawVLineEhhh12DisplayColor>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN7Display14drawFilledRectEhhhh12DisplayColor>:

void Display::drawFilledRect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, DisplayColor color) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	70fb      	strb	r3, [r7, #3]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70bb      	strb	r3, [r7, #2]
 80058b6:	4613      	mov	r3, r2
 80058b8:	707b      	strb	r3, [r7, #1]
    for (uint8_t i = 0; i < height; i++) {
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
 80058be:	7bfa      	ldrb	r2, [r7, #15]
 80058c0:	7e3b      	ldrb	r3, [r7, #24]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d215      	bcs.n	80058f2 <_ZN7Display14drawFilledRectEhhhh12DisplayColor+0x52>
        drawHLine(x, x + width - 1, y + i, color);
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	4413      	add	r3, r2
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b2d8      	uxtb	r0, r3
 80058d2:	78ba      	ldrb	r2, [r7, #2]
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4413      	add	r3, r2
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	78f9      	ldrb	r1, [r7, #3]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	4602      	mov	r2, r0
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff30 	bl	800574a <_ZN7Display9drawHLineEhhh12DisplayColor>
    for (uint8_t i = 0; i < height; i++) {
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3301      	adds	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e7e5      	b.n	80058be <_ZN7Display14drawFilledRectEhhhh12DisplayColor+0x1e>
    }
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <_ZN7Display8drawCharEchh12DisplayColor>:
    for (uint8_t i = 0; i <= radius; i++) {
        drawCircle(x, y, i, color);
    }
}

void Display::drawChar(char ch, uint8_t x, uint8_t y, DisplayColor color) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	70fb      	strb	r3, [r7, #3]
 800590e:	460b      	mov	r3, r1
 8005910:	70bb      	strb	r3, [r7, #2]
 8005912:	4613      	mov	r3, r2
 8005914:	707b      	strb	r3, [r7, #1]
    if (ch < 32 || ch > 126) return; // Только печатные символы
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	2b1f      	cmp	r3, #31
 800591a:	d94f      	bls.n	80059bc <_ZN7Display8drawCharEchh12DisplayColor+0xc0>
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b7e      	cmp	r3, #126	; 0x7e
 8005920:	d84c      	bhi.n	80059bc <_ZN7Display8drawCharEchh12DisplayColor+0xc0>
    
    // Используем шрифт по умолчанию (Font_7x10)
    FontDef font = Font_7x10;
 8005922:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <_ZN7Display8drawCharEchh12DisplayColor+0xc8>)
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800592c:	e883 0003 	stmia.w	r3, {r0, r1}
    
    for (uint8_t i = 0; i < font.FontHeight; i++) {
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]
 8005934:	7b7b      	ldrb	r3, [r7, #13]
 8005936:	7dfa      	ldrb	r2, [r7, #23]
 8005938:	429a      	cmp	r2, r3
 800593a:	d240      	bcs.n	80059be <_ZN7Display8drawCharEchh12DisplayColor+0xc2>
        uint16_t b = font.data[(ch - 32) * font.FontHeight + i];
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	3b20      	subs	r3, #32
 8005942:	7b79      	ldrb	r1, [r7, #13]
 8005944:	fb03 f101 	mul.w	r1, r3, r1
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	440b      	add	r3, r1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	82bb      	strh	r3, [r7, #20]
        for (uint8_t j = 0; j < font.FontWidth; j++) {
 8005954:	2300      	movs	r3, #0
 8005956:	75bb      	strb	r3, [r7, #22]
 8005958:	7b3b      	ldrb	r3, [r7, #12]
 800595a:	7dba      	ldrb	r2, [r7, #22]
 800595c:	429a      	cmp	r2, r3
 800595e:	d229      	bcs.n	80059b4 <_ZN7Display8drawCharEchh12DisplayColor+0xb8>
            if ((b << j) & 0x8000) {
 8005960:	8aba      	ldrh	r2, [r7, #20]
 8005962:	7dbb      	ldrb	r3, [r7, #22]
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <_ZN7Display8drawCharEchh12DisplayColor+0x8e>
                drawPixel(x + j, y + i, color);
 8005970:	78ba      	ldrb	r2, [r7, #2]
 8005972:	7dbb      	ldrb	r3, [r7, #22]
 8005974:	4413      	add	r3, r2
 8005976:	b2d9      	uxtb	r1, r3
 8005978:	787a      	ldrb	r2, [r7, #1]
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	4413      	add	r3, r2
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff feb3 	bl	80056ee <_ZN7Display9drawPixelEhh12DisplayColor>
 8005988:	e010      	b.n	80059ac <_ZN7Display8drawCharEchh12DisplayColor+0xb0>
            } else {
                drawPixel(x + j, y + i, (color == DisplayColor::BLACK) ? DisplayColor::WHITE : DisplayColor::BLACK);
 800598a:	78ba      	ldrb	r2, [r7, #2]
 800598c:	7dbb      	ldrb	r3, [r7, #22]
 800598e:	4413      	add	r3, r2
 8005990:	b2d9      	uxtb	r1, r3
 8005992:	787a      	ldrb	r2, [r7, #1]
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	4413      	add	r3, r2
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <_ZN7Display8drawCharEchh12DisplayColor+0xa8>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <_ZN7Display8drawCharEchh12DisplayColor+0xaa>
 80059a4:	2300      	movs	r3, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fea1 	bl	80056ee <_ZN7Display9drawPixelEhh12DisplayColor>
        for (uint8_t j = 0; j < font.FontWidth; j++) {
 80059ac:	7dbb      	ldrb	r3, [r7, #22]
 80059ae:	3301      	adds	r3, #1
 80059b0:	75bb      	strb	r3, [r7, #22]
 80059b2:	e7d1      	b.n	8005958 <_ZN7Display8drawCharEchh12DisplayColor+0x5c>
    for (uint8_t i = 0; i < font.FontHeight; i++) {
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	3301      	adds	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
 80059ba:	e7bb      	b.n	8005934 <_ZN7Display8drawCharEchh12DisplayColor+0x38>
    if (ch < 32 || ch > 126) return; // Только печатные символы
 80059bc:	bf00      	nop
            }
        }
    }
}
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000030 	.word	0x20000030

080059c8 <_ZN7Display5printEPKc>:
        posX += 7; // Ширина символа Font_7x10
        str++;
    }
}

void Display::print(const char* str) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
    while (*str) {
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d029      	beq.n	8005a2e <_ZN7Display5printEPKc+0x66>
        if (*str == '\n') {
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d10c      	bne.n	80059fc <_ZN7Display5printEPKc+0x34>
            currentX = 0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
            currentY += 10; // Высота шрифта
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80059f0:	330a      	adds	r3, #10
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 80059fa:	e014      	b.n	8005a26 <_ZN7Display5printEPKc+0x5e>
        } else {
            drawChar(*str, currentX, currentY, DisplayColor::WHITE);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	7819      	ldrb	r1, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	9000      	str	r0, [sp, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff73 	bl	80058fc <_ZN7Display8drawCharEchh12DisplayColor>
            currentX += 7;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        }
        str++;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	603b      	str	r3, [r7, #0]
    while (*str) {
 8005a2c:	e7d1      	b.n	80059d2 <_ZN7Display5printEPKc+0xa>
    }
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_ZN7Display6printfEPKcz>:
        drawChar(ch, currentX, currentY, DisplayColor::WHITE);
        currentX += 7;
    }
}

void Display::printf(const char* format, ...) {
 8005a36:	b40e      	push	{r1, r2, r3}
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b0a5      	sub	sp, #148	; 0x94
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
    char buffer[128];
    va_list args;
    va_start(args, format);
 8005a40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a44:	60fb      	str	r3, [r7, #12]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8005a46:	f107 0010 	add.w	r0, r7, #16
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005a50:	2180      	movs	r1, #128	; 0x80
 8005a52:	f006 fe4f 	bl	800c6f4 <vsniprintf>
    va_end(args);
    print(buffer);
 8005a56:	f107 0310 	add.w	r3, r7, #16
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ffb3 	bl	80059c8 <_ZN7Display5printEPKc>
}
 8005a62:	bf00      	nop
 8005a64:	3794      	adds	r7, #148	; 0x94
 8005a66:	46bd      	mov	sp, r7
 8005a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a6c:	b003      	add	sp, #12
 8005a6e:	4770      	bx	lr

08005a70 <_ZN7Display12writeCommandEh>:

void Display::writeCommand(uint8_t command) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af04      	add	r7, sp, #16
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(&hi2c1, OLED_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2301      	movs	r3, #1
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	1cfb      	adds	r3, r7, #3
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2178      	movs	r1, #120	; 0x78
 8005a8e:	4803      	ldr	r0, [pc, #12]	; (8005a9c <_ZN7Display12writeCommandEh+0x2c>)
 8005a90:	f002 fbb6 	bl	8008200 <HAL_I2C_Mem_Write>
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000214 	.word	0x20000214

08005aa0 <_ZN7Display9writeDataEPht>:

void Display::writeData(uint8_t* data, uint16_t size) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, OLED_I2C_ADDR, 0x40, 1, data, size, 100);
 8005aae:	2364      	movs	r3, #100	; 0x64
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2301      	movs	r3, #1
 8005abc:	2240      	movs	r2, #64	; 0x40
 8005abe:	2178      	movs	r1, #120	; 0x78
 8005ac0:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <_ZN7Display9writeDataEPht+0x30>)
 8005ac2:	f002 fb9d 	bl	8008200 <HAL_I2C_Mem_Write>
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000214 	.word	0x20000214

08005ad4 <_ZNK7Display15isPixelInBoundsEhh>:

bool Display::isPixelInBounds(uint8_t x, uint8_t y) const {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	70bb      	strb	r3, [r7, #2]
    return x < WIDTH && y < HEIGHT;
 8005ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	db04      	blt.n	8005af6 <_ZNK7Display15isPixelInBoundsEhh+0x22>
 8005aec:	78bb      	ldrb	r3, [r7, #2]
 8005aee:	2b3f      	cmp	r3, #63	; 0x3f
 8005af0:	d801      	bhi.n	8005af6 <_ZNK7Display15isPixelInBoundsEhh+0x22>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <_ZNK7Display15isPixelInBoundsEhh+0x24>
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_ZN7Display16setPixelInBufferEhh12DisplayColor>:

void Display::setPixelInBuffer(uint8_t x, uint8_t y, DisplayColor color) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	72fb      	strb	r3, [r7, #11]
 8005b12:	4613      	mov	r3, r2
 8005b14:	72bb      	strb	r3, [r7, #10]
    if (!isPixelInBounds(x, y)) return;
 8005b16:	7aba      	ldrb	r2, [r7, #10]
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff ffd9 	bl	8005ad4 <_ZNK7Display15isPixelInBoundsEhh>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f083 0301 	eor.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d132      	bne.n	8005b94 <_ZN7Display16setPixelInBufferEhh12DisplayColor+0x90>
    
    uint16_t index = x + (y / 8) * WIDTH;
 8005b2e:	7afb      	ldrb	r3, [r7, #11]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	7abb      	ldrb	r3, [r7, #10]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	82fb      	strh	r3, [r7, #22]
    uint8_t bit = y % 8;
 8005b42:	7abb      	ldrb	r3, [r7, #10]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	757b      	strb	r3, [r7, #21]
    
    if (color == DisplayColor::WHITE) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <_ZN7Display16setPixelInBufferEhh12DisplayColor+0x6c>
        buffer[index] |= (1 << bit);
 8005b50:	8afb      	ldrh	r3, [r7, #22]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	5cd3      	ldrb	r3, [r2, r3]
 8005b56:	b25a      	sxtb	r2, r3
 8005b58:	7d7b      	ldrb	r3, [r7, #21]
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b25a      	sxtb	r2, r3
 8005b66:	8afb      	ldrh	r3, [r7, #22]
 8005b68:	b2d1      	uxtb	r1, r2
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	54d1      	strb	r1, [r2, r3]
 8005b6e:	e012      	b.n	8005b96 <_ZN7Display16setPixelInBufferEhh12DisplayColor+0x92>
    } else {
        buffer[index] &= ~(1 << bit);
 8005b70:	8afb      	ldrh	r3, [r7, #22]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
 8005b76:	b25a      	sxtb	r2, r3
 8005b78:	7d7b      	ldrb	r3, [r7, #21]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	4013      	ands	r3, r2
 8005b88:	b25a      	sxtb	r2, r3
 8005b8a:	8afb      	ldrh	r3, [r7, #22]
 8005b8c:	b2d1      	uxtb	r1, r2
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	54d1      	strb	r1, [r2, r3]
 8005b92:	e000      	b.n	8005b96 <_ZN7Display16setPixelInBufferEhh12DisplayColor+0x92>
    if (!isPixelInBounds(x, y)) return;
 8005b94:	bf00      	nop
    }
}
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <_ZN8Keyboard11getInstanceEv>:

// Внешние переменные из HAL
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart6;

Keyboard& Keyboard::getInstance() {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
    static Keyboard instance;
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <_ZN8Keyboard11getInstanceEv+0x44>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f3bf 8f5b 	dmb	ish
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <_ZN8Keyboard11getInstanceEv+0x3c>
 8005bbc:	4808      	ldr	r0, [pc, #32]	; (8005be0 <_ZN8Keyboard11getInstanceEv+0x44>)
 8005bbe:	f005 ffa3 	bl	800bb08 <__cxa_guard_acquire>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <_ZN8Keyboard11getInstanceEv+0x3c>
 8005bd2:	4803      	ldr	r0, [pc, #12]	; (8005be0 <_ZN8Keyboard11getInstanceEv+0x44>)
 8005bd4:	f005 ffa4 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <_ZN8Keyboard11getInstanceEv+0x48>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200007c8 	.word	0x200007c8
 8005be4:	20000770 	.word	0x20000770

08005be8 <_ZN8Keyboard4initEv>:

bool Keyboard::init() {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
    // Инициализация состояний
    for (int i = 0; i < 13; i++) {
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0c      	cmp	r3, #12
 8005bf8:	dc15      	bgt.n	8005c26 <_ZN8Keyboard4initEv+0x3e>
        keyStates[i] = false;
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
        prevKeyStates[i] = false;
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	330d      	adds	r3, #13
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
        keyPressTime[i] = 0;
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3306      	adds	r3, #6
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < 13; i++) {
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e7e6      	b.n	8005bf4 <_ZN8Keyboard4initEv+0xc>
    }
    lastScanTime = 0;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	651a      	str	r2, [r3, #80]	; 0x50
    callback = nullptr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54
    
    // Инициализация PCA9538
    uint8_t buf = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	72fb      	strb	r3, [r7, #11]
    
    // Настройка полярности (не инвертировать)
    if (PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf) != HAL_OK) {
 8005c36:	f107 030b 	add.w	r3, r7, #11
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	20e2      	movs	r0, #226	; 0xe2
 8005c40:	f7fe feae 	bl	80049a0 <PCA9538_Write_Register>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf14      	ite	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2300      	moveq	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <_ZN8Keyboard4initEv+0x70>
        return false;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e027      	b.n	8005ca8 <_ZN8Keyboard4initEv+0xc0>
    }
    
    // Настройка выходного порта (все выходы в 0)
    if (PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf) != HAL_OK) {
 8005c58:	f107 030b 	add.w	r3, r7, #11
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2101      	movs	r1, #1
 8005c60:	20e2      	movs	r0, #226	; 0xe2
 8005c62:	f7fe fe9d 	bl	80049a0 <PCA9538_Write_Register>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <_ZN8Keyboard4initEv+0x92>
        return false;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e016      	b.n	8005ca8 <_ZN8Keyboard4initEv+0xc0>
    }
    
    // Настройка конфигурации портов (все как входы)
    uint8_t config = 0xFF; // Все пины как входы
 8005c7a:	23ff      	movs	r3, #255	; 0xff
 8005c7c:	72bb      	strb	r3, [r7, #10]
    if (PCA9538_Write_Register(KBRD_ADDR, CONFIG, &config) != HAL_OK) {
 8005c7e:	f107 030a 	add.w	r3, r7, #10
 8005c82:	461a      	mov	r2, r3
 8005c84:	2103      	movs	r1, #3
 8005c86:	20e2      	movs	r0, #226	; 0xe2
 8005c88:	f7fe fe8a 	bl	80049a0 <PCA9538_Write_Register>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <_ZN8Keyboard4initEv+0xb8>
        return false;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e003      	b.n	8005ca8 <_ZN8Keyboard4initEv+0xc0>
    }
    
    // Небольшая задержка для стабилизации
    HAL_Delay(10);
 8005ca0:	200a      	movs	r0, #10
 8005ca2:	f001 fdef 	bl	8007884 <HAL_Delay>
    return true;
 8005ca6:	2301      	movs	r3, #1
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZN8Keyboard4scanEv>:

void Keyboard::scan() {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8005cb8:	f001 fdd8 	bl	800786c <HAL_GetTick>
 8005cbc:	6178      	str	r0, [r7, #20]
    
    // Проверяем, прошло ли достаточно времени с последнего сканирования
    if (currentTime - lastScanTime < DEBOUNCE_TIME_MS) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b13      	cmp	r3, #19
 8005cc8:	f240 813e 	bls.w	8005f48 <_ZN8Keyboard4scanEv+0x298>
        return;
    }
    
    lastScanTime = currentTime;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50
    
    // Сканируем все строки
    for (uint8_t row = 0; row < 4; row++) {
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d871      	bhi.n	8005dc0 <_ZN8Keyboard4scanEv+0x110>
        uint8_t rowMask;
        switch (row) {
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d865      	bhi.n	8005dae <_ZN8Keyboard4scanEv+0xfe>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <_ZN8Keyboard4scanEv+0x38>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005cff 	.word	0x08005cff
 8005cf0:	08005d05 	.word	0x08005d05
 8005cf4:	08005d0b 	.word	0x08005d0b
            case 0: rowMask = ROW1; break;
 8005cf8:	23fe      	movs	r3, #254	; 0xfe
 8005cfa:	737b      	strb	r3, [r7, #13]
 8005cfc:	e008      	b.n	8005d10 <_ZN8Keyboard4scanEv+0x60>
            case 1: rowMask = ROW2; break;
 8005cfe:	23fd      	movs	r3, #253	; 0xfd
 8005d00:	737b      	strb	r3, [r7, #13]
 8005d02:	e005      	b.n	8005d10 <_ZN8Keyboard4scanEv+0x60>
            case 2: rowMask = ROW3; break;
 8005d04:	23fb      	movs	r3, #251	; 0xfb
 8005d06:	737b      	strb	r3, [r7, #13]
 8005d08:	e002      	b.n	8005d10 <_ZN8Keyboard4scanEv+0x60>
            case 3: rowMask = ROW4; break;
 8005d0a:	23f7      	movs	r3, #247	; 0xf7
 8005d0c:	737b      	strb	r3, [r7, #13]
 8005d0e:	bf00      	nop
            default: continue;
        }
        
        // Настраиваем строку как выход
        if (PCA9538_Write_Register(KBRD_ADDR, CONFIG, &rowMask) != HAL_OK) {
 8005d10:	f107 030d 	add.w	r3, r7, #13
 8005d14:	461a      	mov	r2, r3
 8005d16:	2103      	movs	r1, #3
 8005d18:	20e2      	movs	r0, #226	; 0xe2
 8005d1a:	f7fe fe41 	bl	80049a0 <PCA9538_Write_Register>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d141      	bne.n	8005db2 <_ZN8Keyboard4scanEv+0x102>
            continue;
        }
        
        // Небольшая задержка для стабилизации
        HAL_Delay(1);
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f001 fda8 	bl	8007884 <HAL_Delay>
        
        // Читаем состояние столбцов
        uint8_t colData;
        if (PCA9538_Read_Inputs(KBRD_ADDR, &colData) != HAL_OK) {
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	4619      	mov	r1, r3
 8005d3a:	20e2      	movs	r0, #226	; 0xe2
 8005d3c:	f7fe fe50 	bl	80049e0 <PCA9538_Read_Inputs>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d132      	bne.n	8005db6 <_ZN8Keyboard4scanEv+0x106>
            continue;
        }
        
        // Проверяем каждый столбец
        uint8_t kbd_in = colData & 0x70;
 8005d50:	7b3b      	ldrb	r3, [r7, #12]
 8005d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d56:	74fb      	strb	r3, [r7, #19]
        if (kbd_in != 0x70) {
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b70      	cmp	r3, #112	; 0x70
 8005d5c:	d02c      	beq.n	8005db8 <_ZN8Keyboard4scanEv+0x108>
            // Определяем нажатые клавиши
            for (uint8_t col = 0; col < 3; col++) {
 8005d5e:	2300      	movs	r3, #0
 8005d60:	77bb      	strb	r3, [r7, #30]
 8005d62:	7fbb      	ldrb	r3, [r7, #30]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d827      	bhi.n	8005db8 <_ZN8Keyboard4scanEv+0x108>
                uint8_t colMask = 0x10 << col;
 8005d68:	7fbb      	ldrb	r3, [r7, #30]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	74bb      	strb	r3, [r7, #18]
                if (!(kbd_in & colMask)) {
 8005d72:	7cfa      	ldrb	r2, [r7, #19]
 8005d74:	7cbb      	ldrb	r3, [r7, #18]
 8005d76:	4013      	ands	r3, r2
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d113      	bne.n	8005da6 <_ZN8Keyboard4scanEv+0xf6>
                    uint8_t keyCode = getKeyCode(row, col);
 8005d7e:	7fba      	ldrb	r2, [r7, #30]
 8005d80:	7ffb      	ldrb	r3, [r7, #31]
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8f1 	bl	8005f6c <_ZN8Keyboard10getKeyCodeEhh>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	747b      	strb	r3, [r7, #17]
                    if (keyCode > 0 && keyCode <= 12) {
 8005d8e:	7c7b      	ldrb	r3, [r7, #17]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <_ZN8Keyboard4scanEv+0xf6>
 8005d94:	7c7b      	ldrb	r3, [r7, #17]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d805      	bhi.n	8005da6 <_ZN8Keyboard4scanEv+0xf6>
                        processKeyEvent(keyCode, true);
 8005d9a:	7c7b      	ldrb	r3, [r7, #17]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f91b 	bl	8005fdc <_ZN8Keyboard15processKeyEventEhb>
            for (uint8_t col = 0; col < 3; col++) {
 8005da6:	7fbb      	ldrb	r3, [r7, #30]
 8005da8:	3301      	adds	r3, #1
 8005daa:	77bb      	strb	r3, [r7, #30]
 8005dac:	e7d9      	b.n	8005d62 <_ZN8Keyboard4scanEv+0xb2>
            default: continue;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <_ZN8Keyboard4scanEv+0x108>
            continue;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <_ZN8Keyboard4scanEv+0x108>
            continue;
 8005db6:	bf00      	nop
    for (uint8_t row = 0; row < 4; row++) {
 8005db8:	7ffb      	ldrb	r3, [r7, #31]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e78a      	b.n	8005cd6 <_ZN8Keyboard4scanEv+0x26>
            }
        }
    }
    
    // Проверяем отпущенные клавиши
    for (uint8_t i = 1; i <= 12; i++) {
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	777b      	strb	r3, [r7, #29]
 8005dc4:	7f7b      	ldrb	r3, [r7, #29]
 8005dc6:	2b0c      	cmp	r3, #12
 8005dc8:	d817      	bhi.n	8005dfa <_ZN8Keyboard4scanEv+0x14a>
        if (prevKeyStates[i] && !keyStates[i]) {
 8005dca:	7f7b      	ldrb	r3, [r7, #29]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	7b5b      	ldrb	r3, [r3, #13]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <_ZN8Keyboard4scanEv+0x142>
 8005dd6:	7f7b      	ldrb	r3, [r7, #29]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	5cd3      	ldrb	r3, [r2, r3]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <_ZN8Keyboard4scanEv+0x142>
            processKeyEvent(i, false);
 8005de6:	7f7b      	ldrb	r3, [r7, #29]
 8005de8:	2200      	movs	r2, #0
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8f5 	bl	8005fdc <_ZN8Keyboard15processKeyEventEhb>
    for (uint8_t i = 1; i <= 12; i++) {
 8005df2:	7f7b      	ldrb	r3, [r7, #29]
 8005df4:	3301      	adds	r3, #1
 8005df6:	777b      	strb	r3, [r7, #29]
 8005df8:	e7e4      	b.n	8005dc4 <_ZN8Keyboard4scanEv+0x114>
        }
    }
    
    // Обновляем предыдущие состояния
    for (uint8_t i = 1; i <= 12; i++) {
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	773b      	strb	r3, [r7, #28]
 8005dfe:	7f3b      	ldrb	r3, [r7, #28]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d80b      	bhi.n	8005e1c <_ZN8Keyboard4scanEv+0x16c>
        prevKeyStates[i] = keyStates[i];
 8005e04:	7f3a      	ldrb	r2, [r7, #28]
 8005e06:	7f3b      	ldrb	r3, [r7, #28]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	5c89      	ldrb	r1, [r1, r2]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	460a      	mov	r2, r1
 8005e12:	735a      	strb	r2, [r3, #13]
    for (uint8_t i = 1; i <= 12; i++) {
 8005e14:	7f3b      	ldrb	r3, [r7, #28]
 8005e16:	3301      	adds	r3, #1
 8005e18:	773b      	strb	r3, [r7, #28]
 8005e1a:	e7f0      	b.n	8005dfe <_ZN8Keyboard4scanEv+0x14e>
    }
    
    // Дополнительная проверка: если клавиша была нажата, но сейчас не нажата - отпускаем
    for (uint8_t i = 1; i <= 12; i++) {
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	76fb      	strb	r3, [r7, #27]
 8005e20:	7efb      	ldrb	r3, [r7, #27]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	f200 8091 	bhi.w	8005f4a <_ZN8Keyboard4scanEv+0x29a>
        if (keyStates[i]) {
 8005e28:	7efb      	ldrb	r3, [r7, #27]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	5cd3      	ldrb	r3, [r2, r3]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8086 	beq.w	8005f40 <_ZN8Keyboard4scanEv+0x290>
            // Проверяем, действительно ли клавиша все еще нажата
            bool stillPressed = false;
 8005e34:	2300      	movs	r3, #0
 8005e36:	76bb      	strb	r3, [r7, #26]
            for (uint8_t row = 0; row < 4; row++) {
 8005e38:	2300      	movs	r3, #0
 8005e3a:	767b      	strb	r3, [r7, #25]
 8005e3c:	7e7b      	ldrb	r3, [r7, #25]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d86e      	bhi.n	8005f20 <_ZN8Keyboard4scanEv+0x270>
                uint8_t rowMask;
                switch (row) {
 8005e42:	7e7b      	ldrb	r3, [r7, #25]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d865      	bhi.n	8005f14 <_ZN8Keyboard4scanEv+0x264>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <_ZN8Keyboard4scanEv+0x1a0>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e67 	.word	0x08005e67
 8005e58:	08005e6d 	.word	0x08005e6d
 8005e5c:	08005e73 	.word	0x08005e73
                    case 0: rowMask = ROW1; break;
 8005e60:	23fe      	movs	r3, #254	; 0xfe
 8005e62:	72fb      	strb	r3, [r7, #11]
 8005e64:	e008      	b.n	8005e78 <_ZN8Keyboard4scanEv+0x1c8>
                    case 1: rowMask = ROW2; break;
 8005e66:	23fd      	movs	r3, #253	; 0xfd
 8005e68:	72fb      	strb	r3, [r7, #11]
 8005e6a:	e005      	b.n	8005e78 <_ZN8Keyboard4scanEv+0x1c8>
                    case 2: rowMask = ROW3; break;
 8005e6c:	23fb      	movs	r3, #251	; 0xfb
 8005e6e:	72fb      	strb	r3, [r7, #11]
 8005e70:	e002      	b.n	8005e78 <_ZN8Keyboard4scanEv+0x1c8>
                    case 3: rowMask = ROW4; break;
 8005e72:	23f7      	movs	r3, #247	; 0xf7
 8005e74:	72fb      	strb	r3, [r7, #11]
 8005e76:	bf00      	nop
                    default: continue;
                }
                
                if (PCA9538_Write_Register(KBRD_ADDR, CONFIG, &rowMask) == HAL_OK) {
 8005e78:	f107 030b 	add.w	r3, r7, #11
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2103      	movs	r1, #3
 8005e80:	20e2      	movs	r0, #226	; 0xe2
 8005e82:	f7fe fd8d 	bl	80049a0 <PCA9538_Write_Register>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d03a      	beq.n	8005f0c <_ZN8Keyboard4scanEv+0x25c>
                    HAL_Delay(1);
 8005e96:	2001      	movs	r0, #1
 8005e98:	f001 fcf4 	bl	8007884 <HAL_Delay>
                    uint8_t colData;
                    if (PCA9538_Read_Inputs(KBRD_ADDR, &colData) == HAL_OK) {
 8005e9c:	f107 030a 	add.w	r3, r7, #10
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	20e2      	movs	r0, #226	; 0xe2
 8005ea4:	f7fe fd9c 	bl	80049e0 <PCA9538_Read_Inputs>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d029      	beq.n	8005f0c <_ZN8Keyboard4scanEv+0x25c>
                        uint8_t kbd_in = colData & 0x70;
 8005eb8:	7abb      	ldrb	r3, [r7, #10]
 8005eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ebe:	743b      	strb	r3, [r7, #16]
                        if (kbd_in != 0x70) {
 8005ec0:	7c3b      	ldrb	r3, [r7, #16]
 8005ec2:	2b70      	cmp	r3, #112	; 0x70
 8005ec4:	d022      	beq.n	8005f0c <_ZN8Keyboard4scanEv+0x25c>
                            for (uint8_t col = 0; col < 3; col++) {
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	763b      	strb	r3, [r7, #24]
 8005eca:	7e3b      	ldrb	r3, [r7, #24]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d81d      	bhi.n	8005f0c <_ZN8Keyboard4scanEv+0x25c>
                                uint8_t colMask = 0x10 << col;
 8005ed0:	7e3b      	ldrb	r3, [r7, #24]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	73fb      	strb	r3, [r7, #15]
                                if (!(kbd_in & colMask)) {
 8005eda:	7c3a      	ldrb	r2, [r7, #16]
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10e      	bne.n	8005f04 <_ZN8Keyboard4scanEv+0x254>
                                    uint8_t keyCode = getKeyCode(row, col);
 8005ee6:	7e3a      	ldrb	r2, [r7, #24]
 8005ee8:	7e7b      	ldrb	r3, [r7, #25]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f83d 	bl	8005f6c <_ZN8Keyboard10getKeyCodeEhh>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73bb      	strb	r3, [r7, #14]
                                    if (keyCode == i) {
 8005ef6:	7bba      	ldrb	r2, [r7, #14]
 8005ef8:	7efb      	ldrb	r3, [r7, #27]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d102      	bne.n	8005f04 <_ZN8Keyboard4scanEv+0x254>
                                        stillPressed = true;
 8005efe:	2301      	movs	r3, #1
 8005f00:	76bb      	strb	r3, [r7, #26]
                                        break;
 8005f02:	e003      	b.n	8005f0c <_ZN8Keyboard4scanEv+0x25c>
                            for (uint8_t col = 0; col < 3; col++) {
 8005f04:	7e3b      	ldrb	r3, [r7, #24]
 8005f06:	3301      	adds	r3, #1
 8005f08:	763b      	strb	r3, [r7, #24]
 8005f0a:	e7de      	b.n	8005eca <_ZN8Keyboard4scanEv+0x21a>
                                }
                            }
                        }
                    }
                }
                if (stillPressed) break;
 8005f0c:	7ebb      	ldrb	r3, [r7, #26]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <_ZN8Keyboard4scanEv+0x26e>
 8005f12:	e000      	b.n	8005f16 <_ZN8Keyboard4scanEv+0x266>
                    default: continue;
 8005f14:	bf00      	nop
            for (uint8_t row = 0; row < 4; row++) {
 8005f16:	7e7b      	ldrb	r3, [r7, #25]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	767b      	strb	r3, [r7, #25]
 8005f1c:	e78e      	b.n	8005e3c <_ZN8Keyboard4scanEv+0x18c>
                if (stillPressed) break;
 8005f1e:	bf00      	nop
            }
            
            if (!stillPressed) {
 8005f20:	7ebb      	ldrb	r3, [r7, #26]
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <_ZN8Keyboard4scanEv+0x290>
                // Клавиша больше не нажата - отпускаем
                keyStates[i] = false;
 8005f2c:	7efb      	ldrb	r3, [r7, #27]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	54d1      	strb	r1, [r2, r3]
                processKeyEvent(i, false);
 8005f34:	7efb      	ldrb	r3, [r7, #27]
 8005f36:	2200      	movs	r2, #0
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f84e 	bl	8005fdc <_ZN8Keyboard15processKeyEventEhb>
    for (uint8_t i = 1; i <= 12; i++) {
 8005f40:	7efb      	ldrb	r3, [r7, #27]
 8005f42:	3301      	adds	r3, #1
 8005f44:	76fb      	strb	r3, [r7, #27]
 8005f46:	e76b      	b.n	8005e20 <_ZN8Keyboard4scanEv+0x170>
        return;
 8005f48:	bf00      	nop
            }
        }
    }
}
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN8Keyboard11setCallbackEPFvh8KeyEventE>:

void Keyboard::setCallback(KeyboardCallback callback) {
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
    this->callback = callback;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <_ZN8Keyboard10getKeyCodeEhh>:
    }
    
    return (colData & 0x70) != 0x70;
}

uint8_t Keyboard::getKeyCode(uint8_t row, uint8_t col) {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	70bb      	strb	r3, [r7, #2]
    // Строка 0: 1, 2, 3
    // Строка 1: 4, 5, 6  
    // Строка 2: 7, 8, 9
    // Строка 3: 11, 10, 12
    
    if (row >= 4 || col >= 3) {
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d802      	bhi.n	8005f88 <_ZN8Keyboard10getKeyCodeEhh+0x1c>
 8005f82:	78bb      	ldrb	r3, [r7, #2]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <_ZN8Keyboard10getKeyCodeEhh+0x20>
        return 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e021      	b.n	8005fd0 <_ZN8Keyboard10getKeyCodeEhh+0x64>
    }
    
    // Обычные кнопки для первых трех строк
    if (row < 3) {
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d80a      	bhi.n	8005fa8 <_ZN8Keyboard10getKeyCodeEhh+0x3c>
        return row * 3 + col + 1;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	461a      	mov	r2, r3
 8005f96:	0052      	lsls	r2, r2, #1
 8005f98:	4413      	add	r3, r2
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	78bb      	ldrb	r3, [r7, #2]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e013      	b.n	8005fd0 <_ZN8Keyboard10getKeyCodeEhh+0x64>
    }
    
    // Специальные кнопки в последней строке
    if (row == 3) {
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d10f      	bne.n	8005fce <_ZN8Keyboard10getKeyCodeEhh+0x62>
        switch (col) {
 8005fae:	78bb      	ldrb	r3, [r7, #2]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d00a      	beq.n	8005fca <_ZN8Keyboard10getKeyCodeEhh+0x5e>
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	dc0a      	bgt.n	8005fce <_ZN8Keyboard10getKeyCodeEhh+0x62>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <_ZN8Keyboard10getKeyCodeEhh+0x56>
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d002      	beq.n	8005fc6 <_ZN8Keyboard10getKeyCodeEhh+0x5a>
 8005fc0:	e005      	b.n	8005fce <_ZN8Keyboard10getKeyCodeEhh+0x62>
            case 0: return KEY_11;     // 11
 8005fc2:	230b      	movs	r3, #11
 8005fc4:	e004      	b.n	8005fd0 <_ZN8Keyboard10getKeyCodeEhh+0x64>
            case 1: return KEY_10;     // 10  
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e002      	b.n	8005fd0 <_ZN8Keyboard10getKeyCodeEhh+0x64>
            case 2: return KEY_12;     // 12
 8005fca:	230c      	movs	r3, #12
 8005fcc:	e000      	b.n	8005fd0 <_ZN8Keyboard10getKeyCodeEhh+0x64>
        }
    }
    
    return 0;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN8Keyboard15processKeyEventEhb>:

void Keyboard::processKeyEvent(uint8_t keyCode, bool pressed) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	70bb      	strb	r3, [r7, #2]
    uint32_t currentTime = HAL_GetTick();
 8005fec:	f001 fc3e 	bl	800786c <HAL_GetTick>
 8005ff0:	60f8      	str	r0, [r7, #12]
    
    if (pressed) {
 8005ff2:	78bb      	ldrb	r3, [r7, #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d044      	beq.n	8006082 <_ZN8Keyboard15processKeyEventEhb+0xa6>
        if (!keyStates[keyCode]) {
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
 8005ffe:	f083 0301 	eor.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d015      	beq.n	8006034 <_ZN8Keyboard15processKeyEventEhb+0x58>
            // Клавиша только что нажата
            keyStates[keyCode] = true;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	2101      	movs	r1, #1
 800600e:	54d1      	strb	r1, [r2, r3]
            keyPressTime[keyCode] = currentTime;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	3306      	adds	r3, #6
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]
            
            if (callback) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	2b00      	cmp	r3, #0
 8006024:	d042      	beq.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
                callback(keyCode, KeyEvent::PRESS);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	78fa      	ldrb	r2, [r7, #3]
 800602c:	2100      	movs	r1, #0
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
        
        if (callback) {
            callback(keyCode, KeyEvent::RELEASE);
        }
    }
}
 8006032:	e03b      	b.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
            if (currentTime - keyPressTime[keyCode] >= LONG_PRESS_TIME_MS && 
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	3306      	adds	r3, #6
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006048:	d330      	bcc.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
                keyPressTime[keyCode] != 0xFFFFFFFF) { // 0xFFFFFFFF = флаг "LONG_PRESS уже отправлен"
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	3306      	adds	r3, #6
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	685b      	ldr	r3, [r3, #4]
            if (currentTime - keyPressTime[keyCode] >= LONG_PRESS_TIME_MS && 
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d027      	beq.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
                if (callback) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <_ZN8Keyboard15processKeyEventEhb+0x94>
                    callback(keyCode, KeyEvent::LONG_PRESS);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	78fa      	ldrb	r2, [r7, #3]
 800606a:	2102      	movs	r1, #2
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
                keyPressTime[keyCode] = 0xFFFFFFFF;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	3306      	adds	r3, #6
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	f04f 32ff 	mov.w	r2, #4294967295
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	e014      	b.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
        keyStates[keyCode] = false;
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	2100      	movs	r1, #0
 8006088:	54d1      	strb	r1, [r2, r3]
        keyPressTime[keyCode] = 0; // Сбрасываем флаг
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	3306      	adds	r3, #6
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]
        if (callback) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <_ZN8Keyboard15processKeyEventEhb+0xd0>
            callback(keyCode, KeyEvent::RELEASE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	2101      	movs	r1, #1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZN4ADSRC1Ettht>:
    uint16_t attack;   // Время атаки в мс
    uint16_t decay;    // Время спада в мс
    uint8_t sustain;   // Уровень сустейна (0-10)
    uint16_t release;  // Время релиза в мс
    
    ADSR(uint16_t a = 50, uint16_t d = 100, uint8_t s = 7, uint16_t r = 200)
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
        : attack(a), decay(d), sustain(s), release(r) {}
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	897a      	ldrh	r2, [r7, #10]
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	893a      	ldrh	r2, [r7, #8]
 80060d8:	805a      	strh	r2, [r3, #2]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	79fa      	ldrb	r2, [r7, #7]
 80060de:	711a      	strb	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8b3a      	ldrh	r2, [r7, #24]
 80060e4:	80da      	strh	r2, [r3, #6]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_ZN5VoiceC1Ev>:
    uint32_t releaseTime;  // Время начала релиза
    bool active;
    bool released;
    ADSR adsr;
    
    Voice() : frequency(0), velocity(0), channel(0), startTime(0), 
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
              releaseTime(0), active(false), released(false), adsr() {}
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	709a      	strb	r2, [r3, #2]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	70da      	strb	r2, [r3, #3]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	731a      	strb	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	735a      	strb	r2, [r3, #13]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f103 000e 	add.w	r0, r3, #14
 800612c:	23c8      	movs	r3, #200	; 0xc8
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2307      	movs	r3, #7
 8006132:	2264      	movs	r2, #100	; 0x64
 8006134:	2132      	movs	r1, #50	; 0x32
 8006136:	f7ff ffbd 	bl	80060b4 <_ZN4ADSRC1Ettht>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <_ZN9DrumSoundC1Etthb>:
    uint16_t frequency;
    uint16_t duration;     // Длительность в мс
    uint8_t volume;
    bool isNoise;          // true для шумовых звуков
    
    DrumSound(uint16_t freq = 0, uint16_t dur = 100, uint8_t vol = 10, bool noise = false)
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
        : frequency(freq), duration(dur), volume(vol), isNoise(noise) {}
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	897a      	ldrh	r2, [r7, #10]
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	893a      	ldrh	r2, [r7, #8]
 8006168:	805a      	strh	r2, [r3, #2]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	79fa      	ldrb	r2, [r7, #7]
 800616e:	711a      	strb	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	7e3a      	ldrb	r2, [r7, #24]
 8006174:	715a      	strb	r2, [r3, #5]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <_ZN11SynthesizerC1Ev>:
    static constexpr uint8_t MIDI_C4 = 60;
    static constexpr uint8_t MIDI_C5 = 72;
    static constexpr uint8_t MIDI_C6 = 84;
    
private:
    Synthesizer() = default;
 8006184:	b5b0      	push	{r4, r5, r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2407      	movs	r4, #7
 8006190:	461d      	mov	r5, r3
 8006192:	2c00      	cmp	r4, #0
 8006194:	db05      	blt.n	80061a2 <_ZN11SynthesizerC1Ev+0x1e>
 8006196:	4628      	mov	r0, r5
 8006198:	f7ff ffac 	bl	80060f4 <_ZN5VoiceC1Ev>
 800619c:	3518      	adds	r5, #24
 800619e:	3c01      	subs	r4, #1
 80061a0:	e7f7      	b.n	8006192 <_ZN11SynthesizerC1Ev+0xe>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdb0      	pop	{r4, r5, r7, pc}

080061ac <_ZN11Synthesizer11getInstanceEv>:

// Внешние переменные из HAL
extern TIM_HandleTypeDef htim1;

// Реализация Synthesizer
Synthesizer& Synthesizer::getInstance() {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
    static Synthesizer instance;
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <_ZN11Synthesizer11getInstanceEv+0x48>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f3bf 8f5b 	dmb	ish
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d010      	beq.n	80061ee <_ZN11Synthesizer11getInstanceEv+0x42>
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <_ZN11Synthesizer11getInstanceEv+0x48>)
 80061ce:	f005 fc9b 	bl	800bb08 <__cxa_guard_acquire>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <_ZN11Synthesizer11getInstanceEv+0x42>
 80061e2:	4805      	ldr	r0, [pc, #20]	; (80061f8 <_ZN11Synthesizer11getInstanceEv+0x4c>)
 80061e4:	f7ff ffce 	bl	8006184 <_ZN11SynthesizerC1Ev>
 80061e8:	4802      	ldr	r0, [pc, #8]	; (80061f4 <_ZN11Synthesizer11getInstanceEv+0x48>)
 80061ea:	f005 fc99 	bl	800bb20 <__cxa_guard_release>
    return instance;
 80061ee:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <_ZN11Synthesizer11getInstanceEv+0x4c>)
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200008a0 	.word	0x200008a0
 80061f8:	200007cc 	.word	0x200007cc

080061fc <_ZN11Synthesizer4initEv>:

bool Synthesizer::init() {
 80061fc:	b5b0      	push	{r4, r5, r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    // Инициализация голосов
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800620a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620e:	2b07      	cmp	r3, #7
 8006210:	d81e      	bhi.n	8006250 <_ZN11Synthesizer4initEv+0x54>
        voices[i] = Voice();
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff ff6c 	bl	80060f4 <_ZN5VoiceC1Ev>
 800621c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4413      	add	r3, r2
 800622c:	461d      	mov	r5, r3
 800622e:	f107 040c 	add.w	r4, r7, #12
 8006232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006234:	6028      	str	r0, [r5, #0]
 8006236:	6069      	str	r1, [r5, #4]
 8006238:	60aa      	str	r2, [r5, #8]
 800623a:	60eb      	str	r3, [r5, #12]
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	6128      	str	r0, [r5, #16]
 8006240:	88a3      	ldrh	r3, [r4, #4]
 8006242:	82ab      	strh	r3, [r5, #20]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006248:	3301      	adds	r3, #1
 800624a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800624e:	e7dc      	b.n	800620a <_ZN11Synthesizer4initEv+0xe>
    }
    
    // Инициализация каналов
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800625a:	2b0f      	cmp	r3, #15
 800625c:	d80c      	bhi.n	8006278 <_ZN11Synthesizer4initEv+0x7c>
        channelVolumes[i] = MAX_VOLUME;
 800625e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	220a      	movs	r2, #10
 8006268:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    for (uint8_t i = 0; i < MAX_CHANNELS; i++) {
 800626c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006270:	3301      	adds	r3, #1
 8006272:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006276:	e7ee      	b.n	8006256 <_ZN11Synthesizer4initEv+0x5a>
    }
    
    masterVolume = MAX_VOLUME;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	220a      	movs	r2, #10
 800627c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    reverbLevel = 0;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
    chorusLevel = 0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
    
    // Инициализация Buzzer
    Buzzer::getInstance().init();
 8006290:	f7fe fe96 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 8006294:	4603      	mov	r3, r0
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe feba 	bl	8005010 <_ZN6Buzzer4initEv>
    
    return true;
 800629c:	2301      	movs	r3, #1
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080062a8 <_ZN11Synthesizer6noteOnEhhh>:

void Synthesizer::noteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
 80062a8:	b5b0      	push	{r4, r5, r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af04      	add	r7, sp, #16
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	70fb      	strb	r3, [r7, #3]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70bb      	strb	r3, [r7, #2]
 80062be:	4613      	mov	r3, r2
 80062c0:	707b      	strb	r3, [r7, #1]
    if (channel >= MAX_CHANNELS || note > 127) return;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	2b0f      	cmp	r3, #15
 80062c6:	f200 808f 	bhi.w	80063e8 <_ZN11Synthesizer6noteOnEhhh+0x140>
 80062ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f2c0 808a 	blt.w	80063e8 <_ZN11Synthesizer6noteOnEhhh+0x140>
    
    // АГРЕССИВНО: Отключаем ВСЕ старые голоса при новой ноте
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b07      	cmp	r3, #7
 80062dc:	d81f      	bhi.n	800631e <_ZN11Synthesizer6noteOnEhhh+0x76>
        if (voices[i].active) {
 80062de:	7dfa      	ldrb	r2, [r7, #23]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	440b      	add	r3, r1
 80062ec:	330c      	adds	r3, #12
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <_ZN11Synthesizer6noteOnEhhh+0x6e>
            voices[i].active = false;
 80062f4:	7dfa      	ldrb	r2, [r7, #23]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4413      	add	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	440b      	add	r3, r1
 8006302:	330c      	adds	r3, #12
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
            Uart::getInstance().printf("Stopping old voice %d for new note\n", i);
 8006308:	f000 fcf2 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	461a      	mov	r2, r3
 8006310:	4937      	ldr	r1, [pc, #220]	; (80063f0 <_ZN11Synthesizer6noteOnEhhh+0x148>)
 8006312:	f000 fd76 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
 800631c:	e7dc      	b.n	80062d8 <_ZN11Synthesizer6noteOnEhhh+0x30>
        }
    }
    
    // Используем первый доступный голос
    uint8_t voiceIndex = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	75bb      	strb	r3, [r7, #22]
    
    // Настраиваем голос
    Voice& voice = voices[voiceIndex];
 8006322:	7dba      	ldrb	r2, [r7, #22]
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
    voice.frequency = midiToFrequency(note);
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9de 	bl	80066f8 <_ZNK11Synthesizer15midiToFrequencyEh>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	801a      	strh	r2, [r3, #0]
    voice.velocity = (velocity > MAX_VELOCITY) ? MAX_VELOCITY : velocity;
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	b25b      	sxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	db02      	blt.n	8006352 <_ZN11Synthesizer6noteOnEhhh+0xaa>
 800634c:	1c7b      	adds	r3, r7, #1
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	e000      	b.n	8006354 <_ZN11Synthesizer6noteOnEhhh+0xac>
 8006352:	227f      	movs	r2, #127	; 0x7f
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	709a      	strb	r2, [r3, #2]
    voice.channel = channel;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	70da      	strb	r2, [r3, #3]
    voice.startTime = HAL_GetTick();
 800635e:	f001 fa85 	bl	800786c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]
    voice.releaseTime = 0;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
    voice.active = true;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2201      	movs	r2, #1
 8006372:	731a      	strb	r2, [r3, #12]
    voice.released = false;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2200      	movs	r2, #0
 8006378:	735a      	strb	r2, [r3, #13]
    
    // Применяем настройки ADSR по умолчанию
    voice.adsr = ADSR(50, 100, 7, 200);
 800637a:	f107 0008 	add.w	r0, r7, #8
 800637e:	23c8      	movs	r3, #200	; 0xc8
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	2307      	movs	r3, #7
 8006384:	2264      	movs	r2, #100	; 0x64
 8006386:	2132      	movs	r1, #50	; 0x32
 8006388:	f7ff fe94 	bl	80060b4 <_ZN4ADSRC1Ettht>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f103 020e 	add.w	r2, r3, #14
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	cb03      	ldmia	r3!, {r0, r1}
 8006398:	6010      	str	r0, [r2, #0]
 800639a:	6051      	str	r1, [r2, #4]
    
    // Отладочный вывод
    Uart::getInstance().printf("MIDI: noteOn ch=%d, note=%d, freq=%d, vel=%d, voice=%d\n", 
 800639c:	f000 fca8 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	78b9      	ldrb	r1, [r7, #2]
                              channel, note, voice.frequency, voice.velocity, voiceIndex);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	881b      	ldrh	r3, [r3, #0]
    Uart::getInstance().printf("MIDI: noteOn ch=%d, note=%d, freq=%d, vel=%d, voice=%d\n", 
 80063a8:	461c      	mov	r4, r3
                              channel, note, voice.frequency, voice.velocity, voiceIndex);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	789b      	ldrb	r3, [r3, #2]
    Uart::getInstance().printf("MIDI: noteOn ch=%d, note=%d, freq=%d, vel=%d, voice=%d\n", 
 80063ae:	461d      	mov	r5, r3
 80063b0:	7dbb      	ldrb	r3, [r7, #22]
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	9501      	str	r5, [sp, #4]
 80063b6:	9400      	str	r4, [sp, #0]
 80063b8:	460b      	mov	r3, r1
 80063ba:	490e      	ldr	r1, [pc, #56]	; (80063f4 <_ZN11Synthesizer6noteOnEhhh+0x14c>)
 80063bc:	f000 fd21 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // ПРИНУДИТЕЛЬНО обновляем Buzzer сразу
    Buzzer::getInstance().playNote(0, voice.frequency, voice.velocity);
 80063c0:	f7fe fdfe 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	789b      	ldrb	r3, [r3, #2]
 80063cc:	2100      	movs	r1, #0
 80063ce:	f7fe fe45 	bl	800505c <_ZN6Buzzer8playNoteEhth>
    Uart::getInstance().printf("FORCED Buzzer update: freq=%d, vol=%d\n", voice.frequency, voice.velocity);
 80063d2:	f000 fc8d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	789b      	ldrb	r3, [r3, #2]
 80063e0:	4905      	ldr	r1, [pc, #20]	; (80063f8 <_ZN11Synthesizer6noteOnEhhh+0x150>)
 80063e2:	f000 fd0e 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 80063e6:	e000      	b.n	80063ea <_ZN11Synthesizer6noteOnEhhh+0x142>
    if (channel >= MAX_CHANNELS || note > 127) return;
 80063e8:	bf00      	nop
}
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bdb0      	pop	{r4, r5, r7, pc}
 80063f0:	0800dafc 	.word	0x0800dafc
 80063f4:	0800db20 	.word	0x0800db20
 80063f8:	0800db58 	.word	0x0800db58

080063fc <_ZN11Synthesizer7noteOffEhh>:

void Synthesizer::noteOff(uint8_t channel, uint8_t note) {
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b087      	sub	sp, #28
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
 8006408:	4613      	mov	r3, r2
 800640a:	70bb      	strb	r3, [r7, #2]
    uint8_t voiceIndex = findVoice(channel, note);
 800640c:	78ba      	ldrb	r2, [r7, #2]
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f92e 	bl	8006674 <_ZNK11Synthesizer9findVoiceEhh>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
    if (voiceIndex < MAX_VOICES) {
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b07      	cmp	r3, #7
 8006420:	d820      	bhi.n	8006464 <_ZN11Synthesizer7noteOffEhh+0x68>
        voices[voiceIndex].released = true;
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	440b      	add	r3, r1
 8006430:	330d      	adds	r3, #13
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
        voices[voiceIndex].releaseTime = HAL_GetTick();
 8006436:	7bfc      	ldrb	r4, [r7, #15]
 8006438:	f001 fa18 	bl	800786c <HAL_GetTick>
 800643c:	4601      	mov	r1, r0
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4623      	mov	r3, r4
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	4423      	add	r3, r4
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	3308      	adds	r3, #8
 800644c:	6019      	str	r1, [r3, #0]
        
        Uart::getInstance().printf("MIDI: noteOff ch=%d, note=%d, voice=%d\n", 
 800644e:	f000 fc4f 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	78b9      	ldrb	r1, [r7, #2]
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	460b      	mov	r3, r1
 800645c:	4907      	ldr	r1, [pc, #28]	; (800647c <_ZN11Synthesizer7noteOffEhh+0x80>)
 800645e:	f000 fcd0 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                                  channel, note, voiceIndex);
    } else {
        Uart::getInstance().printf("MIDI: noteOff ch=%d, note=%d - voice not found\n", 
                                  channel, note);
    }
}
 8006462:	e006      	b.n	8006472 <_ZN11Synthesizer7noteOffEhh+0x76>
        Uart::getInstance().printf("MIDI: noteOff ch=%d, note=%d - voice not found\n", 
 8006464:	f000 fc44 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	78bb      	ldrb	r3, [r7, #2]
 800646c:	4904      	ldr	r1, [pc, #16]	; (8006480 <_ZN11Synthesizer7noteOffEhh+0x84>)
 800646e:	f000 fcc8 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	bf00      	nop
 800647c:	0800db80 	.word	0x0800db80
 8006480:	0800dba8 	.word	0x0800dba8

08006484 <_ZN11Synthesizer11allNotesOffEv>:

void Synthesizer::allNotesOff() {
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b07      	cmp	r3, #7
 8006494:	d817      	bhi.n	80064c6 <_ZN11Synthesizer11allNotesOffEv+0x42>
        voices[i].active = false;
 8006496:	7bfa      	ldrb	r2, [r7, #15]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4413      	add	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	440b      	add	r3, r1
 80064a4:	330c      	adds	r3, #12
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
        voices[i].released = false;
 80064aa:	7bfa      	ldrb	r2, [r7, #15]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	440b      	add	r3, r1
 80064b8:	330d      	adds	r3, #13
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	3301      	adds	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	e7e4      	b.n	8006490 <_ZN11Synthesizer11allNotesOffEv+0xc>
    }
    Buzzer::getInstance().stopAll();
 80064c6:	f7fe fd7b 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fe07 	bl	80050e0 <_ZN6Buzzer7stopAllEv>
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <_ZN11Synthesizer8playDrumE10DrumPreseth>:
            voices[i].adsr.release = release;
        }
    }
}

void Synthesizer::playDrum(DrumPreset preset, uint8_t velocity) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	71fb      	strb	r3, [r7, #7]
    DrumSound sound = getDrumPreset(preset);
 80064ea:	f107 0310 	add.w	r3, r7, #16
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fa9a 	bl	8006a2c <_ZNK11Synthesizer13getDrumPresetE10DrumPreset>
    sound.volume = (velocity * MAX_VOLUME) / MAX_VELOCITY;
 80064f8:	79fa      	ldrb	r2, [r7, #7]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4a10      	ldr	r2, [pc, #64]	; (8006544 <_ZN11Synthesizer8playDrumE10DrumPreseth+0x68>)
 8006504:	fb82 1203 	smull	r1, r2, r2, r3
 8006508:	441a      	add	r2, r3
 800650a:	1192      	asrs	r2, r2, #6
 800650c:	17db      	asrs	r3, r3, #31
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	753b      	strb	r3, [r7, #20]
    
    // Отладочный вывод
    Uart::getInstance().printf("Drum: preset %d, freq %d, vol %d, noise %d\n", 
 8006514:	f000 fbec 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
                              (int)preset, sound.frequency, sound.volume, sound.isNoise);
 8006518:	8a3b      	ldrh	r3, [r7, #16]
    Uart::getInstance().printf("Drum: preset %d, freq %d, vol %d, noise %d\n", 
 800651a:	4619      	mov	r1, r3
                              (int)preset, sound.frequency, sound.volume, sound.isNoise);
 800651c:	7d3b      	ldrb	r3, [r7, #20]
 800651e:	7d7a      	ldrb	r2, [r7, #21]
    Uart::getInstance().printf("Drum: preset %d, freq %d, vol %d, noise %d\n", 
 8006520:	9201      	str	r2, [sp, #4]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	460b      	mov	r3, r1
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <_ZN11Synthesizer8playDrumE10DrumPreseth+0x6c>)
 800652a:	f000 fc6a 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    generateDrumSound(sound);
 800652e:	f107 0310 	add.w	r3, r7, #16
 8006532:	4619      	mov	r1, r3
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa23 	bl	8006980 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound>
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	81020409 	.word	0x81020409
 8006548:	0800dbd8 	.word	0x0800dbd8

0800654c <_ZN11Synthesizer6updateEv>:

void Synthesizer::setChorus(uint8_t level) {
    chorusLevel = (level > MAX_VOLUME) ? MAX_VOLUME : level;
}

void Synthesizer::update() {
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    // Обновляем все активные голоса
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b07      	cmp	r3, #7
 800655c:	d819      	bhi.n	8006592 <_ZN11Synthesizer6updateEv+0x46>
        if (voices[i].active) {
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	440b      	add	r3, r1
 800656c:	330c      	adds	r3, #12
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <_ZN11Synthesizer6updateEv+0x3e>
            updateVoice(voices[i]);
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f979 	bl	800687c <_ZN11Synthesizer11updateVoiceER5Voice>
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	3301      	adds	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
 8006590:	e7e2      	b.n	8006558 <_ZN11Synthesizer6updateEv+0xc>
        }
    }
    
    // АГРЕССИВНО: Отключаем старые голоса (старше 500мс)
    uint32_t currentTime = HAL_GetTick();
 8006592:	f001 f96b 	bl	800786c <HAL_GetTick>
 8006596:	60b8      	str	r0, [r7, #8]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006598:	2300      	movs	r3, #0
 800659a:	73bb      	strb	r3, [r7, #14]
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d83a      	bhi.n	8006618 <_ZN11Synthesizer6updateEv+0xcc>
        if (voices[i].active && (currentTime - voices[i].startTime) > 500) {
 80065a2:	7bba      	ldrb	r2, [r7, #14]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	440b      	add	r3, r1
 80065b0:	330c      	adds	r3, #12
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02b      	beq.n	8006610 <_ZN11Synthesizer6updateEv+0xc4>
 80065b8:	7bba      	ldrb	r2, [r7, #14]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	440b      	add	r3, r1
 80065c6:	3304      	adds	r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065d2:	d91d      	bls.n	8006610 <_ZN11Synthesizer6updateEv+0xc4>
            Uart::getInstance().printf("Auto-stopping old voice %d (age=%lu ms)\n", 
 80065d4:	f000 fb8c 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80065d8:	4604      	mov	r4, r0
 80065da:	7bb8      	ldrb	r0, [r7, #14]
                                      i, currentTime - voices[i].startTime);
 80065dc:	7bba      	ldrb	r2, [r7, #14]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	440b      	add	r3, r1
 80065ea:	3304      	adds	r3, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
            Uart::getInstance().printf("Auto-stopping old voice %d (age=%lu ms)\n", 
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4602      	mov	r2, r0
 80065f4:	490c      	ldr	r1, [pc, #48]	; (8006628 <_ZN11Synthesizer6updateEv+0xdc>)
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fc03 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            voices[i].active = false;
 80065fc:	7bba      	ldrb	r2, [r7, #14]
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	330c      	adds	r3, #12
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	3301      	adds	r3, #1
 8006614:	73bb      	strb	r3, [r7, #14]
 8006616:	e7c1      	b.n	800659c <_ZN11Synthesizer6updateEv+0x50>
        }
    }
    
    // Микшируем голоса
    mixVoices();
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f949 	bl	80068b0 <_ZN11Synthesizer9mixVoicesEv>
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bd90      	pop	{r4, r7, pc}
 8006626:	bf00      	nop
 8006628:	0800dc04 	.word	0x0800dc04

0800662c <_ZNK11Synthesizer15getActiveVoicesEv>:

uint8_t Synthesizer::getActiveVoices() const {
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006638:	2300      	movs	r3, #0
 800663a:	73bb      	strb	r3, [r7, #14]
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b07      	cmp	r3, #7
 8006640:	d811      	bhi.n	8006666 <_ZNK11Synthesizer15getActiveVoicesEv+0x3a>
        if (voices[i].active) count++;
 8006642:	7bba      	ldrb	r2, [r7, #14]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	4413      	add	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	440b      	add	r3, r1
 8006650:	330c      	adds	r3, #12
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <_ZNK11Synthesizer15getActiveVoicesEv+0x32>
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	3301      	adds	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	3301      	adds	r3, #1
 8006662:	73bb      	strb	r3, [r7, #14]
 8006664:	e7ea      	b.n	800663c <_ZNK11Synthesizer15getActiveVoicesEv+0x10>
    }
    return count;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <_ZNK11Synthesizer9findVoiceEhh>:
        }
    }
    return MAX_VOICES; // Нет свободных голосов
}

uint8_t Synthesizer::findVoice(uint8_t channel, uint8_t note) const {
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
 8006680:	4613      	mov	r3, r2
 8006682:	70bb      	strb	r3, [r7, #2]
    uint16_t frequency = midiToFrequency(note);
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f835 	bl	80066f8 <_ZNK11Synthesizer15midiToFrequencyEh>
 800668e:	4603      	mov	r3, r0
 8006690:	81bb      	strh	r3, [r7, #12]
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b07      	cmp	r3, #7
 800669a:	d827      	bhi.n	80066ec <_ZNK11Synthesizer9findVoiceEhh+0x78>
        if (voices[i].active && voices[i].channel == channel && voices[i].frequency == frequency) {
 800669c:	7bfa      	ldrb	r2, [r7, #15]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	4413      	add	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	440b      	add	r3, r1
 80066aa:	330c      	adds	r3, #12
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <_ZNK11Synthesizer9findVoiceEhh+0x70>
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	4413      	add	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	440b      	add	r3, r1
 80066c0:	3303      	adds	r3, #3
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10c      	bne.n	80066e4 <_ZNK11Synthesizer9findVoiceEhh+0x70>
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	4413      	add	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	440b      	add	r3, r1
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	89ba      	ldrh	r2, [r7, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d101      	bne.n	80066e4 <_ZNK11Synthesizer9findVoiceEhh+0x70>
            return i;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	e004      	b.n	80066ee <_ZNK11Synthesizer9findVoiceEhh+0x7a>
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	3301      	adds	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e7d4      	b.n	8006696 <_ZNK11Synthesizer9findVoiceEhh+0x22>
        }
    }
    return MAX_VOICES; // Голос не найден
 80066ec:	2308      	movs	r3, #8
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <_ZNK11Synthesizer15midiToFrequencyEh>:

uint16_t Synthesizer::midiToFrequency(uint8_t note) const {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
    // A4 = 440 Hz, MIDI note 69
    if (note == 0) return 0;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <_ZNK11Synthesizer15midiToFrequencyEh+0x16>
 800670a:	2300      	movs	r3, #0
 800670c:	e01e      	b.n	800674c <_ZNK11Synthesizer15midiToFrequencyEh+0x54>
    
    // Формула: f = 440 * 2^((note - 69) / 12)
    float frequency = 440.0f * powf(2.0f, (note - 69) / 12.0f);
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	3b45      	subs	r3, #69	; 0x45
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800671a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800671e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006722:	eef0 0a47 	vmov.f32	s1, s14
 8006726:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800672a:	f005 fa33 	bl	800bb94 <powf>
 800672e:	eef0 7a40 	vmov.f32	s15, s0
 8006732:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006754 <_ZNK11Synthesizer15midiToFrequencyEh+0x5c>
 8006736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800673a:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t)frequency;
 800673e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006746:	ee17 3a90 	vmov	r3, s15
 800674a:	b29b      	uxth	r3, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	43dc0000 	.word	0x43dc0000

08006758 <_ZNK11Synthesizer15calculateVolumeERK5Voice>:

uint8_t Synthesizer::calculateVolume(const Voice& voice) const {
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
    uint32_t currentTime = HAL_GetTick();
 8006762:	f001 f883 	bl	800786c <HAL_GetTick>
 8006766:	61b8      	str	r0, [r7, #24]
    uint32_t elapsed = currentTime - voice.startTime;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
    
    uint8_t baseVolume = (voice.velocity * MAX_VOLUME) / MAX_VELOCITY;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	789b      	ldrb	r3, [r3, #2]
 8006776:	461a      	mov	r2, r3
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x11c>)
 8006782:	fb82 1203 	smull	r1, r2, r2, r3
 8006786:	441a      	add	r2, r3
 8006788:	1192      	asrs	r2, r2, #6
 800678a:	17db      	asrs	r3, r3, #31
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	74fb      	strb	r3, [r7, #19]
    uint8_t adsrVolume = baseVolume;
 8006790:	7cfb      	ldrb	r3, [r7, #19]
 8006792:	77fb      	strb	r3, [r7, #31]
    
    if (voice.released) {
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	7b5b      	ldrb	r3, [r3, #13]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x7e>
        // Фаза Release
        uint32_t releaseElapsed = currentTime - voice.releaseTime;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	60bb      	str	r3, [r7, #8]
        if (releaseElapsed >= voice.adsr.release) {
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	8a9b      	ldrh	r3, [r3, #20]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d301      	bcc.n	80067b6 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x5e>
            return 0; // Голос должен быть отключен
 80067b2:	2300      	movs	r3, #0
 80067b4:	e05a      	b.n	800686c <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x114>
        }
        // Линейное затухание в фазе Release
        adsrVolume = (voice.adsr.sustain * (voice.adsr.release - releaseElapsed)) / voice.adsr.release;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	7c9b      	ldrb	r3, [r3, #18]
 80067ba:	461a      	mov	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	8a9b      	ldrh	r3, [r3, #20]
 80067c0:	4619      	mov	r1, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1acb      	subs	r3, r1, r3
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	8a92      	ldrh	r2, [r2, #20]
 80067ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e033      	b.n	800683e <_ZNK11Synthesizer15calculateVolumeERK5Voice+0xe6>
    } else {
        // Фазы Attack, Decay, Sustain
        if (elapsed < voice.adsr.attack) {
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	89db      	ldrh	r3, [r3, #14]
 80067da:	461a      	mov	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d209      	bcs.n	80067f6 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x9e>
            // Фаза Attack
            adsrVolume = (baseVolume * elapsed) / voice.adsr.attack;
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	89d2      	ldrh	r2, [r2, #14]
 80067ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e023      	b.n	800683e <_ZNK11Synthesizer15calculateVolumeERK5Voice+0xe6>
        } else if (elapsed < voice.adsr.attack + voice.adsr.decay) {
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	89db      	ldrh	r3, [r3, #14]
 80067fa:	461a      	mov	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	8a1b      	ldrh	r3, [r3, #16]
 8006800:	4413      	add	r3, r2
 8006802:	461a      	mov	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4293      	cmp	r3, r2
 8006808:	d216      	bcs.n	8006838 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0xe0>
            // Фаза Decay
            uint32_t decayElapsed = elapsed - voice.adsr.attack;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	89db      	ldrh	r3, [r3, #14]
 800680e:	461a      	mov	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
            adsrVolume = baseVolume - ((baseVolume - voice.adsr.sustain) * decayElapsed) / voice.adsr.decay;
 8006816:	7cfb      	ldrb	r3, [r7, #19]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	7c92      	ldrb	r2, [r2, #18]
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	461a      	mov	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	8a12      	ldrh	r2, [r2, #16]
 800682a:	fbb3 f3f2 	udiv	r3, r3, r2
 800682e:	b2db      	uxtb	r3, r3
 8006830:	7cfa      	ldrb	r2, [r7, #19]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e002      	b.n	800683e <_ZNK11Synthesizer15calculateVolumeERK5Voice+0xe6>
        } else {
            // Фаза Sustain
            adsrVolume = voice.adsr.sustain;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	7c9b      	ldrb	r3, [r3, #18]
 800683c:	77fb      	strb	r3, [r7, #31]
        }
    }
    
    // Применяем громкость канала и мастер-громкость
    adsrVolume = (adsrVolume * channelVolumes[voice.channel] * masterVolume) / (MAX_VOLUME * MAX_VOLUME);
 800683e:	7ffb      	ldrb	r3, [r7, #31]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	78d2      	ldrb	r2, [r2, #3]
 8006844:	4611      	mov	r1, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	440a      	add	r2, r1
 800684a:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	4a06      	ldr	r2, [pc, #24]	; (8006878 <_ZNK11Synthesizer15calculateVolumeERK5Voice+0x120>)
 800685e:	fb82 1203 	smull	r1, r2, r2, r3
 8006862:	1152      	asrs	r2, r2, #5
 8006864:	17db      	asrs	r3, r3, #31
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	77fb      	strb	r3, [r7, #31]
    
    return adsrVolume;
 800686a:	7ffb      	ldrb	r3, [r7, #31]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	81020409 	.word	0x81020409
 8006878:	51eb851f 	.word	0x51eb851f

0800687c <_ZN11Synthesizer11updateVoiceER5Voice>:

void Synthesizer::updateVoice(Voice& voice) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
    uint8_t volume = calculateVolume(voice);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff65 	bl	8006758 <_ZNK11Synthesizer15calculateVolumeERK5Voice>
 800688e:	4603      	mov	r3, r0
 8006890:	73fb      	strb	r3, [r7, #15]
    
    if (volume == 0 && voice.released) {
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <_ZN11Synthesizer11updateVoiceER5Voice+0x2c>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	7b5b      	ldrb	r3, [r3, #13]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <_ZN11Synthesizer11updateVoiceER5Voice+0x2c>
        // Голос завершил фазу Release
        voice.active = false;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	731a      	strb	r2, [r3, #12]
        return;
 80068a6:	bf00      	nop
    }
    
    // Не обновляем Buzzer здесь - это делается в mixVoices()
    // Просто сохраняем текущую громкость для микширования
}
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <_ZN11Synthesizer9mixVoicesEv>:

void Synthesizer::mixVoices() {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	6078      	str	r0, [r7, #4]
    // Упрощенное микширование - берем первый активный голос
    uint16_t mixedFreq = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	81fb      	strh	r3, [r7, #14]
    uint8_t mixedVolume = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	737b      	strb	r3, [r7, #13]
    uint8_t activeVoices = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	733b      	strb	r3, [r7, #12]
    
    // Находим первый активный голос
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80068c4:	2300      	movs	r3, #0
 80068c6:	72fb      	strb	r3, [r7, #11]
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	2b07      	cmp	r3, #7
 80068cc:	d82d      	bhi.n	800692a <_ZN11Synthesizer9mixVoicesEv+0x7a>
        if (voices[i].active) {
 80068ce:	7afa      	ldrb	r2, [r7, #11]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	440b      	add	r3, r1
 80068dc:	330c      	adds	r3, #12
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01e      	beq.n	8006922 <_ZN11Synthesizer9mixVoicesEv+0x72>
            uint8_t volume = calculateVolume(voices[i]);
 80068e4:	7afa      	ldrb	r2, [r7, #11]
 80068e6:	4613      	mov	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff ff2f 	bl	8006758 <_ZNK11Synthesizer15calculateVolumeERK5Voice>
 80068fa:	4603      	mov	r3, r0
 80068fc:	72bb      	strb	r3, [r7, #10]
            if (volume > 0) {
 80068fe:	7abb      	ldrb	r3, [r7, #10]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <_ZN11Synthesizer9mixVoicesEv+0x72>
                activeVoices++;
 8006904:	7b3b      	ldrb	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	733b      	strb	r3, [r7, #12]
                mixedFreq = voices[i].frequency;
 800690a:	7afa      	ldrb	r2, [r7, #11]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	440b      	add	r3, r1
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	81fb      	strh	r3, [r7, #14]
                mixedVolume = volume;
 800691c:	7abb      	ldrb	r3, [r7, #10]
 800691e:	737b      	strb	r3, [r7, #13]
                break; // Берем только первый активный голос
 8006920:	e003      	b.n	800692a <_ZN11Synthesizer9mixVoicesEv+0x7a>
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	3301      	adds	r3, #1
 8006926:	72fb      	strb	r3, [r7, #11]
 8006928:	e7ce      	b.n	80068c8 <_ZN11Synthesizer9mixVoicesEv+0x18>
            }
        }
    }
    
    // Отладочный вывод
    if (activeVoices > 0) {
 800692a:	7b3b      	ldrb	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <_ZN11Synthesizer9mixVoicesEv+0x94>
        Uart::getInstance().printf("mixVoices: %d active voices, freq=%d, vol=%d\n", 
 8006930:	f000 f9de 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8006934:	7b3a      	ldrb	r2, [r7, #12]
 8006936:	89f9      	ldrh	r1, [r7, #14]
 8006938:	7b7b      	ldrb	r3, [r7, #13]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	460b      	mov	r3, r1
 800693e:	490f      	ldr	r1, [pc, #60]	; (800697c <_ZN11Synthesizer9mixVoicesEv+0xcc>)
 8006940:	f000 fa5f 	bl	8006e02 <_ZN4Uart6printfEPKcz>
                                  activeVoices, mixedFreq, mixedVolume);
    }
    
    // Обновляем Buzzer только если есть активные голоса
    if (activeVoices > 0 && mixedFreq > 0 && mixedVolume > 0) {
 8006944:	7b3b      	ldrb	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <_ZN11Synthesizer9mixVoicesEv+0xb6>
 800694a:	89fb      	ldrh	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <_ZN11Synthesizer9mixVoicesEv+0xb6>
 8006950:	7b7b      	ldrb	r3, [r7, #13]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <_ZN11Synthesizer9mixVoicesEv+0xb6>
        Buzzer::getInstance().playNote(0, mixedFreq, mixedVolume);
 8006956:	f7fe fb33 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 800695a:	7b7b      	ldrb	r3, [r7, #13]
 800695c:	89fa      	ldrh	r2, [r7, #14]
 800695e:	2100      	movs	r1, #0
 8006960:	f7fe fb7c 	bl	800505c <_ZN6Buzzer8playNoteEhth>
 8006964:	e006      	b.n	8006974 <_ZN11Synthesizer9mixVoicesEv+0xc4>
    } else {
        Buzzer::getInstance().stopAll();
 8006966:	f7fe fb2b 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 800696a:	4603      	mov	r3, r0
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fbb7 	bl	80050e0 <_ZN6Buzzer7stopAllEv>
    }
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	0800dc30 	.word	0x0800dc30

08006980 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound>:

void Synthesizer::generateDrumSound(const DrumSound& sound) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
    Uart::getInstance().printf("generateDrumSound: freq=%d, vol=%d, noise=%d\n", 
 800698a:	f000 f9b1 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
                              sound.frequency, sound.volume, sound.isNoise);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	881b      	ldrh	r3, [r3, #0]
    Uart::getInstance().printf("generateDrumSound: freq=%d, vol=%d, noise=%d\n", 
 8006992:	461a      	mov	r2, r3
                              sound.frequency, sound.volume, sound.isNoise);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	791b      	ldrb	r3, [r3, #4]
    Uart::getInstance().printf("generateDrumSound: freq=%d, vol=%d, noise=%d\n", 
 8006998:	4619      	mov	r1, r3
                              sound.frequency, sound.volume, sound.isNoise);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	795b      	ldrb	r3, [r3, #5]
    Uart::getInstance().printf("generateDrumSound: freq=%d, vol=%d, noise=%d\n", 
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	460b      	mov	r3, r1
 80069a2:	491f      	ldr	r1, [pc, #124]	; (8006a20 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0xa0>)
 80069a4:	f000 fa2d 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // АГРЕССИВНО: Отключаем ВСЕ голоса для барабанного звука
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b07      	cmp	r3, #7
 80069b0:	d81f      	bhi.n	80069f2 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0x72>
        if (voices[i].active) {
 80069b2:	7bfa      	ldrb	r2, [r7, #15]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	440b      	add	r3, r1
 80069c0:	330c      	adds	r3, #12
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0x6a>
            voices[i].active = false;
 80069c8:	7bfa      	ldrb	r2, [r7, #15]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	440b      	add	r3, r1
 80069d6:	330c      	adds	r3, #12
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
            Uart::getInstance().printf("Stopping voice %d for drum sound\n", i);
 80069dc:	f000 f988 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	461a      	mov	r2, r3
 80069e4:	490f      	ldr	r1, [pc, #60]	; (8006a24 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0xa4>)
 80069e6:	f000 fa0c 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    for (uint8_t i = 0; i < MAX_VOICES; i++) {
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	3301      	adds	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
 80069f0:	e7dc      	b.n	80069ac <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0x2c>
        }
    }
    
    // ПРИНУДИТЕЛЬНО играем барабанный звук
    Buzzer::getInstance().playNote(0, sound.frequency, sound.volume);
 80069f2:	f7fe fae5 	bl	8004fc0 <_ZN6Buzzer11getInstanceEv>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	791b      	ldrb	r3, [r3, #4]
 80069fe:	2100      	movs	r1, #0
 8006a00:	f7fe fb2c 	bl	800505c <_ZN6Buzzer8playNoteEhth>
    Uart::getInstance().printf("FORCED Drum sound: freq=%d, vol=%d\n", sound.frequency, sound.volume);
 8006a04:	f000 f974 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	791b      	ldrb	r3, [r3, #4]
 8006a12:	4905      	ldr	r1, [pc, #20]	; (8006a28 <_ZN11Synthesizer17generateDrumSoundERK9DrumSound+0xa8>)
 8006a14:	f000 f9f5 	bl	8006e02 <_ZN4Uart6printfEPKcz>
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	0800dc60 	.word	0x0800dc60
 8006a24:	0800dc90 	.word	0x0800dc90
 8006a28:	0800dcb4 	.word	0x0800dcb4

08006a2c <_ZNK11Synthesizer13getDrumPresetE10DrumPreset>:

DrumSound Synthesizer::getDrumPreset(DrumPreset preset) const {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
    switch (preset) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b07      	cmp	r3, #7
 8006a3c:	d85f      	bhi.n	8006afe <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xd2>
 8006a3e:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0x18>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a65 	.word	0x08006a65
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a89 	.word	0x08006a89
 8006a50:	08006a9d 	.word	0x08006a9d
 8006a54:	08006ab3 	.word	0x08006ab3
 8006a58:	08006ac7 	.word	0x08006ac7
 8006a5c:	08006adb 	.word	0x08006adb
 8006a60:	08006aed 	.word	0x08006aed
        case DrumPreset::KICK:
            return DrumSound(60, 200, 10, false);  // Низкая частота, длинный звук
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	230a      	movs	r3, #10
 8006a6a:	22c8      	movs	r2, #200	; 0xc8
 8006a6c:	213c      	movs	r1, #60	; 0x3c
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fb68 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006a74:	e04c      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::SNARE:
            return DrumSound(200, 100, 8, true);   // Средняя частота, шум
 8006a76:	2301      	movs	r3, #1
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	2264      	movs	r2, #100	; 0x64
 8006a7e:	21c8      	movs	r1, #200	; 0xc8
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff fb5f 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006a86:	e043      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::HIHAT:
            return DrumSound(8000, 50, 6, true); // Высокая частота, шум, короткий
 8006a88:	2301      	movs	r3, #1
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2306      	movs	r3, #6
 8006a8e:	2232      	movs	r2, #50	; 0x32
 8006a90:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fb55 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006a9a:	e039      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::CRASH:
            return DrumSound(5000, 300, 9, true); // Высокая частота, шум, длинный
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2309      	movs	r3, #9
 8006aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006aa6:	f241 3188 	movw	r1, #5000	; 0x1388
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7ff fb4a 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006ab0:	e02e      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::RIDE:
            return DrumSound(3000, 150, 7, true); // Средняя частота, шум
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	2307      	movs	r3, #7
 8006ab8:	2296      	movs	r2, #150	; 0x96
 8006aba:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff fb40 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006ac4:	e024      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::TOM_HIGH:
            return DrumSound(400, 120, 7, false); // Высокий том
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	2307      	movs	r3, #7
 8006acc:	2278      	movs	r2, #120	; 0x78
 8006ace:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fb36 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006ad8:	e01a      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::TOM_MID:
            return DrumSound(200, 150, 8, false); // Средний том
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2308      	movs	r3, #8
 8006ae0:	2296      	movs	r2, #150	; 0x96
 8006ae2:	21c8      	movs	r1, #200	; 0xc8
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fb2d 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006aea:	e011      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        case DrumPreset::TOM_LOW:
            return DrumSound(100, 200, 9, false); // Низкий том
 8006aec:	2300      	movs	r3, #0
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2309      	movs	r3, #9
 8006af2:	22c8      	movs	r2, #200	; 0xc8
 8006af4:	2164      	movs	r1, #100	; 0x64
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fb24 	bl	8006144 <_ZN9DrumSoundC1Etthb>
 8006afc:	e008      	b.n	8006b10 <_ZNK11Synthesizer13getDrumPresetE10DrumPreset+0xe4>
        default:
            return DrumSound(440, 100, 5, false);
 8006afe:	2300      	movs	r3, #0
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	2305      	movs	r3, #5
 8006b04:	2264      	movs	r2, #100	; 0x64
 8006b06:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fb1a 	bl	8006144 <_ZN9DrumSoundC1Etthb>
    }
}
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZN15PianoController11getInstanceEv>:

// Реализация PianoController
PianoController& PianoController::getInstance() {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
    static PianoController instance;
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <_ZN15PianoController11getInstanceEv+0x44>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f3bf 8f5b 	dmb	ish
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <_ZN15PianoController11getInstanceEv+0x3c>
 8006b38:	4808      	ldr	r0, [pc, #32]	; (8006b5c <_ZN15PianoController11getInstanceEv+0x44>)
 8006b3a:	f004 ffe5 	bl	800bb08 <__cxa_guard_acquire>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <_ZN15PianoController11getInstanceEv+0x3c>
 8006b4e:	4803      	ldr	r0, [pc, #12]	; (8006b5c <_ZN15PianoController11getInstanceEv+0x44>)
 8006b50:	f004 ffe6 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <_ZN15PianoController11getInstanceEv+0x48>)
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	200008c8 	.word	0x200008c8
 8006b60:	200008a4 	.word	0x200008a4

08006b64 <_ZN15PianoController4initEv>:

bool PianoController::init() {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    currentOctave = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	741a      	strb	r2, [r3, #16]
    currentChannel = 0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	745a      	strb	r2, [r3, #17]
    currentInstrument = 0;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	749a      	strb	r2, [r3, #18]
    
    // Инициализация состояний клавиш
    for (uint8_t i = 0; i < KEYBOARD_KEYS; i++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d808      	bhi.n	8006b9a <_ZN15PianoController4initEv+0x36>
        keyStates[i] = false;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	74da      	strb	r2, [r3, #19]
    for (uint8_t i = 0; i < KEYBOARD_KEYS; i++) {
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	3301      	adds	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e7f3      	b.n	8006b82 <_ZN15PianoController4initEv+0x1e>
    }
    
    // Инициализация маппинга клавиш
    updateKeyMapping();
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f872 	bl	8006c84 <_ZN15PianoController16updateKeyMappingEv>
    
    return true;
 8006ba0:	2301      	movs	r3, #1
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <_ZN15PianoController10onKeyPressEh>:

void PianoController::onKeyPress(uint8_t keyCode) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
    if (keyCode >= KEYBOARD_KEYS) return;
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d82b      	bhi.n	8006c16 <_ZN15PianoController10onKeyPressEh+0x6a>
    
    if (!keyStates[keyCode]) {
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	7cdb      	ldrb	r3, [r3, #19]
 8006bc6:	f083 0301 	eor.w	r3, r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d023      	beq.n	8006c18 <_ZN15PianoController10onKeyPressEh+0x6c>
        keyStates[keyCode] = true;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	74da      	strb	r2, [r3, #19]
        uint8_t midiNote = getMidiNote(keyCode);
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f820 	bl	8006c24 <_ZNK15PianoController11getMidiNoteEh>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
        if (midiNote != INVALID_NOTE) {
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2bff      	cmp	r3, #255	; 0xff
 8006bec:	d014      	beq.n	8006c18 <_ZN15PianoController10onKeyPressEh+0x6c>
            Synthesizer::getInstance().noteOn(currentChannel, midiNote, 64);
 8006bee:	f7ff fadd 	bl	80061ac <_ZN11Synthesizer11getInstanceEv>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7c59      	ldrb	r1, [r3, #17]
 8006bf6:	7bfa      	ldrb	r2, [r7, #15]
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	f7ff fb55 	bl	80062a8 <_ZN11Synthesizer6noteOnEhhh>
            
            // Отладочный вывод
            Uart::getInstance().printf("Piano: key %d -> MIDI note %d on channel %d\n", 
 8006bfe:	f000 f877 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	7bf9      	ldrb	r1, [r7, #15]
                                      keyCode, midiNote, currentChannel);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7c5b      	ldrb	r3, [r3, #17]
            Uart::getInstance().printf("Piano: key %d -> MIDI note %d on channel %d\n", 
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4904      	ldr	r1, [pc, #16]	; (8006c20 <_ZN15PianoController10onKeyPressEh+0x74>)
 8006c10:	f000 f8f7 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 8006c14:	e000      	b.n	8006c18 <_ZN15PianoController10onKeyPressEh+0x6c>
    if (keyCode >= KEYBOARD_KEYS) return;
 8006c16:	bf00      	nop
        }
    }
}
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	0800dcd8 	.word	0x0800dcd8

08006c24 <_ZNK15PianoController11getMidiNoteEh>:

void PianoController::setInstrument(uint8_t instrument) {
    currentInstrument = instrument;
}

uint8_t PianoController::getMidiNote(uint8_t keyCode) const {
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
    if (keyCode >= KEYBOARD_KEYS) return INVALID_NOTE;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	d901      	bls.n	8006c3a <_ZNK15PianoController11getMidiNoteEh+0x16>
 8006c36:	23ff      	movs	r3, #255	; 0xff
 8006c38:	e01d      	b.n	8006c76 <_ZNK15PianoController11getMidiNoteEh+0x52>
    
    uint8_t baseNote = keyToNote[keyCode];
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	5cd3      	ldrb	r3, [r2, r3]
 8006c40:	73fb      	strb	r3, [r7, #15]
    if (baseNote == INVALID_NOTE) return INVALID_NOTE;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d101      	bne.n	8006c4c <_ZNK15PianoController11getMidiNoteEh+0x28>
 8006c48:	23ff      	movs	r3, #255	; 0xff
 8006c4a:	e014      	b.n	8006c76 <_ZNK15PianoController11getMidiNoteEh+0x52>
    
    // Применяем октаву
    int8_t midiNote = baseNote + (currentOctave + 4) * 12;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006c52:	3304      	adds	r3, #4
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	0052      	lsls	r2, r2, #1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	4413      	add	r3, r2
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	73bb      	strb	r3, [r7, #14]
    
    // Проверяем диапазон MIDI (0-127)
    if (midiNote < 0 || midiNote > 127) return INVALID_NOTE;
 8006c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da01      	bge.n	8006c74 <_ZNK15PianoController11getMidiNoteEh+0x50>
 8006c70:	23ff      	movs	r3, #255	; 0xff
 8006c72:	e000      	b.n	8006c76 <_ZNK15PianoController11getMidiNoteEh+0x52>
    
    return (uint8_t)midiNote;
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <_ZN15PianoController16updateKeyMappingEv>:

void PianoController::updateKeyMapping() {
 8006c84:	b490      	push	{r4, r7}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    // Маппинг клавиш 0-15 на ноты C4-C5 (60-72)
    // Клавиши: 0=C, 1=C#, 2=D, 3=D#, 4=E, 5=F, 6=F#, 7=G, 8=G#, 9=A, 10=A#, 11=B, 12=C, 13=C#, 14=D, 15=D#
    uint8_t baseNotes[KEYBOARD_KEYS] = {
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <_ZN15PianoController16updateKeyMappingEv+0x40>)
 8006c8e:	f107 040c 	add.w	r4, r7, #12
 8006c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75
    };
    
    for (uint8_t i = 0; i < KEYBOARD_KEYS; i++) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	7ffb      	ldrb	r3, [r7, #31]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d80b      	bhi.n	8006cba <_ZN15PianoController16updateKeyMappingEv+0x36>
        keyToNote[i] = baseNotes[i];
 8006ca2:	7ffa      	ldrb	r2, [r7, #31]
 8006ca4:	7ffb      	ldrb	r3, [r7, #31]
 8006ca6:	3220      	adds	r2, #32
 8006ca8:	443a      	add	r2, r7
 8006caa:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < KEYBOARD_KEYS; i++) {
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e7f0      	b.n	8006c9c <_ZN15PianoController16updateKeyMappingEv+0x18>
    }
}
 8006cba:	bf00      	nop
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc90      	pop	{r4, r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	0800dd08 	.word	0x0800dd08

08006cc8 <_ZN4UartC1Ev>:
    // Размеры буферов
    static constexpr uint16_t TX_BUFFER_SIZE = 4096;
    static constexpr uint16_t RX_BUFFER_SIZE = 1024;
    
private:
    Uart() = default;
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 f985 	bl	8006fe2 <_ZN10RingBufferILt4096EEC1Ev>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cde:	3306      	adds	r3, #6
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f998 	bl	8007016 <_ZN10RingBufferILt1024EEC1Ev>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <_ZN4Uart11getInstanceEv>:
#include <stdio.h>

// Внешние переменные из HAL
extern UART_HandleTypeDef huart6;

Uart& Uart::getInstance() {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
    static Uart instance;
 8006cf4:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <_ZN4Uart11getInstanceEv+0x48>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f3bf 8f5b 	dmb	ish
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d010      	beq.n	8006d32 <_ZN4Uart11getInstanceEv+0x42>
 8006d10:	4809      	ldr	r0, [pc, #36]	; (8006d38 <_ZN4Uart11getInstanceEv+0x48>)
 8006d12:	f004 fef9 	bl	800bb08 <__cxa_guard_acquire>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <_ZN4Uart11getInstanceEv+0x42>
 8006d26:	4805      	ldr	r0, [pc, #20]	; (8006d3c <_ZN4Uart11getInstanceEv+0x4c>)
 8006d28:	f7ff ffce 	bl	8006cc8 <_ZN4UartC1Ev>
 8006d2c:	4802      	ldr	r0, [pc, #8]	; (8006d38 <_ZN4Uart11getInstanceEv+0x48>)
 8006d2e:	f004 fef7 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8006d32:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <_ZN4Uart11getInstanceEv+0x4c>)
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20001ce0 	.word	0x20001ce0
 8006d3c:	200008cc 	.word	0x200008cc

08006d40 <_ZN4Uart4initEv>:

bool Uart::init() {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    txInProgress = false;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    lastTxTime = 0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    txBuffer.clear();
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 f96d 	bl	8007044 <_ZN10RingBufferILt4096EE5clearEv>
    rxBuffer.clear();
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	3306      	adds	r3, #6
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f97f 	bl	8007076 <_ZN10RingBufferILt1024EE5clearEv>
    
    return true;
 8006d78:	2301      	movs	r3, #1
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <_ZN4Uart4sendEh>:

bool Uart::send(uint8_t data) {
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
    if (txBuffer.isFull()) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 f986 	bl	80070a2 <_ZNK10RingBufferILt4096EE6isFullEv>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <_ZN4Uart4sendEh+0x1e>
        return false;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e006      	b.n	8006dae <_ZN4Uart4sendEh+0x2c>
    }
    
    txBuffer.push(data);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f98f 	bl	80070ca <_ZN10RingBufferILt4096EE4pushEh>
    
    // Не пытаемся отправить сразу - пусть process() управляет этим
    return true;
 8006dac:	2301      	movs	r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <_ZN4Uart4sendEPKht>:

bool Uart::send(const uint8_t* data, uint16_t size) {
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size; i++) {
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	82fb      	strh	r3, [r7, #22]
 8006dc8:	8afa      	ldrh	r2, [r7, #22]
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d213      	bcs.n	8006df8 <_ZN4Uart4sendEPKht+0x42>
        if (!send(data[i])) {
 8006dd0:	8afb      	ldrh	r3, [r7, #22]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ffd1 	bl	8006d82 <_ZN4Uart4sendEh>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f083 0301 	eor.w	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <_ZN4Uart4sendEPKht+0x3a>
            return false;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e004      	b.n	8006dfa <_ZN4Uart4sendEPKht+0x44>
    for (uint16_t i = 0; i < size; i++) {
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	3301      	adds	r3, #1
 8006df4:	82fb      	strh	r3, [r7, #22]
 8006df6:	e7e7      	b.n	8006dc8 <_ZN4Uart4sendEPKht+0x12>
        }
    }
    return true;
 8006df8:	2301      	movs	r3, #1
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <_ZN4Uart6printfEPKcz>:
        str++;
    }
    return true;
}

void Uart::printf(const char* format, ...) {
 8006e02:	b40e      	push	{r1, r2, r3}
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b0a5      	sub	sp, #148	; 0x94
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
    char buffer[128];
    va_list args;
    va_start(args, format);
 8006e0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e10:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8006e12:	f107 000c 	add.w	r0, r7, #12
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	f005 fc69 	bl	800c6f4 <vsniprintf>
 8006e22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    va_end(args);
    
    if (len > 0) {
 8006e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dd08      	ble.n	8006e40 <_ZN4Uart6printfEPKcz+0x3e>
        send(reinterpret_cast<const uint8_t*>(buffer), len);
 8006e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ffbb 	bl	8006db6 <_ZN4Uart4sendEPKht>
    }
}
 8006e40:	bf00      	nop
 8006e42:	3794      	adds	r7, #148	; 0x94
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e4a:	b003      	add	sp, #12
 8006e4c:	4770      	bx	lr

08006e4e <_ZN4Uart7receiveERh>:

bool Uart::receive(uint8_t& data) {
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
    return rxBuffer.pop(data);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	3306      	adds	r3, #6
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f967 	bl	8007136 <_ZN10RingBufferILt1024EE3popERh>
 8006e68:	4603      	mov	r3, r0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <_ZN4Uart12onReceiveISREv>:

bool Uart::isRxDataAvailable() const {
    return !rxBuffer.isEmpty();
}

void Uart::onReceiveISR() {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
    // Данные уже получены HAL'ом, добавляем их в буфер
    // HAL автоматически помещает данные в huart6.pRxBuffPtr
    if (huart6.pRxBuffPtr != nullptr) {
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <_ZN4Uart12onReceiveISREv+0x34>)
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00c      	beq.n	8006e9e <_ZN4Uart12onReceiveISREv+0x2a>
        uint8_t data = *huart6.pRxBuffPtr;
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <_ZN4Uart12onReceiveISREv+0x34>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	73fb      	strb	r3, [r7, #15]
        rxBuffer.push(data);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	3306      	adds	r3, #6
 8006e94:	7bfa      	ldrb	r2, [r7, #15]
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f98f 	bl	80071bc <_ZN10RingBufferILt1024EE4pushEh>
    }
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200002fc 	.word	0x200002fc

08006eac <_ZN4Uart17startTransmissionEv>:

bool Uart::startTransmission() {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
    if (txBuffer.isEmpty()) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f9b1 	bl	800721e <_ZNK10RingBufferILt4096EE7isEmptyEv>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <_ZN4Uart17startTransmissionEv+0x1a>
        return false;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e02c      	b.n	8006f20 <_ZN4Uart17startTransmissionEv+0x74>
    }
    
    // Проверяем, что UART действительно готов к передаче
    if (huart6.gState != HAL_UART_STATE_READY) {
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <_ZN4Uart17startTransmissionEv+0x7c>)
 8006ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	bf14      	ite	ne
 8006ed2:	2301      	movne	r3, #1
 8006ed4:	2300      	moveq	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <_ZN4Uart17startTransmissionEv+0x34>
        return false;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e01f      	b.n	8006f20 <_ZN4Uart17startTransmissionEv+0x74>
    }
    
    // Проверяем, что предыдущая передача завершена
    if (huart6.TxXferCount != 0) {
 8006ee0:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <_ZN4Uart17startTransmissionEv+0x7c>)
 8006ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	bf14      	ite	ne
 8006eea:	2301      	movne	r3, #1
 8006eec:	2300      	moveq	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <_ZN4Uart17startTransmissionEv+0x4c>
        return false;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e013      	b.n	8006f20 <_ZN4Uart17startTransmissionEv+0x74>
    }
    
    // Извлекаем символ из буфера
    uint8_t data;
    if (txBuffer.pop(data)) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f107 020f 	add.w	r2, r7, #15
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f99f 	bl	8007244 <_ZN10RingBufferILt4096EE3popERh>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <_ZN4Uart17startTransmissionEv+0x72>
        // Неблокирующая отправка
        HAL_UART_Transmit(&huart6, &data, 1, 0);
 8006f0c:	f107 010f 	add.w	r1, r7, #15
 8006f10:	2300      	movs	r3, #0
 8006f12:	2201      	movs	r2, #1
 8006f14:	4804      	ldr	r0, [pc, #16]	; (8006f28 <_ZN4Uart17startTransmissionEv+0x7c>)
 8006f16:	f003 fd9a 	bl	800aa4e <HAL_UART_Transmit>
        // Считаем, что символ отправлен
        return true;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <_ZN4Uart17startTransmissionEv+0x74>
    }
    return false;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200002fc 	.word	0x200002fc

08006f2c <_ZN4Uart15processTxBufferEv>:

void Uart::processTxBuffer() {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    if (txBuffer.isEmpty()) {
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f971 	bl	800721e <_ZNK10RingBufferILt4096EE7isEmptyEv>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <_ZN4Uart15processTxBufferEv+0x24>
        txInProgress = false;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
 8006f4e:	e017      	b.n	8006f80 <_ZN4Uart15processTxBufferEv+0x54>
        return;
    }
    
    uint8_t data;
    if (txBuffer.pop(data)) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f107 020f 	add.w	r2, r7, #15
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f973 	bl	8007244 <_ZN10RingBufferILt4096EE3popERh>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <_ZN4Uart15processTxBufferEv+0x48>
        HAL_UART_Transmit_IT(&huart6, &data, 1);
 8006f64:	f107 030f 	add.w	r3, r7, #15
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4806      	ldr	r0, [pc, #24]	; (8006f88 <_ZN4Uart15processTxBufferEv+0x5c>)
 8006f6e:	f003 fe00 	bl	800ab72 <HAL_UART_Transmit_IT>
 8006f72:	e005      	b.n	8006f80 <_ZN4Uart15processTxBufferEv+0x54>
    } else {
        txInProgress = false;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    }
}
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200002fc 	.word	0x200002fc

08006f8c <_ZN4Uart7processEv>:

void Uart::process() {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
    // Проверяем, что буфер не пуст
    if (!txBuffer.isEmpty()) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f941 	bl	800721e <_ZNK10RingBufferILt4096EE7isEmptyEv>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f083 0301 	eor.w	r3, r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d018      	beq.n	8006fda <_ZN4Uart7processEv+0x4e>
        // Добавляем задержку между попытками (50 мс)
        uint32_t currentTime = HAL_GetTick();
 8006fa8:	f000 fc60 	bl	800786c <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]
        if (currentTime - lastTxTime >= 2) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d90c      	bls.n	8006fda <_ZN4Uart7processEv+0x4e>
            if (startTransmission()) {
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff ff73 	bl	8006eac <_ZN4Uart17startTransmissionEv>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <_ZN4Uart7processEv+0x4e>
                // Символ отправлен успешно
                lastTxTime = currentTime;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
            }
            // Если не удалось отправить, просто ждем следующего цикла
        }
    }
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <_ZN10RingBufferILt4096EEC1Ev>:
#include <stdbool.h>

template<uint16_t Size>
class RingBuffer {
public:
    RingBuffer() : head(0), tail(0), count(0) {}
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	805a      	strh	r2, [r3, #2]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007004:	2200      	movs	r2, #0
 8007006:	809a      	strh	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <_ZN10RingBufferILt1024EEC1Ev>:
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <_ZN10RingBufferILt4096EE5clearEv>:
    bool isFull() const { return count == Size; }
    uint16_t getCount() const { return count; }
    uint16_t getFreeSpace() const { return Size - count; }
    
    // Очистка буфера
    void clear() {
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
        head = 0;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]
        tail = 0;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	2200      	movs	r2, #0
 800705e:	805a      	strh	r2, [r3, #2]
        count = 0;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007066:	2200      	movs	r2, #0
 8007068:	809a      	strh	r2, [r3, #4]
    }
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <_ZN10RingBufferILt1024EE5clearEv>:
    void clear() {
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
        head = 0;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
        tail = 0;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
        count = 0;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <_ZNK10RingBufferILt4096EE6isFullEv>:
    bool isFull() const { return count == Size; }
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b0:	889b      	ldrh	r3, [r3, #4]
 80070b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <_ZN10RingBufferILt4096EE4pushEh>:
    bool push(uint8_t data) {
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
        if (isFull()) return false;
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff ffe3 	bl	80070a2 <_ZNK10RingBufferILt4096EE6isFullEv>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <_ZN10RingBufferILt4096EE4pushEh+0x1c>
 80070e2:	2300      	movs	r3, #0
 80070e4:	e023      	b.n	800712e <_ZN10RingBufferILt4096EE4pushEh+0x64>
        buffer[head] = data;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	545a      	strb	r2, [r3, r1]
        head = (head + 1) % Size;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	425a      	negs	r2, r3
 8007102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007106:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800710a:	bf58      	it	pl
 800710c:	4253      	negpl	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007116:	801a      	strh	r2, [r3, #0]
        count++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	889b      	ldrh	r3, [r3, #4]
 8007120:	3301      	adds	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712a:	809a      	strh	r2, [r3, #4]
        return true;
 800712c:	2301      	movs	r3, #1
    }
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <_ZN10RingBufferILt1024EE3popERh>:
    bool pop(uint8_t& data) {
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
        if (isEmpty()) return false;
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f829 	bl	8007198 <_ZNK10RingBufferILt1024EE7isEmptyEv>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <_ZN10RingBufferILt1024EE3popERh+0x1a>
 800714c:	2300      	movs	r3, #0
 800714e:	e01f      	b.n	8007190 <_ZN10RingBufferILt1024EE3popERh+0x5a>
        data = buffer[tail];
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	5c9a      	ldrb	r2, [r3, r2]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	701a      	strb	r2, [r3, #0]
        tail = (tail + 1) % Size;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007166:	3301      	adds	r3, #1
 8007168:	425a      	negs	r2, r3
 800716a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800716e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007172:	bf58      	it	pl
 8007174:	4253      	negpl	r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
        count--;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
        return true;
 800718e:	2301      	movs	r3, #1
    }
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZNK10RingBufferILt1024EE7isEmptyEv>:
    bool isEmpty() const { return count == 0; }
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <_ZN10RingBufferILt1024EE4pushEh>:
    bool push(uint8_t data) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
        if (isFull()) return false;
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f871 	bl	80072b0 <_ZNK10RingBufferILt1024EE6isFullEv>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <_ZN10RingBufferILt1024EE4pushEh+0x1c>
 80071d4:	2300      	movs	r3, #0
 80071d6:	e01e      	b.n	8007216 <_ZN10RingBufferILt1024EE4pushEh+0x5a>
        buffer[head] = data;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80071de:	4619      	mov	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	545a      	strb	r2, [r3, r1]
        head = (head + 1) % Size;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80071ec:	3301      	adds	r3, #1
 80071ee:	425a      	negs	r2, r3
 80071f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80071f8:	bf58      	it	pl
 80071fa:	4253      	negpl	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
        count++;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800720a:	3301      	adds	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
        return true;
 8007214:	2301      	movs	r3, #1
    }
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <_ZNK10RingBufferILt4096EE7isEmptyEv>:
    bool isEmpty() const { return count == 0; }
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722c:	889b      	ldrh	r3, [r3, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <_ZN10RingBufferILt4096EE3popERh>:
    bool pop(uint8_t& data) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
        if (isEmpty()) return false;
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ffe5 	bl	800721e <_ZNK10RingBufferILt4096EE7isEmptyEv>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <_ZN10RingBufferILt4096EE3popERh+0x1a>
 800725a:	2300      	movs	r3, #0
 800725c:	e024      	b.n	80072a8 <_ZN10RingBufferILt4096EE3popERh+0x64>
        data = buffer[tail];
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	885b      	ldrh	r3, [r3, #2]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	5c9a      	ldrb	r2, [r3, r2]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	701a      	strb	r2, [r3, #0]
        tail = (tail + 1) % Size;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007276:	885b      	ldrh	r3, [r3, #2]
 8007278:	3301      	adds	r3, #1
 800727a:	425a      	negs	r2, r3
 800727c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007280:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007284:	bf58      	it	pl
 8007286:	4253      	negpl	r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007290:	805a      	strh	r2, [r3, #2]
        count--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a4:	809a      	strh	r2, [r3, #4]
        return true;
 80072a6:	2301      	movs	r3, #1
    }
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <_ZNK10RingBufferILt1024EE6isFullEv>:
    bool isFull() const { return count == Size; }
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80072be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c2:	bf0c      	ite	eq
 80072c4:	2301      	moveq	r3, #1
 80072c6:	2300      	movne	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <_ZNK4Task11getPriorityEv>:
    void block();
    void unblock();
    void sleep(uint32_t ms);
    
    // Геттеры
    uint8_t getPriority() const { return priority; }
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <_ZNK4Task8getStateEv>:
    TaskState getState() const { return state; }
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <_ZN9Scheduler11getInstanceEv>:
#include <algorithm>
#include <string.h>
#include "stm32f4xx_hal.h"
#include "usart.h"

Scheduler& Scheduler::getInstance() {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
    static Scheduler instance;
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <_ZN9Scheduler11getInstanceEv+0x44>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	f3bf 8f5b 	dmb	ish
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	bf0c      	ite	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	2300      	movne	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <_ZN9Scheduler11getInstanceEv+0x3c>
 8007328:	4808      	ldr	r0, [pc, #32]	; (800734c <_ZN9Scheduler11getInstanceEv+0x44>)
 800732a:	f004 fbed 	bl	800bb08 <__cxa_guard_acquire>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	bf14      	ite	ne
 8007334:	2301      	movne	r3, #1
 8007336:	2300      	moveq	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <_ZN9Scheduler11getInstanceEv+0x3c>
 800733e:	4803      	ldr	r0, [pc, #12]	; (800734c <_ZN9Scheduler11getInstanceEv+0x44>)
 8007340:	f004 fbee 	bl	800bb20 <__cxa_guard_release>
    return instance;
 8007344:	4b02      	ldr	r3, [pc, #8]	; (8007350 <_ZN9Scheduler11getInstanceEv+0x48>)
}
 8007346:	4618      	mov	r0, r3
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20001d28 	.word	0x20001d28
 8007350:	20001ce4 	.word	0x20001ce4

08007354 <_ZN9Scheduler4initEv>:

void Scheduler::init() {
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
    taskCount = 0;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    for (uint8_t i = 0; i < MAX_TASKS; i++) {
 8007364:	2300      	movs	r3, #0
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b0f      	cmp	r3, #15
 800736c:	d808      	bhi.n	8007380 <_ZN9Scheduler4initEv+0x2c>
        tasks[i] = nullptr;
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2100      	movs	r1, #0
 8007374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < MAX_TASKS; i++) {
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	3301      	adds	r3, #1
 800737c:	73fb      	strb	r3, [r7, #15]
 800737e:	e7f3      	b.n	8007368 <_ZN9Scheduler4initEv+0x14>
    }
}
 8007380:	bf00      	nop
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <_ZN9Scheduler7addTaskEP4Task>:

void Scheduler::addTask(Task* task) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
    if (taskCount < MAX_TASKS && task != nullptr) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d815      	bhi.n	80073cc <_ZN9Scheduler7addTaskEP4Task+0x40>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <_ZN9Scheduler7addTaskEP4Task+0x40>
        tasks[taskCount] = task;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ac:	4619      	mov	r1, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        taskCount++;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073bc:	3301      	adds	r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        sortTasksByPriority();
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f87d 	bl	80074c6 <_ZN9Scheduler19sortTasksByPriorityEv>
    }
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <_ZN9Scheduler3runEv>:
            break;
        }
    }
}

void Scheduler::run() {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
    static bool initialized = false;
    
    // Инициализация всех задач (только один раз)
    if (!initialized) {
 80073dc:	4b2f      	ldr	r3, [pc, #188]	; (800749c <_ZN9Scheduler3runEv+0xc8>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f083 0301 	eor.w	r3, r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01b      	beq.n	8007422 <_ZN9Scheduler3runEv+0x4e>
        for (uint8_t i = 0; i < taskCount; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073f4:	7dfa      	ldrb	r2, [r7, #23]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d210      	bcs.n	800741c <_ZN9Scheduler3runEv+0x48>
            tasks[i]->onInit();
 80073fa:	7dfa      	ldrb	r2, [r7, #23]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007402:	7dfa      	ldrb	r2, [r7, #23]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4608      	mov	r0, r1
 8007412:	4798      	blx	r3
        for (uint8_t i = 0; i < taskCount; i++) {
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	3301      	adds	r3, #1
 8007418:	75fb      	strb	r3, [r7, #23]
 800741a:	e7e8      	b.n	80073ee <_ZN9Scheduler3runEv+0x1a>
        }
        initialized = true;
 800741c:	4b1f      	ldr	r3, [pc, #124]	; (800749c <_ZN9Scheduler3runEv+0xc8>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
    }
    
    // Обновляем состояния всех задач
    updateTaskStates();
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8da 	bl	80075dc <_ZN9Scheduler16updateTaskStatesEv>
    
    // Ищем следующую готовую задачу
    Task* nextTask = findNextReadyTask();
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f89f 	bl	800756c <_ZN9Scheduler17findNextReadyTaskEv>
 800742e:	6138      	str	r0, [r7, #16]
    
    // Отладочный вывод каждые 2000мс
    static uint32_t lastSchedulerDebug = 0;
    uint32_t currentTime = HAL_GetTick();
 8007430:	f000 fa1c 	bl	800786c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]
    if (currentTime - lastSchedulerDebug >= 2000) {
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <_ZN9Scheduler3runEv+0xcc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007442:	d30c      	bcc.n	800745e <_ZN9Scheduler3runEv+0x8a>
        Uart::getInstance().printf("Scheduler::run: taskCount=%d, nextTask=%p\n", 
 8007444:	f7ff fc54 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
                                  taskCount, nextTask);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        Uart::getInstance().printf("Scheduler::run: taskCount=%d, nextTask=%p\n", 
 800744e:	461a      	mov	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4914      	ldr	r1, [pc, #80]	; (80074a4 <_ZN9Scheduler3runEv+0xd0>)
 8007454:	f7ff fcd5 	bl	8006e02 <_ZN4Uart6printfEPKcz>
        lastSchedulerDebug = currentTime;
 8007458:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <_ZN9Scheduler3runEv+0xcc>)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6013      	str	r3, [r2, #0]
    }
    
    if (nextTask != nullptr) {
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d017      	beq.n	8007494 <_ZN9Scheduler3runEv+0xc0>
        // Отладочный вывод для каждой выполняемой задачи
        static uint32_t lastTaskNameDebug = 0;
        if (currentTime - lastTaskNameDebug >= 1000) {
 8007464:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <_ZN9Scheduler3runEv+0xd4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007470:	d30a      	bcc.n	8007488 <_ZN9Scheduler3runEv+0xb4>
            Uart::getInstance().printf("Executing task at %p\n", nextTask);
 8007472:	f7ff fc3d 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 8007476:	4603      	mov	r3, r0
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	490c      	ldr	r1, [pc, #48]	; (80074ac <_ZN9Scheduler3runEv+0xd8>)
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fcc0 	bl	8006e02 <_ZN4Uart6printfEPKcz>
            lastTaskNameDebug = currentTime;
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <_ZN9Scheduler3runEv+0xd4>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6013      	str	r3, [r2, #0]
        }
        nextTask->update();
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6938      	ldr	r0, [r7, #16]
 8007492:	4798      	blx	r3
    }
}
 8007494:	bf00      	nop
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20001d2c 	.word	0x20001d2c
 80074a0:	20001d30 	.word	0x20001d30
 80074a4:	0800dd18 	.word	0x0800dd18
 80074a8:	20001d34 	.word	0x20001d34
 80074ac:	0800dd44 	.word	0x0800dd44

080074b0 <_ZNK9Scheduler14getCurrentTimeEv>:

uint32_t Scheduler::getCurrentTime() const {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
    return HAL_GetTick();
 80074b8:	f000 f9d8 	bl	800786c <HAL_GetTick>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <_ZN9Scheduler19sortTasksByPriorityEv>:
    if (task->state == TaskState::BLOCKED) {
        task->state = TaskState::READY;
    }
}

void Scheduler::sortTasksByPriority() {
 80074c6:	b590      	push	{r4, r7, lr}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
    // Простая сортировка пузырьком по приоритету
    for (uint8_t i = 0; i < taskCount - 1; i++) {
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
 80074d2:	7bfa      	ldrb	r2, [r7, #15]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074da:	3b01      	subs	r3, #1
 80074dc:	429a      	cmp	r2, r3
 80074de:	da40      	bge.n	8007562 <_ZN9Scheduler19sortTasksByPriorityEv+0x9c>
        for (uint8_t j = 0; j < taskCount - i - 1; j++) {
 80074e0:	2300      	movs	r3, #0
 80074e2:	73bb      	strb	r3, [r7, #14]
 80074e4:	7bba      	ldrb	r2, [r7, #14]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ec:	4619      	mov	r1, r3
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	1acb      	subs	r3, r1, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	429a      	cmp	r2, r3
 80074f6:	da30      	bge.n	800755a <_ZN9Scheduler19sortTasksByPriorityEv+0x94>
            if (tasks[j]->getPriority() > tasks[j + 1]->getPriority()) {
 80074f8:	7bba      	ldrb	r2, [r7, #14]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fee8 	bl	80072d6 <_ZNK4Task11getPriorityEv>
 8007506:	4603      	mov	r3, r0
 8007508:	461c      	mov	r4, r3
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fede 	bl	80072d6 <_ZNK4Task11getPriorityEv>
 800751a:	4603      	mov	r3, r0
 800751c:	429c      	cmp	r4, r3
 800751e:	bf8c      	ite	hi
 8007520:	2301      	movhi	r3, #1
 8007522:	2300      	movls	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <_ZN9Scheduler19sortTasksByPriorityEv+0x8c>
                Task* temp = tasks[j];
 800752a:	7bba      	ldrb	r2, [r7, #14]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	60bb      	str	r3, [r7, #8]
                tasks[j] = tasks[j + 1];
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	7bba      	ldrb	r2, [r7, #14]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                tasks[j + 1] = temp;
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t j = 0; j < taskCount - i - 1; j++) {
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	3301      	adds	r3, #1
 8007556:	73bb      	strb	r3, [r7, #14]
 8007558:	e7c4      	b.n	80074e4 <_ZN9Scheduler19sortTasksByPriorityEv+0x1e>
    for (uint8_t i = 0; i < taskCount - 1; i++) {
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	3301      	adds	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e7b7      	b.n	80074d2 <_ZN9Scheduler19sortTasksByPriorityEv+0xc>
            }
        }
    }
}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bd90      	pop	{r4, r7, pc}
	...

0800756c <_ZN9Scheduler17findNextReadyTaskEv>:

Task* Scheduler::findNextReadyTask() {
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    static uint8_t lastTaskIndex = 0;
    
    // Начинаем поиск со следующей задачи после последней выполненной
    for (uint8_t i = 0; i < taskCount; i++) {
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800757e:	7bfa      	ldrb	r2, [r7, #15]
 8007580:	429a      	cmp	r2, r3
 8007582:	d223      	bcs.n	80075cc <_ZN9Scheduler17findNextReadyTaskEv+0x60>
        uint8_t taskIndex = (lastTaskIndex + 1 + i) % taskCount;
 8007584:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <_ZN9Scheduler17findNextReadyTaskEv+0x6c>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	4413      	add	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8007594:	fb93 f1f2 	sdiv	r1, r3, r2
 8007598:	fb01 f202 	mul.w	r2, r1, r2
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	73bb      	strb	r3, [r7, #14]
        if (tasks[taskIndex]->isReady()) {
 80075a0:	7bba      	ldrb	r2, [r7, #14]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f8ad 	bl	8007708 <_ZNK4Task7isReadyEv>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <_ZN9Scheduler17findNextReadyTaskEv+0x58>
            lastTaskIndex = taskIndex;
 80075b4:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <_ZN9Scheduler17findNextReadyTaskEv+0x6c>)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	7013      	strb	r3, [r2, #0]
            return tasks[taskIndex];
 80075ba:	7bba      	ldrb	r2, [r7, #14]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	e004      	b.n	80075ce <_ZN9Scheduler17findNextReadyTaskEv+0x62>
    for (uint8_t i = 0; i < taskCount; i++) {
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	3301      	adds	r3, #1
 80075c8:	73fb      	strb	r3, [r7, #15]
 80075ca:	e7d5      	b.n	8007578 <_ZN9Scheduler17findNextReadyTaskEv+0xc>
        }
    }
    return nullptr;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20001d38 	.word	0x20001d38

080075dc <_ZN9Scheduler16updateTaskStatesEv>:

void Scheduler::updateTaskStates() {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = getCurrentTime();
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ff63 	bl	80074b0 <_ZNK9Scheduler14getCurrentTimeEv>
 80075ea:	6138      	str	r0, [r7, #16]
    
    for (uint8_t i = 0; i < taskCount; i++) {
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d214      	bcs.n	8007626 <_ZN9Scheduler16updateTaskStatesEv+0x4a>
        Task* task = tasks[i];
 80075fc:	7dfa      	ldrb	r2, [r7, #23]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	60fb      	str	r3, [r7, #12]
        
        // Проверяем спящие задачи
        if (task->state == TaskState::SLEEPING) {
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d107      	bne.n	800761e <_ZN9Scheduler16updateTaskStatesEv+0x42>
            if (currentTime >= task->wakeTime) {
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <_ZN9Scheduler16updateTaskStatesEv+0x42>
                task->state = TaskState::READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < taskCount; i++) {
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	3301      	adds	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
 8007624:	e7e4      	b.n	80075f0 <_ZN9Scheduler16updateTaskStatesEv+0x14>
            }
        }
    }
}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <_ZNK9Scheduler13printTaskInfoEv>:
void Scheduler::printTaskInfo() const {
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af02      	add	r7, sp, #8
 8007636:	6078      	str	r0, [r7, #4]
    // Используем printf через UART драйвер
    Uart& uart = Uart::getInstance();
 8007638:	f7ff fb5a 	bl	8006cf0 <_ZN4Uart11getInstanceEv>
 800763c:	60b8      	str	r0, [r7, #8]
    
    uart.printf("Tasks: %d/%d\n", taskCount, MAX_TASKS);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007644:	461a      	mov	r2, r3
 8007646:	2310      	movs	r3, #16
 8007648:	491f      	ldr	r1, [pc, #124]	; (80076c8 <_ZNK9Scheduler13printTaskInfoEv+0x98>)
 800764a:	68b8      	ldr	r0, [r7, #8]
 800764c:	f7ff fbd9 	bl	8006e02 <_ZN4Uart6printfEPKcz>
    
    // Считаем задачи по состояниям
    uint8_t readyCount = 0, blockedCount = 0, sleepingCount = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	2300      	movs	r3, #0
 8007656:	73bb      	strb	r3, [r7, #14]
 8007658:	2300      	movs	r3, #0
 800765a:	737b      	strb	r3, [r7, #13]
    for (uint8_t i = 0; i < taskCount; i++) {
 800765c:	2300      	movs	r3, #0
 800765e:	733b      	strb	r3, [r7, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007666:	7b3a      	ldrb	r2, [r7, #12]
 8007668:	429a      	cmp	r2, r3
 800766a:	d220      	bcs.n	80076ae <_ZNK9Scheduler13printTaskInfoEv+0x7e>
        switch (tasks[i]->getState()) {
 800766c:	7b3a      	ldrb	r2, [r7, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fe3a 	bl	80072ee <_ZNK4Task8getStateEv>
 800767a:	4603      	mov	r3, r0
 800767c:	2b02      	cmp	r3, #2
 800767e:	d00e      	beq.n	800769e <_ZNK9Scheduler13printTaskInfoEv+0x6e>
 8007680:	2b02      	cmp	r3, #2
 8007682:	dc10      	bgt.n	80076a6 <_ZNK9Scheduler13printTaskInfoEv+0x76>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <_ZNK9Scheduler13printTaskInfoEv+0x5e>
 8007688:	2b01      	cmp	r3, #1
 800768a:	d004      	beq.n	8007696 <_ZNK9Scheduler13printTaskInfoEv+0x66>
 800768c:	e00b      	b.n	80076a6 <_ZNK9Scheduler13printTaskInfoEv+0x76>
            case TaskState::READY: readyCount++; break;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e007      	b.n	80076a6 <_ZNK9Scheduler13printTaskInfoEv+0x76>
            case TaskState::BLOCKED: blockedCount++; break;
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	3301      	adds	r3, #1
 800769a:	73bb      	strb	r3, [r7, #14]
 800769c:	e003      	b.n	80076a6 <_ZNK9Scheduler13printTaskInfoEv+0x76>
            case TaskState::SLEEPING: sleepingCount++; break;
 800769e:	7b7b      	ldrb	r3, [r7, #13]
 80076a0:	3301      	adds	r3, #1
 80076a2:	737b      	strb	r3, [r7, #13]
 80076a4:	bf00      	nop
    for (uint8_t i = 0; i < taskCount; i++) {
 80076a6:	7b3b      	ldrb	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	733b      	strb	r3, [r7, #12]
 80076ac:	e7d8      	b.n	8007660 <_ZNK9Scheduler13printTaskInfoEv+0x30>
        }
    }
    
    uart.printf("States: R=%d, B=%d, S=%d\n", readyCount, blockedCount, sleepingCount);
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	7bb9      	ldrb	r1, [r7, #14]
 80076b2:	7b7b      	ldrb	r3, [r7, #13]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	460b      	mov	r3, r1
 80076b8:	4904      	ldr	r1, [pc, #16]	; (80076cc <_ZNK9Scheduler13printTaskInfoEv+0x9c>)
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f7ff fba1 	bl	8006e02 <_ZN4Uart6printfEPKcz>
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0800dd5c 	.word	0x0800dd5c
 80076cc:	0800dd6c 	.word	0x0800dd6c

080076d0 <_ZN4TaskC1Eh>:
#include "scheduler/Task.hpp"
#include "scheduler/Scheduler.hpp"

Task::Task(uint8_t priority) 
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
    : priority(priority), state(TaskState::READY), wakeTime(0) {
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <_ZN4TaskC1Eh+0x34>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	711a      	strb	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	60da      	str	r2, [r3, #12]
}
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	0800de8c 	.word	0x0800de8c

08007708 <_ZNK4Task7isReadyEv>:

void Task::sleep(uint32_t ms) {
    Scheduler::getInstance().sleepTask(this, ms);
}

bool Task::isReady() const {
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
    if (state == TaskState::READY) {
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <_ZNK4Task7isReadyEv+0x14>
        return true;
 8007718:	2301      	movs	r3, #1
 800771a:	e013      	b.n	8007744 <_ZNK4Task7isReadyEv+0x3c>
    }
    
    if (state == TaskState::SLEEPING) {
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d10e      	bne.n	8007742 <_ZNK4Task7isReadyEv+0x3a>
        return Scheduler::getInstance().getCurrentTime() >= wakeTime;
 8007724:	f7ff fdf0 	bl	8007308 <_ZN9Scheduler11getInstanceEv>
 8007728:	4603      	mov	r3, r0
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fec0 	bl	80074b0 <_ZNK9Scheduler14getCurrentTimeEv>
 8007730:	4602      	mov	r2, r0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	bf2c      	ite	cs
 800773a:	2301      	movcs	r3, #1
 800773c:	2300      	movcc	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	e000      	b.n	8007744 <_ZNK4Task7isReadyEv+0x3c>
    }
    
    return false;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800774c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007750:	480d      	ldr	r0, [pc, #52]	; (8007788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007752:	490e      	ldr	r1, [pc, #56]	; (800778c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007754:	4a0e      	ldr	r2, [pc, #56]	; (8007790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007758:	e002      	b.n	8007760 <LoopCopyDataInit>

0800775a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800775a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800775c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800775e:	3304      	adds	r3, #4

08007760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007764:	d3f9      	bcc.n	800775a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007766:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007768:	4c0b      	ldr	r4, [pc, #44]	; (8007798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800776a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800776c:	e001      	b.n	8007772 <LoopFillZerobss>

0800776e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800776e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007770:	3204      	adds	r2, #4

08007772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007774:	d3fb      	bcc.n	800776e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007776:	f7fd fa51 	bl	8004c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800777a:	f004 fdf1 	bl	800c360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800777e:	f7fc fe59 	bl	8004434 <main>
  bx  lr    
 8007782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007784:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800778c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8007790:	0800e680 	.word	0x0800e680
  ldr r2, =_sbss
 8007794:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8007798:	20001de4 	.word	0x20001de4

0800779c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800779c:	e7fe      	b.n	800779c <ADC_IRQHandler>
	...

080077a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077a4:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <HAL_Init+0x40>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a0d      	ldr	r2, [pc, #52]	; (80077e0 <HAL_Init+0x40>)
 80077aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <HAL_Init+0x40>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a0a      	ldr	r2, [pc, #40]	; (80077e0 <HAL_Init+0x40>)
 80077b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077bc:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <HAL_Init+0x40>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <HAL_Init+0x40>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077c8:	2003      	movs	r0, #3
 80077ca:	f000 f931 	bl	8007a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ce:	200f      	movs	r0, #15
 80077d0:	f000 f808 	bl	80077e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077d4:	f7fd f916 	bl	8004a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40023c00 	.word	0x40023c00

080077e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <HAL_InitTick+0x54>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <HAL_InitTick+0x58>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4619      	mov	r1, r3
 80077f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80077fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f93b 	bl	8007a7e <HAL_SYSTICK_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e00e      	b.n	8007830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b0f      	cmp	r3, #15
 8007816:	d80a      	bhi.n	800782e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007818:	2200      	movs	r2, #0
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	f000 f911 	bl	8007a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007824:	4a06      	ldr	r2, [pc, #24]	; (8007840 <HAL_InitTick+0x5c>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e000      	b.n	8007830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000038 	.word	0x20000038
 800783c:	20000040 	.word	0x20000040
 8007840:	2000003c 	.word	0x2000003c

08007844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <HAL_IncTick+0x20>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	4b06      	ldr	r3, [pc, #24]	; (8007868 <HAL_IncTick+0x24>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4413      	add	r3, r2
 8007854:	4a04      	ldr	r2, [pc, #16]	; (8007868 <HAL_IncTick+0x24>)
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20000040 	.word	0x20000040
 8007868:	20001d3c 	.word	0x20001d3c

0800786c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  return uwTick;
 8007870:	4b03      	ldr	r3, [pc, #12]	; (8007880 <HAL_GetTick+0x14>)
 8007872:	681b      	ldr	r3, [r3, #0]
}
 8007874:	4618      	mov	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20001d3c 	.word	0x20001d3c

08007884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800788c:	f7ff ffee 	bl	800786c <HAL_GetTick>
 8007890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d005      	beq.n	80078aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <HAL_Delay+0x44>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80078aa:	bf00      	nop
 80078ac:	f7ff ffde 	bl	800786c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d8f7      	bhi.n	80078ac <HAL_Delay+0x28>
  {
  }
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000040 	.word	0x20000040

080078cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <__NVIC_SetPriorityGrouping+0x44>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078e8:	4013      	ands	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078fe:	4a04      	ldr	r2, [pc, #16]	; (8007910 <__NVIC_SetPriorityGrouping+0x44>)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	60d3      	str	r3, [r2, #12]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	e000ed00 	.word	0xe000ed00

08007914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <__NVIC_GetPriorityGrouping+0x18>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	f003 0307 	and.w	r3, r3, #7
}
 8007922:	4618      	mov	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800793c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db0a      	blt.n	800795a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	490c      	ldr	r1, [pc, #48]	; (800797c <__NVIC_SetPriority+0x4c>)
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	0112      	lsls	r2, r2, #4
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	440b      	add	r3, r1
 8007954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007958:	e00a      	b.n	8007970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	b2da      	uxtb	r2, r3
 800795e:	4908      	ldr	r1, [pc, #32]	; (8007980 <__NVIC_SetPriority+0x50>)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	3b04      	subs	r3, #4
 8007968:	0112      	lsls	r2, r2, #4
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	440b      	add	r3, r1
 800796e:	761a      	strb	r2, [r3, #24]
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	e000e100 	.word	0xe000e100
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f1c3 0307 	rsb	r3, r3, #7
 800799e:	2b04      	cmp	r3, #4
 80079a0:	bf28      	it	cs
 80079a2:	2304      	movcs	r3, #4
 80079a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	3304      	adds	r3, #4
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d902      	bls.n	80079b4 <NVIC_EncodePriority+0x30>
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3b03      	subs	r3, #3
 80079b2:	e000      	b.n	80079b6 <NVIC_EncodePriority+0x32>
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	43da      	mvns	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	401a      	ands	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079cc:	f04f 31ff 	mov.w	r1, #4294967295
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	43d9      	mvns	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079dc:	4313      	orrs	r3, r2
         );
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3724      	adds	r7, #36	; 0x24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079fc:	d301      	bcc.n	8007a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079fe:	2301      	movs	r3, #1
 8007a00:	e00f      	b.n	8007a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a02:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <SysTick_Config+0x40>)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a0a:	210f      	movs	r1, #15
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	f7ff ff8e 	bl	8007930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <SysTick_Config+0x40>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a1a:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <SysTick_Config+0x40>)
 8007a1c:	2207      	movs	r2, #7
 8007a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	e000e010 	.word	0xe000e010

08007a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff ff47 	bl	80078cc <__NVIC_SetPriorityGrouping>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a58:	f7ff ff5c 	bl	8007914 <__NVIC_GetPriorityGrouping>
 8007a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	6978      	ldr	r0, [r7, #20]
 8007a64:	f7ff ff8e 	bl	8007984 <NVIC_EncodePriority>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff ff5d 	bl	8007930 <__NVIC_SetPriority>
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff ffb0 	bl	80079ec <SysTick_Config>
 8007a8c:	4603      	mov	r3, r0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007aa4:	f7ff fee2 	bl	800786c <HAL_GetTick>
 8007aa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d008      	beq.n	8007ac8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2280      	movs	r2, #128	; 0x80
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e052      	b.n	8007b6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0216 	bic.w	r2, r2, #22
 8007ad6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <HAL_DMA_Abort+0x62>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0208 	bic.w	r2, r2, #8
 8007b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0201 	bic.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b18:	e013      	b.n	8007b42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b1a:	f7ff fea7 	bl	800786c <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b05      	cmp	r3, #5
 8007b26:	d90c      	bls.n	8007b42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2203      	movs	r2, #3
 8007b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e015      	b.n	8007b6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e4      	bne.n	8007b1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b54:	223f      	movs	r2, #63	; 0x3f
 8007b56:	409a      	lsls	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d004      	beq.n	8007b94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2280      	movs	r2, #128	; 0x80
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e00c      	b.n	8007bae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2205      	movs	r2, #5
 8007b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b089      	sub	sp, #36	; 0x24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	e177      	b.n	8007ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bd8:	2201      	movs	r2, #1
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4013      	ands	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f040 8166 	bne.w	8007ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d005      	beq.n	8007c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d130      	bne.n	8007c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	2203      	movs	r2, #3
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c44:	2201      	movs	r2, #1
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4013      	ands	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	f003 0201 	and.w	r2, r3, #1
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	fa02 f303 	lsl.w	r3, r2, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f003 0303 	and.w	r3, r3, #3
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d017      	beq.n	8007cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	2203      	movs	r2, #3
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d123      	bne.n	8007d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	08da      	lsrs	r2, r3, #3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3208      	adds	r2, #8
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	220f      	movs	r2, #15
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	08da      	lsrs	r2, r3, #3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3208      	adds	r2, #8
 8007cfa:	69b9      	ldr	r1, [r7, #24]
 8007cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f003 0203 	and.w	r2, r3, #3
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80c0 	beq.w	8007ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	4b66      	ldr	r3, [pc, #408]	; (8007ee0 <HAL_GPIO_Init+0x324>)
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	4a65      	ldr	r2, [pc, #404]	; (8007ee0 <HAL_GPIO_Init+0x324>)
 8007d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d50:	6453      	str	r3, [r2, #68]	; 0x44
 8007d52:	4b63      	ldr	r3, [pc, #396]	; (8007ee0 <HAL_GPIO_Init+0x324>)
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d5e:	4a61      	ldr	r2, [pc, #388]	; (8007ee4 <HAL_GPIO_Init+0x328>)
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	089b      	lsrs	r3, r3, #2
 8007d64:	3302      	adds	r3, #2
 8007d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	220f      	movs	r2, #15
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a58      	ldr	r2, [pc, #352]	; (8007ee8 <HAL_GPIO_Init+0x32c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d037      	beq.n	8007dfa <HAL_GPIO_Init+0x23e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a57      	ldr	r2, [pc, #348]	; (8007eec <HAL_GPIO_Init+0x330>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d031      	beq.n	8007df6 <HAL_GPIO_Init+0x23a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a56      	ldr	r2, [pc, #344]	; (8007ef0 <HAL_GPIO_Init+0x334>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02b      	beq.n	8007df2 <HAL_GPIO_Init+0x236>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a55      	ldr	r2, [pc, #340]	; (8007ef4 <HAL_GPIO_Init+0x338>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d025      	beq.n	8007dee <HAL_GPIO_Init+0x232>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a54      	ldr	r2, [pc, #336]	; (8007ef8 <HAL_GPIO_Init+0x33c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01f      	beq.n	8007dea <HAL_GPIO_Init+0x22e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a53      	ldr	r2, [pc, #332]	; (8007efc <HAL_GPIO_Init+0x340>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d019      	beq.n	8007de6 <HAL_GPIO_Init+0x22a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a52      	ldr	r2, [pc, #328]	; (8007f00 <HAL_GPIO_Init+0x344>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <HAL_GPIO_Init+0x226>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a51      	ldr	r2, [pc, #324]	; (8007f04 <HAL_GPIO_Init+0x348>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00d      	beq.n	8007dde <HAL_GPIO_Init+0x222>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a50      	ldr	r2, [pc, #320]	; (8007f08 <HAL_GPIO_Init+0x34c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d007      	beq.n	8007dda <HAL_GPIO_Init+0x21e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a4f      	ldr	r2, [pc, #316]	; (8007f0c <HAL_GPIO_Init+0x350>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <HAL_GPIO_Init+0x21a>
 8007dd2:	2309      	movs	r3, #9
 8007dd4:	e012      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dd6:	230a      	movs	r3, #10
 8007dd8:	e010      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dda:	2308      	movs	r3, #8
 8007ddc:	e00e      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dde:	2307      	movs	r3, #7
 8007de0:	e00c      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007de2:	2306      	movs	r3, #6
 8007de4:	e00a      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007de6:	2305      	movs	r3, #5
 8007de8:	e008      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dea:	2304      	movs	r3, #4
 8007dec:	e006      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dee:	2303      	movs	r3, #3
 8007df0:	e004      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e002      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <HAL_GPIO_Init+0x240>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	f002 0203 	and.w	r2, r2, #3
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	4093      	lsls	r3, r2
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e0c:	4935      	ldr	r1, [pc, #212]	; (8007ee4 <HAL_GPIO_Init+0x328>)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	089b      	lsrs	r3, r3, #2
 8007e12:	3302      	adds	r3, #2
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e1a:	4b3d      	ldr	r3, [pc, #244]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	43db      	mvns	r3, r3
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	4013      	ands	r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e3e:	4a34      	ldr	r2, [pc, #208]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e44:	4b32      	ldr	r3, [pc, #200]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	43db      	mvns	r3, r3
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	4013      	ands	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e68:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007e6e:	4b28      	ldr	r3, [pc, #160]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e92:	4a1f      	ldr	r2, [pc, #124]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e98:	4b1d      	ldr	r3, [pc, #116]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ebc:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <HAL_GPIO_Init+0x354>)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2b0f      	cmp	r3, #15
 8007ecc:	f67f ae84 	bls.w	8007bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	40013800 	.word	0x40013800
 8007ee8:	40020000 	.word	0x40020000
 8007eec:	40020400 	.word	0x40020400
 8007ef0:	40020800 	.word	0x40020800
 8007ef4:	40020c00 	.word	0x40020c00
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	40021400 	.word	0x40021400
 8007f00:	40021800 	.word	0x40021800
 8007f04:	40021c00 	.word	0x40021c00
 8007f08:	40022000 	.word	0x40022000
 8007f0c:	40022400 	.word	0x40022400
 8007f10:	40013c00 	.word	0x40013c00

08007f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
 8007f30:	e001      	b.n	8007f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
 8007f50:	4613      	mov	r3, r2
 8007f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f54:	787b      	ldrb	r3, [r7, #1]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f60:	e003      	b.n	8007f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f62:	887b      	ldrh	r3, [r7, #2]
 8007f64:	041a      	lsls	r2, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	619a      	str	r2, [r3, #24]
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
	...

08007f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e12b      	b.n	80081e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fc f998 	bl	80042d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2224      	movs	r2, #36	; 0x24
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007fdc:	f001 fc36 	bl	800984c <HAL_RCC_GetPCLK1Freq>
 8007fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4a81      	ldr	r2, [pc, #516]	; (80081ec <HAL_I2C_Init+0x274>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d807      	bhi.n	8007ffc <HAL_I2C_Init+0x84>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a80      	ldr	r2, [pc, #512]	; (80081f0 <HAL_I2C_Init+0x278>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	bf94      	ite	ls
 8007ff4:	2301      	movls	r3, #1
 8007ff6:	2300      	movhi	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e006      	b.n	800800a <HAL_I2C_Init+0x92>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a7d      	ldr	r2, [pc, #500]	; (80081f4 <HAL_I2C_Init+0x27c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	bf94      	ite	ls
 8008004:	2301      	movls	r3, #1
 8008006:	2300      	movhi	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e0e7      	b.n	80081e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a78      	ldr	r2, [pc, #480]	; (80081f8 <HAL_I2C_Init+0x280>)
 8008016:	fba2 2303 	umull	r2, r3, r2, r3
 800801a:	0c9b      	lsrs	r3, r3, #18
 800801c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	4a6a      	ldr	r2, [pc, #424]	; (80081ec <HAL_I2C_Init+0x274>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d802      	bhi.n	800804c <HAL_I2C_Init+0xd4>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	3301      	adds	r3, #1
 800804a:	e009      	b.n	8008060 <HAL_I2C_Init+0xe8>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	4a69      	ldr	r2, [pc, #420]	; (80081fc <HAL_I2C_Init+0x284>)
 8008058:	fba2 2303 	umull	r2, r3, r2, r3
 800805c:	099b      	lsrs	r3, r3, #6
 800805e:	3301      	adds	r3, #1
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	430b      	orrs	r3, r1
 8008066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	495c      	ldr	r1, [pc, #368]	; (80081ec <HAL_I2C_Init+0x274>)
 800807c:	428b      	cmp	r3, r1
 800807e:	d819      	bhi.n	80080b4 <HAL_I2C_Init+0x13c>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1e59      	subs	r1, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	fbb1 f3f3 	udiv	r3, r1, r3
 800808e:	1c59      	adds	r1, r3, #1
 8008090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008094:	400b      	ands	r3, r1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_I2C_Init+0x138>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1e59      	subs	r1, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80080a8:	3301      	adds	r3, #1
 80080aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ae:	e051      	b.n	8008154 <HAL_I2C_Init+0x1dc>
 80080b0:	2304      	movs	r3, #4
 80080b2:	e04f      	b.n	8008154 <HAL_I2C_Init+0x1dc>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d111      	bne.n	80080e0 <HAL_I2C_Init+0x168>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	1e58      	subs	r0, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	440b      	add	r3, r1
 80080ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80080ce:	3301      	adds	r3, #1
 80080d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bf0c      	ite	eq
 80080d8:	2301      	moveq	r3, #1
 80080da:	2300      	movne	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e012      	b.n	8008106 <HAL_I2C_Init+0x18e>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	1e58      	subs	r0, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	0099      	lsls	r1, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <HAL_I2C_Init+0x196>
 800810a:	2301      	movs	r3, #1
 800810c:	e022      	b.n	8008154 <HAL_I2C_Init+0x1dc>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10e      	bne.n	8008134 <HAL_I2C_Init+0x1bc>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1e58      	subs	r0, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	440b      	add	r3, r1
 8008124:	fbb0 f3f3 	udiv	r3, r0, r3
 8008128:	3301      	adds	r3, #1
 800812a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800812e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008132:	e00f      	b.n	8008154 <HAL_I2C_Init+0x1dc>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	1e58      	subs	r0, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6859      	ldr	r1, [r3, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	0099      	lsls	r1, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	fbb0 f3f3 	udiv	r3, r0, r3
 800814a:	3301      	adds	r3, #1
 800814c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	6809      	ldr	r1, [r1, #0]
 8008158:	4313      	orrs	r3, r2
 800815a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69da      	ldr	r2, [r3, #28]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6911      	ldr	r1, [r2, #16]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68d2      	ldr	r2, [r2, #12]
 800818e:	4311      	orrs	r1, r2
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	430b      	orrs	r3, r1
 8008196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0201 	orr.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	000186a0 	.word	0x000186a0
 80081f0:	001e847f 	.word	0x001e847f
 80081f4:	003d08ff 	.word	0x003d08ff
 80081f8:	431bde83 	.word	0x431bde83
 80081fc:	10624dd3 	.word	0x10624dd3

08008200 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	4603      	mov	r3, r0
 8008210:	817b      	strh	r3, [r7, #10]
 8008212:	460b      	mov	r3, r1
 8008214:	813b      	strh	r3, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800821a:	f7ff fb27 	bl	800786c <HAL_GetTick>
 800821e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b20      	cmp	r3, #32
 800822a:	f040 80d9 	bne.w	80083e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	2319      	movs	r3, #25
 8008234:	2201      	movs	r2, #1
 8008236:	496d      	ldr	r1, [pc, #436]	; (80083ec <HAL_I2C_Mem_Write+0x1ec>)
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 fc7f 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
 8008246:	e0cc      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_I2C_Mem_Write+0x56>
 8008252:	2302      	movs	r3, #2
 8008254:	e0c5      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b01      	cmp	r3, #1
 800826a:	d007      	beq.n	800827c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800828a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2221      	movs	r2, #33	; 0x21
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a3a      	ldr	r2, [r7, #32]
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a4d      	ldr	r2, [pc, #308]	; (80083f0 <HAL_I2C_Mem_Write+0x1f0>)
 80082bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082be:	88f8      	ldrh	r0, [r7, #6]
 80082c0:	893a      	ldrh	r2, [r7, #8]
 80082c2:	8979      	ldrh	r1, [r7, #10]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4603      	mov	r3, r0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fab6 	bl	8008840 <I2C_RequestMemoryWrite>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d052      	beq.n	8008380 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e081      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fd00 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d107      	bne.n	8008306 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e06b      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008324:	3b01      	subs	r3, #1
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b04      	cmp	r3, #4
 8008346:	d11b      	bne.n	8008380 <HAL_I2C_Mem_Write+0x180>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008376:	b29b      	uxth	r3, r3
 8008378:	3b01      	subs	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1aa      	bne.n	80082de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fcec 	bl	8008d6a <I2C_WaitOnBTFFlagUntilTimeout>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	2b04      	cmp	r3, #4
 800839e:	d107      	bne.n	80083b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e016      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	e000      	b.n	80083e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
  }
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	00100002 	.word	0x00100002
 80083f0:	ffff0000 	.word	0xffff0000

080083f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4603      	mov	r3, r0
 8008404:	817b      	strh	r3, [r7, #10]
 8008406:	460b      	mov	r3, r1
 8008408:	813b      	strh	r3, [r7, #8]
 800840a:	4613      	mov	r3, r2
 800840c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800840e:	f7ff fa2d 	bl	800786c <HAL_GetTick>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b20      	cmp	r3, #32
 800841e:	f040 8208 	bne.w	8008832 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	2319      	movs	r3, #25
 8008428:	2201      	movs	r2, #1
 800842a:	497b      	ldr	r1, [pc, #492]	; (8008618 <HAL_I2C_Mem_Read+0x224>)
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fb85 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008438:	2302      	movs	r3, #2
 800843a:	e1fb      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_I2C_Mem_Read+0x56>
 8008446:	2302      	movs	r3, #2
 8008448:	e1f4      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b01      	cmp	r3, #1
 800845e:	d007      	beq.n	8008470 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800847e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2222      	movs	r2, #34	; 0x22
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2240      	movs	r2, #64	; 0x40
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80084a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a5b      	ldr	r2, [pc, #364]	; (800861c <HAL_I2C_Mem_Read+0x228>)
 80084b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084b2:	88f8      	ldrh	r0, [r7, #6]
 80084b4:	893a      	ldrh	r2, [r7, #8]
 80084b6:	8979      	ldrh	r1, [r7, #10]
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4603      	mov	r3, r0
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fa52 	bl	800896c <I2C_RequestMemoryRead>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e1b0      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d113      	bne.n	8008502 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084da:	2300      	movs	r3, #0
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	623b      	str	r3, [r7, #32]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	623b      	str	r3, [r7, #32]
 80084ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e184      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008506:	2b01      	cmp	r3, #1
 8008508:	d11b      	bne.n	8008542 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	61fb      	str	r3, [r7, #28]
 800852e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e164      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008546:	2b02      	cmp	r3, #2
 8008548:	d11b      	bne.n	8008582 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008558:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008568:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	e144      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008598:	e138      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f200 80f1 	bhi.w	8008786 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d123      	bne.n	80085f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fc1b 	bl	8008dec <I2C_WaitOnRXNEFlagUntilTimeout>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e139      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085f2:	e10b      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d14e      	bne.n	800869a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	2200      	movs	r2, #0
 8008604:	4906      	ldr	r1, [pc, #24]	; (8008620 <HAL_I2C_Mem_Read+0x22c>)
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fa98 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e10e      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
 8008616:	bf00      	nop
 8008618:	00100002 	.word	0x00100002
 800861c:	ffff0000 	.word	0xffff0000
 8008620:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691a      	ldr	r2, [r3, #16]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008698:	e0b8      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	2200      	movs	r2, #0
 80086a2:	4966      	ldr	r1, [pc, #408]	; (800883c <HAL_I2C_Mem_Read+0x448>)
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fa49 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0bf      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	2200      	movs	r2, #0
 80086fe:	494f      	ldr	r1, [pc, #316]	; (800883c <HAL_I2C_Mem_Read+0x448>)
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fa1b 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e091      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800871e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691a      	ldr	r2, [r3, #16]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29b      	uxth	r3, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	b29a      	uxth	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008784:	e042      	b.n	800880c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 fb2e 	bl	8008dec <I2C_WaitOnRXNEFlagUntilTimeout>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e04c      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691a      	ldr	r2, [r3, #16]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d118      	bne.n	800880c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008802:	b29b      	uxth	r3, r3
 8008804:	3b01      	subs	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008810:	2b00      	cmp	r3, #0
 8008812:	f47f aec2 	bne.w	800859a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e000      	b.n	8008834 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008832:	2302      	movs	r3, #2
  }
}
 8008834:	4618      	mov	r0, r3
 8008836:	3728      	adds	r7, #40	; 0x28
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	00010004 	.word	0x00010004

08008840 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	4608      	mov	r0, r1
 800884a:	4611      	mov	r1, r2
 800884c:	461a      	mov	r2, r3
 800884e:	4603      	mov	r3, r0
 8008850:	817b      	strh	r3, [r7, #10]
 8008852:	460b      	mov	r3, r1
 8008854:	813b      	strh	r3, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	2200      	movs	r2, #0
 8008872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f960 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00d      	beq.n	800889e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008890:	d103      	bne.n	800889a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e05f      	b.n	800895e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	492d      	ldr	r1, [pc, #180]	; (8008968 <I2C_RequestMemoryWrite+0x128>)
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f998 	bl	8008bea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e04c      	b.n	800895e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088dc:	6a39      	ldr	r1, [r7, #32]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa02 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d107      	bne.n	8008902 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008900:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e02b      	b.n	800895e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d105      	bne.n	8008918 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800890c:	893b      	ldrh	r3, [r7, #8]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	611a      	str	r2, [r3, #16]
 8008916:	e021      	b.n	800895c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008918:	893b      	ldrh	r3, [r7, #8]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	b2da      	uxtb	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008928:	6a39      	ldr	r1, [r7, #32]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f9dc 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2b04      	cmp	r3, #4
 800893c:	d107      	bne.n	800894e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800894c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e005      	b.n	800895e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008952:	893b      	ldrh	r3, [r7, #8]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	00010002 	.word	0x00010002

0800896c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	461a      	mov	r2, r3
 800897a:	4603      	mov	r3, r0
 800897c:	817b      	strh	r3, [r7, #10]
 800897e:	460b      	mov	r3, r1
 8008980:	813b      	strh	r3, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008994:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f8c2 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089cc:	d103      	bne.n	80089d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e0aa      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089da:	897b      	ldrh	r3, [r7, #10]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	6a3a      	ldr	r2, [r7, #32]
 80089ee:	4952      	ldr	r1, [pc, #328]	; (8008b38 <I2C_RequestMemoryRead+0x1cc>)
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f8fa 	bl	8008bea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e097      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a18:	6a39      	ldr	r1, [r7, #32]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f964 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00d      	beq.n	8008a42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d107      	bne.n	8008a3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e076      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d105      	bne.n	8008a54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a48:	893b      	ldrh	r3, [r7, #8]
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	611a      	str	r2, [r3, #16]
 8008a52:	e021      	b.n	8008a98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 f93e 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d107      	bne.n	8008a8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e050      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9a:	6a39      	ldr	r1, [r7, #32]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f923 	bl	8008ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d107      	bne.n	8008ac0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008abe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e035      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ad2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f82b 	bl	8008b3c <I2C_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00d      	beq.n	8008b08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afa:	d103      	bne.n	8008b04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e013      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b08:	897b      	ldrh	r3, [r7, #10]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f043 0301 	orr.w	r3, r3, #1
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	4906      	ldr	r1, [pc, #24]	; (8008b38 <I2C_RequestMemoryRead+0x1cc>)
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f863 	bl	8008bea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	00010002 	.word	0x00010002

08008b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b4c:	e025      	b.n	8008b9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b54:	d021      	beq.n	8008b9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b56:	f7fe fe89 	bl	800786c <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d302      	bcc.n	8008b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d116      	bne.n	8008b9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f043 0220 	orr.w	r2, r3, #32
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e023      	b.n	8008be2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10d      	bne.n	8008bc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	43da      	mvns	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bf0c      	ite	eq
 8008bb6:	2301      	moveq	r3, #1
 8008bb8:	2300      	movne	r3, #0
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	e00c      	b.n	8008bda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	43da      	mvns	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bf0c      	ite	eq
 8008bd2:	2301      	moveq	r3, #1
 8008bd4:	2300      	movne	r3, #0
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d0b6      	beq.n	8008b4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008bf8:	e051      	b.n	8008c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c08:	d123      	bne.n	8008c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f043 0204 	orr.w	r2, r3, #4
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e046      	b.n	8008ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d021      	beq.n	8008c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5a:	f7fe fe07 	bl	800786c <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d116      	bne.n	8008c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	f043 0220 	orr.w	r2, r3, #32
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e020      	b.n	8008ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d10c      	bne.n	8008cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	43da      	mvns	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bf14      	ite	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	2300      	moveq	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	e00b      	b.n	8008cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	43da      	mvns	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d18d      	bne.n	8008bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cf4:	e02d      	b.n	8008d52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f8ce 	bl	8008e98 <I2C_IsAcknowledgeFailed>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e02d      	b.n	8008d62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d021      	beq.n	8008d52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d0e:	f7fe fdad 	bl	800786c <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d302      	bcc.n	8008d24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d116      	bne.n	8008d52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	f043 0220 	orr.w	r2, r3, #32
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e007      	b.n	8008d62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	d1ca      	bne.n	8008cf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d76:	e02d      	b.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f88d 	bl	8008e98 <I2C_IsAcknowledgeFailed>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e02d      	b.n	8008de4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d021      	beq.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d90:	f7fe fd6c 	bl	800786c <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d302      	bcc.n	8008da6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d116      	bne.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	f043 0220 	orr.w	r2, r3, #32
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e007      	b.n	8008de4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d1ca      	bne.n	8008d78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008df8:	e042      	b.n	8008e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d119      	bne.n	8008e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0210 	mvn.w	r2, #16
 8008e10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e029      	b.n	8008e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3c:	f7fe fd16 	bl	800786c <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d116      	bne.n	8008e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	f043 0220 	orr.w	r2, r3, #32
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e007      	b.n	8008e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d1b5      	bne.n	8008dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eae:	d11b      	bne.n	8008ee8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008eb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	f043 0204 	orr.w	r2, r3, #4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d129      	bne.n	8008f60 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2224      	movs	r2, #36	; 0x24
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0210 	bic.w	r2, r2, #16
 8008f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e000      	b.n	8008f62 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d12a      	bne.n	8008fde <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0201 	bic.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	f023 030f 	bic.w	r3, r3, #15
 8008fae:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	89fa      	ldrh	r2, [r7, #14]
 8008fc0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f042 0201 	orr.w	r2, r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e000      	b.n	8008fe0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008fde:	2302      	movs	r3, #2
  }
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e267      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d075      	beq.n	80090f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800900a:	4b88      	ldr	r3, [pc, #544]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f003 030c 	and.w	r3, r3, #12
 8009012:	2b04      	cmp	r3, #4
 8009014:	d00c      	beq.n	8009030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009016:	4b85      	ldr	r3, [pc, #532]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800901e:	2b08      	cmp	r3, #8
 8009020:	d112      	bne.n	8009048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009022:	4b82      	ldr	r3, [pc, #520]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800902a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800902e:	d10b      	bne.n	8009048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009030:	4b7e      	ldr	r3, [pc, #504]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d05b      	beq.n	80090f4 <HAL_RCC_OscConfig+0x108>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d157      	bne.n	80090f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e242      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009050:	d106      	bne.n	8009060 <HAL_RCC_OscConfig+0x74>
 8009052:	4b76      	ldr	r3, [pc, #472]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a75      	ldr	r2, [pc, #468]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	e01d      	b.n	800909c <HAL_RCC_OscConfig+0xb0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009068:	d10c      	bne.n	8009084 <HAL_RCC_OscConfig+0x98>
 800906a:	4b70      	ldr	r3, [pc, #448]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a6f      	ldr	r2, [pc, #444]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	4b6d      	ldr	r3, [pc, #436]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a6c      	ldr	r2, [pc, #432]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800907c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	e00b      	b.n	800909c <HAL_RCC_OscConfig+0xb0>
 8009084:	4b69      	ldr	r3, [pc, #420]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a68      	ldr	r2, [pc, #416]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800908a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	4b66      	ldr	r3, [pc, #408]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a65      	ldr	r2, [pc, #404]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800909a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d013      	beq.n	80090cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a4:	f7fe fbe2 	bl	800786c <HAL_GetTick>
 80090a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090aa:	e008      	b.n	80090be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ac:	f7fe fbde 	bl	800786c <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2b64      	cmp	r3, #100	; 0x64
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e207      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090be:	4b5b      	ldr	r3, [pc, #364]	; (800922c <HAL_RCC_OscConfig+0x240>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0f0      	beq.n	80090ac <HAL_RCC_OscConfig+0xc0>
 80090ca:	e014      	b.n	80090f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090cc:	f7fe fbce 	bl	800786c <HAL_GetTick>
 80090d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090d4:	f7fe fbca 	bl	800786c <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b64      	cmp	r3, #100	; 0x64
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e1f3      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090e6:	4b51      	ldr	r3, [pc, #324]	; (800922c <HAL_RCC_OscConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f0      	bne.n	80090d4 <HAL_RCC_OscConfig+0xe8>
 80090f2:	e000      	b.n	80090f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d063      	beq.n	80091ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009102:	4b4a      	ldr	r3, [pc, #296]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800910e:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009116:	2b08      	cmp	r3, #8
 8009118:	d11c      	bne.n	8009154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800911a:	4b44      	ldr	r3, [pc, #272]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d116      	bne.n	8009154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009126:	4b41      	ldr	r3, [pc, #260]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <HAL_RCC_OscConfig+0x152>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d001      	beq.n	800913e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e1c7      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800913e:	4b3b      	ldr	r3, [pc, #236]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4937      	ldr	r1, [pc, #220]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800914e:	4313      	orrs	r3, r2
 8009150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009152:	e03a      	b.n	80091ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d020      	beq.n	800919e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800915c:	4b34      	ldr	r3, [pc, #208]	; (8009230 <HAL_RCC_OscConfig+0x244>)
 800915e:	2201      	movs	r2, #1
 8009160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009162:	f7fe fb83 	bl	800786c <HAL_GetTick>
 8009166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009168:	e008      	b.n	800917c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800916a:	f7fe fb7f 	bl	800786c <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e1a8      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800917c:	4b2b      	ldr	r3, [pc, #172]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0f0      	beq.n	800916a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009188:	4b28      	ldr	r3, [pc, #160]	; (800922c <HAL_RCC_OscConfig+0x240>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4925      	ldr	r1, [pc, #148]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009198:	4313      	orrs	r3, r2
 800919a:	600b      	str	r3, [r1, #0]
 800919c:	e015      	b.n	80091ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800919e:	4b24      	ldr	r3, [pc, #144]	; (8009230 <HAL_RCC_OscConfig+0x244>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7fe fb62 	bl	800786c <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091ac:	f7fe fb5e 	bl	800786c <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e187      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091be:	4b1b      	ldr	r3, [pc, #108]	; (800922c <HAL_RCC_OscConfig+0x240>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d036      	beq.n	8009244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d016      	beq.n	800920c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <HAL_RCC_OscConfig+0x248>)
 80091e0:	2201      	movs	r2, #1
 80091e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e4:	f7fe fb42 	bl	800786c <HAL_GetTick>
 80091e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ec:	f7fe fb3e 	bl	800786c <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e167      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091fe:	4b0b      	ldr	r3, [pc, #44]	; (800922c <HAL_RCC_OscConfig+0x240>)
 8009200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f0      	beq.n	80091ec <HAL_RCC_OscConfig+0x200>
 800920a:	e01b      	b.n	8009244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <HAL_RCC_OscConfig+0x248>)
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009212:	f7fe fb2b 	bl	800786c <HAL_GetTick>
 8009216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009218:	e00e      	b.n	8009238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800921a:	f7fe fb27 	bl	800786c <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d907      	bls.n	8009238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e150      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
 800922c:	40023800 	.word	0x40023800
 8009230:	42470000 	.word	0x42470000
 8009234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009238:	4b88      	ldr	r3, [pc, #544]	; (800945c <HAL_RCC_OscConfig+0x470>)
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1ea      	bne.n	800921a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 8097 	beq.w	8009380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009256:	4b81      	ldr	r3, [pc, #516]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10f      	bne.n	8009282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	4b7d      	ldr	r3, [pc, #500]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	4a7c      	ldr	r2, [pc, #496]	; (800945c <HAL_RCC_OscConfig+0x470>)
 800926c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009270:	6413      	str	r3, [r2, #64]	; 0x40
 8009272:	4b7a      	ldr	r3, [pc, #488]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927a:	60bb      	str	r3, [r7, #8]
 800927c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800927e:	2301      	movs	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009282:	4b77      	ldr	r3, [pc, #476]	; (8009460 <HAL_RCC_OscConfig+0x474>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928a:	2b00      	cmp	r3, #0
 800928c:	d118      	bne.n	80092c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800928e:	4b74      	ldr	r3, [pc, #464]	; (8009460 <HAL_RCC_OscConfig+0x474>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a73      	ldr	r2, [pc, #460]	; (8009460 <HAL_RCC_OscConfig+0x474>)
 8009294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800929a:	f7fe fae7 	bl	800786c <HAL_GetTick>
 800929e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092a0:	e008      	b.n	80092b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092a2:	f7fe fae3 	bl	800786c <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e10c      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092b4:	4b6a      	ldr	r3, [pc, #424]	; (8009460 <HAL_RCC_OscConfig+0x474>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0f0      	beq.n	80092a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d106      	bne.n	80092d6 <HAL_RCC_OscConfig+0x2ea>
 80092c8:	4b64      	ldr	r3, [pc, #400]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	4a63      	ldr	r2, [pc, #396]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6713      	str	r3, [r2, #112]	; 0x70
 80092d4:	e01c      	b.n	8009310 <HAL_RCC_OscConfig+0x324>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b05      	cmp	r3, #5
 80092dc:	d10c      	bne.n	80092f8 <HAL_RCC_OscConfig+0x30c>
 80092de:	4b5f      	ldr	r3, [pc, #380]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	4a5e      	ldr	r2, [pc, #376]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092e4:	f043 0304 	orr.w	r3, r3, #4
 80092e8:	6713      	str	r3, [r2, #112]	; 0x70
 80092ea:	4b5c      	ldr	r3, [pc, #368]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	4a5b      	ldr	r2, [pc, #364]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092f0:	f043 0301 	orr.w	r3, r3, #1
 80092f4:	6713      	str	r3, [r2, #112]	; 0x70
 80092f6:	e00b      	b.n	8009310 <HAL_RCC_OscConfig+0x324>
 80092f8:	4b58      	ldr	r3, [pc, #352]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fc:	4a57      	ldr	r2, [pc, #348]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	6713      	str	r3, [r2, #112]	; 0x70
 8009304:	4b55      	ldr	r3, [pc, #340]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009308:	4a54      	ldr	r2, [pc, #336]	; (800945c <HAL_RCC_OscConfig+0x470>)
 800930a:	f023 0304 	bic.w	r3, r3, #4
 800930e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d015      	beq.n	8009344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009318:	f7fe faa8 	bl	800786c <HAL_GetTick>
 800931c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800931e:	e00a      	b.n	8009336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009320:	f7fe faa4 	bl	800786c <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	f241 3288 	movw	r2, #5000	; 0x1388
 800932e:	4293      	cmp	r3, r2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e0cb      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009336:	4b49      	ldr	r3, [pc, #292]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0ee      	beq.n	8009320 <HAL_RCC_OscConfig+0x334>
 8009342:	e014      	b.n	800936e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009344:	f7fe fa92 	bl	800786c <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800934a:	e00a      	b.n	8009362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800934c:	f7fe fa8e 	bl	800786c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	f241 3288 	movw	r2, #5000	; 0x1388
 800935a:	4293      	cmp	r3, r2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e0b5      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009362:	4b3e      	ldr	r3, [pc, #248]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1ee      	bne.n	800934c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d105      	bne.n	8009380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	4a38      	ldr	r2, [pc, #224]	; (800945c <HAL_RCC_OscConfig+0x470>)
 800937a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800937e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 80a1 	beq.w	80094cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800938a:	4b34      	ldr	r3, [pc, #208]	; (800945c <HAL_RCC_OscConfig+0x470>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b08      	cmp	r3, #8
 8009394:	d05c      	beq.n	8009450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d141      	bne.n	8009422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800939e:	4b31      	ldr	r3, [pc, #196]	; (8009464 <HAL_RCC_OscConfig+0x478>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093a4:	f7fe fa62 	bl	800786c <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093aa:	e008      	b.n	80093be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ac:	f7fe fa5e 	bl	800786c <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e087      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093be:	4b27      	ldr	r3, [pc, #156]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1f0      	bne.n	80093ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	019b      	lsls	r3, r3, #6
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	3b01      	subs	r3, #1
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	491b      	ldr	r1, [pc, #108]	; (800945c <HAL_RCC_OscConfig+0x470>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093f4:	4b1b      	ldr	r3, [pc, #108]	; (8009464 <HAL_RCC_OscConfig+0x478>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093fa:	f7fe fa37 	bl	800786c <HAL_GetTick>
 80093fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009400:	e008      	b.n	8009414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009402:	f7fe fa33 	bl	800786c <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d901      	bls.n	8009414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e05c      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0f0      	beq.n	8009402 <HAL_RCC_OscConfig+0x416>
 8009420:	e054      	b.n	80094cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <HAL_RCC_OscConfig+0x478>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009428:	f7fe fa20 	bl	800786c <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009430:	f7fe fa1c 	bl	800786c <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e045      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <HAL_RCC_OscConfig+0x470>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x444>
 800944e:	e03d      	b.n	80094cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d107      	bne.n	8009468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e038      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
 800945c:	40023800 	.word	0x40023800
 8009460:	40007000 	.word	0x40007000
 8009464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009468:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <HAL_RCC_OscConfig+0x4ec>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d028      	beq.n	80094c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009480:	429a      	cmp	r2, r3
 8009482:	d121      	bne.n	80094c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800948e:	429a      	cmp	r2, r3
 8009490:	d11a      	bne.n	80094c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009498:	4013      	ands	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800949e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d111      	bne.n	80094c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	3b01      	subs	r3, #1
 80094b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d107      	bne.n	80094c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d001      	beq.n	80094cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e000      	b.n	80094ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40023800 	.word	0x40023800

080094dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0cc      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	4b68      	ldr	r3, [pc, #416]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d90c      	bls.n	8009518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b65      	ldr	r3, [pc, #404]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009506:	4b63      	ldr	r3, [pc, #396]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d001      	beq.n	8009518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0b8      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d020      	beq.n	8009566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0304 	and.w	r3, r3, #4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009530:	4b59      	ldr	r3, [pc, #356]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4a58      	ldr	r2, [pc, #352]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800953a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0308 	and.w	r3, r3, #8
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009548:	4b53      	ldr	r3, [pc, #332]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	4a52      	ldr	r2, [pc, #328]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800954e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009554:	4b50      	ldr	r3, [pc, #320]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	494d      	ldr	r1, [pc, #308]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009562:	4313      	orrs	r3, r2
 8009564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d044      	beq.n	80095fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d107      	bne.n	800958a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800957a:	4b47      	ldr	r3, [pc, #284]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d119      	bne.n	80095ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e07f      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d003      	beq.n	800959a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009596:	2b03      	cmp	r3, #3
 8009598:	d107      	bne.n	80095aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800959a:	4b3f      	ldr	r3, [pc, #252]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d109      	bne.n	80095ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e06f      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095aa:	4b3b      	ldr	r3, [pc, #236]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e067      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095ba:	4b37      	ldr	r3, [pc, #220]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f023 0203 	bic.w	r2, r3, #3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4934      	ldr	r1, [pc, #208]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095cc:	f7fe f94e 	bl	800786c <HAL_GetTick>
 80095d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d2:	e00a      	b.n	80095ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095d4:	f7fe f94a 	bl	800786c <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e04f      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ea:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f003 020c 	and.w	r2, r3, #12
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d1eb      	bne.n	80095d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d20c      	bcs.n	8009624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800960a:	4b22      	ldr	r3, [pc, #136]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009612:	4b20      	ldr	r3, [pc, #128]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d001      	beq.n	8009624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e032      	b.n	800968a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d008      	beq.n	8009642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4916      	ldr	r1, [pc, #88]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	4313      	orrs	r3, r2
 8009640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	490e      	ldr	r1, [pc, #56]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	4313      	orrs	r3, r2
 8009660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009662:	f000 f821 	bl	80096a8 <HAL_RCC_GetSysClockFreq>
 8009666:	4602      	mov	r2, r0
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	091b      	lsrs	r3, r3, #4
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	490a      	ldr	r1, [pc, #40]	; (800969c <HAL_RCC_ClockConfig+0x1c0>)
 8009674:	5ccb      	ldrb	r3, [r1, r3]
 8009676:	fa22 f303 	lsr.w	r3, r2, r3
 800967a:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <HAL_RCC_ClockConfig+0x1c4>)
 800967c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <HAL_RCC_ClockConfig+0x1c8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe f8ae 	bl	80077e4 <HAL_InitTick>

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40023c00 	.word	0x40023c00
 8009698:	40023800 	.word	0x40023800
 800969c:	0800e60c 	.word	0x0800e60c
 80096a0:	20000038 	.word	0x20000038
 80096a4:	2000003c 	.word	0x2000003c

080096a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096ac:	b090      	sub	sp, #64	; 0x40
 80096ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	637b      	str	r3, [r7, #52]	; 0x34
 80096b4:	2300      	movs	r3, #0
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b8:	2300      	movs	r3, #0
 80096ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096c0:	4b59      	ldr	r3, [pc, #356]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 030c 	and.w	r3, r3, #12
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d00d      	beq.n	80096e8 <HAL_RCC_GetSysClockFreq+0x40>
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	f200 80a1 	bhi.w	8009814 <HAL_RCC_GetSysClockFreq+0x16c>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <HAL_RCC_GetSysClockFreq+0x34>
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d003      	beq.n	80096e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80096da:	e09b      	b.n	8009814 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096dc:	4b53      	ldr	r3, [pc, #332]	; (800982c <HAL_RCC_GetSysClockFreq+0x184>)
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80096e0:	e09b      	b.n	800981a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096e2:	4b53      	ldr	r3, [pc, #332]	; (8009830 <HAL_RCC_GetSysClockFreq+0x188>)
 80096e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80096e6:	e098      	b.n	800981a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096e8:	4b4f      	ldr	r3, [pc, #316]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096f2:	4b4d      	ldr	r3, [pc, #308]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d028      	beq.n	8009750 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096fe:	4b4a      	ldr	r3, [pc, #296]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	099b      	lsrs	r3, r3, #6
 8009704:	2200      	movs	r2, #0
 8009706:	623b      	str	r3, [r7, #32]
 8009708:	627a      	str	r2, [r7, #36]	; 0x24
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009710:	2100      	movs	r1, #0
 8009712:	4b47      	ldr	r3, [pc, #284]	; (8009830 <HAL_RCC_GetSysClockFreq+0x188>)
 8009714:	fb03 f201 	mul.w	r2, r3, r1
 8009718:	2300      	movs	r3, #0
 800971a:	fb00 f303 	mul.w	r3, r0, r3
 800971e:	4413      	add	r3, r2
 8009720:	4a43      	ldr	r2, [pc, #268]	; (8009830 <HAL_RCC_GetSysClockFreq+0x188>)
 8009722:	fba0 1202 	umull	r1, r2, r0, r2
 8009726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009728:	460a      	mov	r2, r1
 800972a:	62ba      	str	r2, [r7, #40]	; 0x28
 800972c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972e:	4413      	add	r3, r2
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009734:	2200      	movs	r2, #0
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	61fa      	str	r2, [r7, #28]
 800973a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800973e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009742:	f7f6 fda5 	bl	8000290 <__aeabi_uldivmod>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4613      	mov	r3, r2
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800974e:	e053      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009750:	4b35      	ldr	r3, [pc, #212]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	099b      	lsrs	r3, r3, #6
 8009756:	2200      	movs	r2, #0
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	617a      	str	r2, [r7, #20]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009762:	f04f 0b00 	mov.w	fp, #0
 8009766:	4652      	mov	r2, sl
 8009768:	465b      	mov	r3, fp
 800976a:	f04f 0000 	mov.w	r0, #0
 800976e:	f04f 0100 	mov.w	r1, #0
 8009772:	0159      	lsls	r1, r3, #5
 8009774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009778:	0150      	lsls	r0, r2, #5
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	ebb2 080a 	subs.w	r8, r2, sl
 8009782:	eb63 090b 	sbc.w	r9, r3, fp
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	f04f 0300 	mov.w	r3, #0
 800978e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009792:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009796:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800979a:	ebb2 0408 	subs.w	r4, r2, r8
 800979e:	eb63 0509 	sbc.w	r5, r3, r9
 80097a2:	f04f 0200 	mov.w	r2, #0
 80097a6:	f04f 0300 	mov.w	r3, #0
 80097aa:	00eb      	lsls	r3, r5, #3
 80097ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097b0:	00e2      	lsls	r2, r4, #3
 80097b2:	4614      	mov	r4, r2
 80097b4:	461d      	mov	r5, r3
 80097b6:	eb14 030a 	adds.w	r3, r4, sl
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	eb45 030b 	adc.w	r3, r5, fp
 80097c0:	607b      	str	r3, [r7, #4]
 80097c2:	f04f 0200 	mov.w	r2, #0
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097ce:	4629      	mov	r1, r5
 80097d0:	028b      	lsls	r3, r1, #10
 80097d2:	4621      	mov	r1, r4
 80097d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097d8:	4621      	mov	r1, r4
 80097da:	028a      	lsls	r2, r1, #10
 80097dc:	4610      	mov	r0, r2
 80097de:	4619      	mov	r1, r3
 80097e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e2:	2200      	movs	r2, #0
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	60fa      	str	r2, [r7, #12]
 80097e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097ec:	f7f6 fd50 	bl	8000290 <__aeabi_uldivmod>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4613      	mov	r3, r2
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_RCC_GetSysClockFreq+0x180>)
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	0c1b      	lsrs	r3, r3, #16
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	3301      	adds	r3, #1
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009810:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009812:	e002      	b.n	800981a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009814:	4b05      	ldr	r3, [pc, #20]	; (800982c <HAL_RCC_GetSysClockFreq+0x184>)
 8009816:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800981c:	4618      	mov	r0, r3
 800981e:	3740      	adds	r7, #64	; 0x40
 8009820:	46bd      	mov	sp, r7
 8009822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009826:	bf00      	nop
 8009828:	40023800 	.word	0x40023800
 800982c:	00f42400 	.word	0x00f42400
 8009830:	017d7840 	.word	0x017d7840

08009834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009838:	4b03      	ldr	r3, [pc, #12]	; (8009848 <HAL_RCC_GetHCLKFreq+0x14>)
 800983a:	681b      	ldr	r3, [r3, #0]
}
 800983c:	4618      	mov	r0, r3
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000038 	.word	0x20000038

0800984c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009850:	f7ff fff0 	bl	8009834 <HAL_RCC_GetHCLKFreq>
 8009854:	4602      	mov	r2, r0
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	0a9b      	lsrs	r3, r3, #10
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	4903      	ldr	r1, [pc, #12]	; (8009870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009862:	5ccb      	ldrb	r3, [r1, r3]
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009868:	4618      	mov	r0, r3
 800986a:	bd80      	pop	{r7, pc}
 800986c:	40023800 	.word	0x40023800
 8009870:	0800e61c 	.word	0x0800e61c

08009874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009878:	f7ff ffdc 	bl	8009834 <HAL_RCC_GetHCLKFreq>
 800987c:	4602      	mov	r2, r0
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	0b5b      	lsrs	r3, r3, #13
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	4903      	ldr	r1, [pc, #12]	; (8009898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800988a:	5ccb      	ldrb	r3, [r1, r3]
 800988c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009890:	4618      	mov	r0, r3
 8009892:	bd80      	pop	{r7, pc}
 8009894:	40023800 	.word	0x40023800
 8009898:	0800e61c 	.word	0x0800e61c

0800989c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e041      	b.n	8009932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7fb fa5e 	bl	8004d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4619      	mov	r1, r3
 80098da:	4610      	mov	r0, r2
 80098dc:	f000 fc78 	bl	800a1d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e041      	b.n	80099d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d106      	bne.n	8009966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f839 	bl	80099d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2202      	movs	r2, #2
 800996a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3304      	adds	r3, #4
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f000 fc29 	bl	800a1d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <HAL_TIM_PWM_Start+0x24>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	bf14      	ite	ne
 8009a08:	2301      	movne	r3, #1
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	e022      	b.n	8009a56 <HAL_TIM_PWM_Start+0x6a>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d109      	bne.n	8009a2a <HAL_TIM_PWM_Start+0x3e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	bf14      	ite	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	2300      	moveq	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	e015      	b.n	8009a56 <HAL_TIM_PWM_Start+0x6a>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d109      	bne.n	8009a44 <HAL_TIM_PWM_Start+0x58>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	bf14      	ite	ne
 8009a3c:	2301      	movne	r3, #1
 8009a3e:	2300      	moveq	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	e008      	b.n	8009a56 <HAL_TIM_PWM_Start+0x6a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	bf14      	ite	ne
 8009a50:	2301      	movne	r3, #1
 8009a52:	2300      	moveq	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e07c      	b.n	8009b58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d104      	bne.n	8009a6e <HAL_TIM_PWM_Start+0x82>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	e013      	b.n	8009a96 <HAL_TIM_PWM_Start+0xaa>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d104      	bne.n	8009a7e <HAL_TIM_PWM_Start+0x92>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a7c:	e00b      	b.n	8009a96 <HAL_TIM_PWM_Start+0xaa>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_PWM_Start+0xa2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a8c:	e003      	b.n	8009a96 <HAL_TIM_PWM_Start+0xaa>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2202      	movs	r2, #2
 8009a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fe80 	bl	800a7a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a2d      	ldr	r2, [pc, #180]	; (8009b60 <HAL_TIM_PWM_Start+0x174>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d004      	beq.n	8009ab8 <HAL_TIM_PWM_Start+0xcc>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a2c      	ldr	r2, [pc, #176]	; (8009b64 <HAL_TIM_PWM_Start+0x178>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d101      	bne.n	8009abc <HAL_TIM_PWM_Start+0xd0>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <HAL_TIM_PWM_Start+0xd2>
 8009abc:	2300      	movs	r3, #0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a22      	ldr	r2, [pc, #136]	; (8009b60 <HAL_TIM_PWM_Start+0x174>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d022      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae4:	d01d      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a1f      	ldr	r2, [pc, #124]	; (8009b68 <HAL_TIM_PWM_Start+0x17c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d018      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <HAL_TIM_PWM_Start+0x180>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d013      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1c      	ldr	r2, [pc, #112]	; (8009b70 <HAL_TIM_PWM_Start+0x184>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00e      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a16      	ldr	r2, [pc, #88]	; (8009b64 <HAL_TIM_PWM_Start+0x178>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d009      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a18      	ldr	r2, [pc, #96]	; (8009b74 <HAL_TIM_PWM_Start+0x188>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d004      	beq.n	8009b22 <HAL_TIM_PWM_Start+0x136>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_TIM_PWM_Start+0x18c>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d111      	bne.n	8009b46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b06      	cmp	r3, #6
 8009b32:	d010      	beq.n	8009b56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b44:	e007      	b.n	8009b56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0201 	orr.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40010400 	.word	0x40010400
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40000c00 	.word	0x40000c00
 8009b74:	40014000 	.word	0x40014000
 8009b78:	40001800 	.word	0x40001800

08009b7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fe08 	bl	800a7a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a2e      	ldr	r2, [pc, #184]	; (8009c54 <HAL_TIM_PWM_Stop+0xd8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d004      	beq.n	8009ba8 <HAL_TIM_PWM_Stop+0x2c>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	; (8009c58 <HAL_TIM_PWM_Stop+0xdc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d101      	bne.n	8009bac <HAL_TIM_PWM_Stop+0x30>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <HAL_TIM_PWM_Stop+0x32>
 8009bac:	2300      	movs	r3, #0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d017      	beq.n	8009be2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6a1a      	ldr	r2, [r3, #32]
 8009bb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10f      	bne.n	8009be2 <HAL_TIM_PWM_Stop+0x66>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	f240 4344 	movw	r3, #1092	; 0x444
 8009bcc:	4013      	ands	r3, r2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d107      	bne.n	8009be2 <HAL_TIM_PWM_Stop+0x66>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009be0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a1a      	ldr	r2, [r3, #32]
 8009be8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10f      	bne.n	8009c12 <HAL_TIM_PWM_Stop+0x96>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a1a      	ldr	r2, [r3, #32]
 8009bf8:	f240 4344 	movw	r3, #1092	; 0x444
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <HAL_TIM_PWM_Stop+0x96>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d104      	bne.n	8009c22 <HAL_TIM_PWM_Stop+0xa6>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c20:	e013      	b.n	8009c4a <HAL_TIM_PWM_Stop+0xce>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d104      	bne.n	8009c32 <HAL_TIM_PWM_Stop+0xb6>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c30:	e00b      	b.n	8009c4a <HAL_TIM_PWM_Stop+0xce>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d104      	bne.n	8009c42 <HAL_TIM_PWM_Stop+0xc6>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c40:	e003      	b.n	8009c4a <HAL_TIM_PWM_Stop+0xce>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40010400 	.word	0x40010400

08009c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d122      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d11b      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f06f 0202 	mvn.w	r2, #2
 8009c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa77 	bl	800a192 <HAL_TIM_IC_CaptureCallback>
 8009ca4:	e005      	b.n	8009cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa69 	bl	800a17e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa7a 	bl	800a1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d122      	bne.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d11b      	bne.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0204 	mvn.w	r2, #4
 8009cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa4d 	bl	800a192 <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa3f 	bl	800a17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa50 	bl	800a1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0308 	and.w	r3, r3, #8
 8009d16:	2b08      	cmp	r3, #8
 8009d18:	d122      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d11b      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f06f 0208 	mvn.w	r2, #8
 8009d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2204      	movs	r2, #4
 8009d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa23 	bl	800a192 <HAL_TIM_IC_CaptureCallback>
 8009d4c:	e005      	b.n	8009d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa15 	bl	800a17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fa26 	bl	800a1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0310 	and.w	r3, r3, #16
 8009d6a:	2b10      	cmp	r3, #16
 8009d6c:	d122      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	2b10      	cmp	r3, #16
 8009d7a:	d11b      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f06f 0210 	mvn.w	r2, #16
 8009d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2208      	movs	r2, #8
 8009d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f9f9 	bl	800a192 <HAL_TIM_IC_CaptureCallback>
 8009da0:	e005      	b.n	8009dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f9eb 	bl	800a17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9fc 	bl	800a1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d10e      	bne.n	8009de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d107      	bne.n	8009de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0201 	mvn.w	r2, #1
 8009dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7fa fe6e 	bl	8004abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dea:	2b80      	cmp	r3, #128	; 0x80
 8009dec:	d10e      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df8:	2b80      	cmp	r3, #128	; 0x80
 8009dfa:	d107      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fdca 	bl	800a9a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e16:	2b40      	cmp	r3, #64	; 0x40
 8009e18:	d10e      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e24:	2b40      	cmp	r3, #64	; 0x40
 8009e26:	d107      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f9c1 	bl	800a1ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	d10e      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d107      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f06f 0220 	mvn.w	r2, #32
 8009e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fd94 	bl	800a98c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e0ae      	b.n	8009fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b0c      	cmp	r3, #12
 8009e96:	f200 809f 	bhi.w	8009fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009fd9 	.word	0x08009fd9
 8009ea8:	08009fd9 	.word	0x08009fd9
 8009eac:	08009fd9 	.word	0x08009fd9
 8009eb0:	08009f15 	.word	0x08009f15
 8009eb4:	08009fd9 	.word	0x08009fd9
 8009eb8:	08009fd9 	.word	0x08009fd9
 8009ebc:	08009fd9 	.word	0x08009fd9
 8009ec0:	08009f57 	.word	0x08009f57
 8009ec4:	08009fd9 	.word	0x08009fd9
 8009ec8:	08009fd9 	.word	0x08009fd9
 8009ecc:	08009fd9 	.word	0x08009fd9
 8009ed0:	08009f97 	.word	0x08009f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fa18 	bl	800a310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699a      	ldr	r2, [r3, #24]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0208 	orr.w	r2, r2, #8
 8009eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0204 	bic.w	r2, r2, #4
 8009efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6999      	ldr	r1, [r3, #24]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	691a      	ldr	r2, [r3, #16]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	619a      	str	r2, [r3, #24]
      break;
 8009f12:	e064      	b.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 fa68 	bl	800a3f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699a      	ldr	r2, [r3, #24]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6999      	ldr	r1, [r3, #24]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	021a      	lsls	r2, r3, #8
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	619a      	str	r2, [r3, #24]
      break;
 8009f54:	e043      	b.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fabd 	bl	800a4dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69da      	ldr	r2, [r3, #28]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0208 	orr.w	r2, r2, #8
 8009f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0204 	bic.w	r2, r2, #4
 8009f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69d9      	ldr	r1, [r3, #28]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	691a      	ldr	r2, [r3, #16]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	61da      	str	r2, [r3, #28]
      break;
 8009f94:	e023      	b.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fb11 	bl	800a5c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	021a      	lsls	r2, r3, #8
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	61da      	str	r2, [r3, #28]
      break;
 8009fd6:	e002      	b.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d101      	bne.n	800a00c <HAL_TIM_ConfigClockSource+0x1c>
 800a008:	2302      	movs	r3, #2
 800a00a:	e0b4      	b.n	800a176 <HAL_TIM_ConfigClockSource+0x186>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a02a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a044:	d03e      	beq.n	800a0c4 <HAL_TIM_ConfigClockSource+0xd4>
 800a046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a04a:	f200 8087 	bhi.w	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a052:	f000 8086 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x172>
 800a056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05a:	d87f      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a05c:	2b70      	cmp	r3, #112	; 0x70
 800a05e:	d01a      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0xa6>
 800a060:	2b70      	cmp	r3, #112	; 0x70
 800a062:	d87b      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a064:	2b60      	cmp	r3, #96	; 0x60
 800a066:	d050      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x11a>
 800a068:	2b60      	cmp	r3, #96	; 0x60
 800a06a:	d877      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a06c:	2b50      	cmp	r3, #80	; 0x50
 800a06e:	d03c      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0xfa>
 800a070:	2b50      	cmp	r3, #80	; 0x50
 800a072:	d873      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d058      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0x13a>
 800a078:	2b40      	cmp	r3, #64	; 0x40
 800a07a:	d86f      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a07c:	2b30      	cmp	r3, #48	; 0x30
 800a07e:	d064      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0x15a>
 800a080:	2b30      	cmp	r3, #48	; 0x30
 800a082:	d86b      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a084:	2b20      	cmp	r3, #32
 800a086:	d060      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0x15a>
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d867      	bhi.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d05c      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0x15a>
 800a090:	2b10      	cmp	r3, #16
 800a092:	d05a      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0x15a>
 800a094:	e062      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6899      	ldr	r1, [r3, #8]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f000 fb5d 	bl	800a764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	609a      	str	r2, [r3, #8]
      break;
 800a0c2:	e04f      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	6899      	ldr	r1, [r3, #8]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f000 fb46 	bl	800a764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0e6:	609a      	str	r2, [r3, #8]
      break;
 800a0e8:	e03c      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6859      	ldr	r1, [r3, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f000 faba 	bl	800a670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2150      	movs	r1, #80	; 0x50
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fb13 	bl	800a72e <TIM_ITRx_SetConfig>
      break;
 800a108:	e02c      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6859      	ldr	r1, [r3, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	461a      	mov	r2, r3
 800a118:	f000 fad9 	bl	800a6ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2160      	movs	r1, #96	; 0x60
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fb03 	bl	800a72e <TIM_ITRx_SetConfig>
      break;
 800a128:	e01c      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	6859      	ldr	r1, [r3, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	461a      	mov	r2, r3
 800a138:	f000 fa9a 	bl	800a670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2140      	movs	r1, #64	; 0x40
 800a142:	4618      	mov	r0, r3
 800a144:	f000 faf3 	bl	800a72e <TIM_ITRx_SetConfig>
      break;
 800a148:	e00c      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f000 faea 	bl	800a72e <TIM_ITRx_SetConfig>
      break;
 800a15a:	e003      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	73fb      	strb	r3, [r7, #15]
      break;
 800a160:	e000      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a19a:	bf00      	nop
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1c2:	bf00      	nop
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a40      	ldr	r2, [pc, #256]	; (800a2e4 <TIM_Base_SetConfig+0x114>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d013      	beq.n	800a210 <TIM_Base_SetConfig+0x40>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ee:	d00f      	beq.n	800a210 <TIM_Base_SetConfig+0x40>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a3d      	ldr	r2, [pc, #244]	; (800a2e8 <TIM_Base_SetConfig+0x118>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00b      	beq.n	800a210 <TIM_Base_SetConfig+0x40>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a3c      	ldr	r2, [pc, #240]	; (800a2ec <TIM_Base_SetConfig+0x11c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d007      	beq.n	800a210 <TIM_Base_SetConfig+0x40>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a3b      	ldr	r2, [pc, #236]	; (800a2f0 <TIM_Base_SetConfig+0x120>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_Base_SetConfig+0x40>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a3a      	ldr	r2, [pc, #232]	; (800a2f4 <TIM_Base_SetConfig+0x124>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d108      	bne.n	800a222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a2f      	ldr	r2, [pc, #188]	; (800a2e4 <TIM_Base_SetConfig+0x114>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d02b      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a230:	d027      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a2c      	ldr	r2, [pc, #176]	; (800a2e8 <TIM_Base_SetConfig+0x118>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d023      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a2b      	ldr	r2, [pc, #172]	; (800a2ec <TIM_Base_SetConfig+0x11c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d01f      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <TIM_Base_SetConfig+0x120>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d01b      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a29      	ldr	r2, [pc, #164]	; (800a2f4 <TIM_Base_SetConfig+0x124>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d017      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a28      	ldr	r2, [pc, #160]	; (800a2f8 <TIM_Base_SetConfig+0x128>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d013      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a27      	ldr	r2, [pc, #156]	; (800a2fc <TIM_Base_SetConfig+0x12c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d00f      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a26      	ldr	r2, [pc, #152]	; (800a300 <TIM_Base_SetConfig+0x130>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00b      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a25      	ldr	r2, [pc, #148]	; (800a304 <TIM_Base_SetConfig+0x134>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d007      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a24      	ldr	r2, [pc, #144]	; (800a308 <TIM_Base_SetConfig+0x138>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d003      	beq.n	800a282 <TIM_Base_SetConfig+0xb2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a23      	ldr	r2, [pc, #140]	; (800a30c <TIM_Base_SetConfig+0x13c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d108      	bne.n	800a294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a0a      	ldr	r2, [pc, #40]	; (800a2e4 <TIM_Base_SetConfig+0x114>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d003      	beq.n	800a2c8 <TIM_Base_SetConfig+0xf8>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a0c      	ldr	r2, [pc, #48]	; (800a2f4 <TIM_Base_SetConfig+0x124>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d103      	bne.n	800a2d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	615a      	str	r2, [r3, #20]
}
 800a2d6:	bf00      	nop
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	40010000 	.word	0x40010000
 800a2e8:	40000400 	.word	0x40000400
 800a2ec:	40000800 	.word	0x40000800
 800a2f0:	40000c00 	.word	0x40000c00
 800a2f4:	40010400 	.word	0x40010400
 800a2f8:	40014000 	.word	0x40014000
 800a2fc:	40014400 	.word	0x40014400
 800a300:	40014800 	.word	0x40014800
 800a304:	40001800 	.word	0x40001800
 800a308:	40001c00 	.word	0x40001c00
 800a30c:	40002000 	.word	0x40002000

0800a310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	f023 0201 	bic.w	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f023 0302 	bic.w	r3, r3, #2
 800a358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4313      	orrs	r3, r2
 800a362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a20      	ldr	r2, [pc, #128]	; (800a3e8 <TIM_OC1_SetConfig+0xd8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d003      	beq.n	800a374 <TIM_OC1_SetConfig+0x64>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a1f      	ldr	r2, [pc, #124]	; (800a3ec <TIM_OC1_SetConfig+0xdc>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d10c      	bne.n	800a38e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f023 0308 	bic.w	r3, r3, #8
 800a37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f023 0304 	bic.w	r3, r3, #4
 800a38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <TIM_OC1_SetConfig+0xd8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d003      	beq.n	800a39e <TIM_OC1_SetConfig+0x8e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <TIM_OC1_SetConfig+0xdc>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d111      	bne.n	800a3c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	621a      	str	r2, [r3, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40010400 	.word	0x40010400

0800a3f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f023 0210 	bic.w	r2, r3, #16
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f023 0320 	bic.w	r3, r3, #32
 800a43a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	011b      	lsls	r3, r3, #4
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a22      	ldr	r2, [pc, #136]	; (800a4d4 <TIM_OC2_SetConfig+0xe4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_OC2_SetConfig+0x68>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <TIM_OC2_SetConfig+0xe8>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d10d      	bne.n	800a474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	011b      	lsls	r3, r3, #4
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4313      	orrs	r3, r2
 800a46a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a17      	ldr	r2, [pc, #92]	; (800a4d4 <TIM_OC2_SetConfig+0xe4>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d003      	beq.n	800a484 <TIM_OC2_SetConfig+0x94>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a16      	ldr	r2, [pc, #88]	; (800a4d8 <TIM_OC2_SetConfig+0xe8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d113      	bne.n	800a4ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a48a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	621a      	str	r2, [r3, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40010000 	.word	0x40010000
 800a4d8:	40010400 	.word	0x40010400

0800a4dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	021b      	lsls	r3, r3, #8
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a21      	ldr	r2, [pc, #132]	; (800a5bc <TIM_OC3_SetConfig+0xe0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d003      	beq.n	800a542 <TIM_OC3_SetConfig+0x66>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a20      	ldr	r2, [pc, #128]	; (800a5c0 <TIM_OC3_SetConfig+0xe4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d10d      	bne.n	800a55e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	4313      	orrs	r3, r2
 800a554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a55c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <TIM_OC3_SetConfig+0xe0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d003      	beq.n	800a56e <TIM_OC3_SetConfig+0x92>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <TIM_OC3_SetConfig+0xe4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d113      	bne.n	800a596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	4313      	orrs	r3, r2
 800a588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	621a      	str	r2, [r3, #32]
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400

0800a5c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	021b      	lsls	r3, r3, #8
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a60e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	031b      	lsls	r3, r3, #12
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4313      	orrs	r3, r2
 800a61a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a12      	ldr	r2, [pc, #72]	; (800a668 <TIM_OC4_SetConfig+0xa4>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d003      	beq.n	800a62c <TIM_OC4_SetConfig+0x68>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a11      	ldr	r2, [pc, #68]	; (800a66c <TIM_OC4_SetConfig+0xa8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d109      	bne.n	800a640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	019b      	lsls	r3, r3, #6
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010400 	.word	0x40010400

0800a670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	f023 0201 	bic.w	r2, r3, #1
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	011b      	lsls	r3, r3, #4
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f023 030a 	bic.w	r3, r3, #10
 800a6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	621a      	str	r2, [r3, #32]
}
 800a6c2:	bf00      	nop
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	f023 0210 	bic.w	r2, r3, #16
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	031b      	lsls	r3, r3, #12
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	4313      	orrs	r3, r2
 800a702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a70a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	011b      	lsls	r3, r3, #4
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	4313      	orrs	r3, r2
 800a714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	f043 0307 	orr.w	r3, r3, #7
 800a750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	609a      	str	r2, [r3, #8]
}
 800a758:	bf00      	nop
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a77e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	021a      	lsls	r2, r3, #8
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	431a      	orrs	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	609a      	str	r2, [r3, #8]
}
 800a798:	bf00      	nop
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f003 031f 	and.w	r3, r3, #31
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a1a      	ldr	r2, [r3, #32]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	43db      	mvns	r3, r3
 800a7c6:	401a      	ands	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6a1a      	ldr	r2, [r3, #32]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f003 031f 	and.w	r3, r3, #31
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	621a      	str	r2, [r3, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	371c      	adds	r7, #28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d101      	bne.n	800a808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a804:	2302      	movs	r3, #2
 800a806:	e05a      	b.n	800a8be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a21      	ldr	r2, [pc, #132]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d022      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a854:	d01d      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a1d      	ldr	r2, [pc, #116]	; (800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d018      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a1b      	ldr	r2, [pc, #108]	; (800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d013      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a1a      	ldr	r2, [pc, #104]	; (800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d00e      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a18      	ldr	r2, [pc, #96]	; (800a8dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d009      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a17      	ldr	r2, [pc, #92]	; (800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d004      	beq.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a15      	ldr	r2, [pc, #84]	; (800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d10c      	bne.n	800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40010400 	.word	0x40010400
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40001800 	.word	0x40001800

0800a8e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a900:	2302      	movs	r3, #2
 800a902:	e03d      	b.n	800a980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	4313      	orrs	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4313      	orrs	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e03f      	b.n	800aa46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fa fa6e 	bl	8004ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2224      	movs	r2, #36	; 0x24
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fe0f 	bl	800b61c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	691a      	ldr	r2, [r3, #16]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	695a      	ldr	r2, [r3, #20]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2220      	movs	r2, #32
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2220      	movs	r2, #32
 800aa40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b08a      	sub	sp, #40	; 0x28
 800aa52:	af02      	add	r7, sp, #8
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	603b      	str	r3, [r7, #0]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d17c      	bne.n	800ab68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <HAL_UART_Transmit+0x2c>
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e075      	b.n	800ab6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d101      	bne.n	800aa8c <HAL_UART_Transmit+0x3e>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e06e      	b.n	800ab6a <HAL_UART_Transmit+0x11c>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2221      	movs	r2, #33	; 0x21
 800aa9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaa2:	f7fc fee3 	bl	800786c <HAL_GetTick>
 800aaa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	88fa      	ldrh	r2, [r7, #6]
 800aab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aabc:	d108      	bne.n	800aad0 <HAL_UART_Transmit+0x82>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	e003      	b.n	800aad8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aae0:	e02a      	b.n	800ab38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2200      	movs	r2, #0
 800aaea:	2180      	movs	r1, #128	; 0x80
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 fb4f 	bl	800b190 <UART_WaitOnFlagUntilTimeout>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e036      	b.n	800ab6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10b      	bne.n	800ab1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	3302      	adds	r3, #2
 800ab16:	61bb      	str	r3, [r7, #24]
 800ab18:	e007      	b.n	800ab2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	781a      	ldrb	r2, [r3, #0]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	3301      	adds	r3, #1
 800ab28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1cf      	bne.n	800aae2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2140      	movs	r1, #64	; 0x40
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 fb1f 	bl	800b190 <UART_WaitOnFlagUntilTimeout>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e006      	b.n	800ab6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e000      	b.n	800ab6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ab68:	2302      	movs	r3, #2
  }
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d130      	bne.n	800abee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_UART_Transmit_IT+0x26>
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e029      	b.n	800abf0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d101      	bne.n	800abaa <HAL_UART_Transmit_IT+0x38>
 800aba6:	2302      	movs	r3, #2
 800aba8:	e022      	b.n	800abf0 <HAL_UART_Transmit_IT+0x7e>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	88fa      	ldrh	r2, [r7, #6]
 800abc2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2221      	movs	r2, #33	; 0x21
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800abe8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	e000      	b.n	800abf0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800abee:	2302      	movs	r3, #2
  }
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d11d      	bne.n	800ac52 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_UART_Receive_IT+0x26>
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e016      	b.n	800ac54 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d101      	bne.n	800ac34 <HAL_UART_Receive_IT+0x38>
 800ac30:	2302      	movs	r3, #2
 800ac32:	e00f      	b.n	800ac54 <HAL_UART_Receive_IT+0x58>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac42:	88fb      	ldrh	r3, [r7, #6]
 800ac44:	461a      	mov	r2, r3
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fb0f 	bl	800b26c <UART_Start_Receive_IT>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	e000      	b.n	800ac54 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b0ba      	sub	sp, #232	; 0xe8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ac9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10f      	bne.n	800acc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d009      	beq.n	800acc2 <HAL_UART_IRQHandler+0x66>
 800acae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fbf3 	bl	800b4a6 <UART_Receive_IT>
      return;
 800acc0:	e256      	b.n	800b170 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 80de 	beq.w	800ae88 <HAL_UART_IRQHandler+0x22c>
 800accc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80d1 	beq.w	800ae88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ace6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00b      	beq.n	800ad0a <HAL_UART_IRQHandler+0xae>
 800acf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d005      	beq.n	800ad0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad02:	f043 0201 	orr.w	r2, r3, #1
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00b      	beq.n	800ad2e <HAL_UART_IRQHandler+0xd2>
 800ad16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	f043 0202 	orr.w	r2, r3, #2
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00b      	beq.n	800ad52 <HAL_UART_IRQHandler+0xf6>
 800ad3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4a:	f043 0204 	orr.w	r2, r3, #4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad56:	f003 0308 	and.w	r3, r3, #8
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d011      	beq.n	800ad82 <HAL_UART_IRQHandler+0x126>
 800ad5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	f043 0208 	orr.w	r2, r3, #8
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 81ed 	beq.w	800b166 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d008      	beq.n	800adaa <HAL_UART_IRQHandler+0x14e>
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fb7e 	bl	800b4a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb4:	2b40      	cmp	r3, #64	; 0x40
 800adb6:	bf0c      	ite	eq
 800adb8:	2301      	moveq	r3, #1
 800adba:	2300      	movne	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	f003 0308 	and.w	r3, r3, #8
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <HAL_UART_IRQHandler+0x17a>
 800adce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800add2:	2b00      	cmp	r3, #0
 800add4:	d04f      	beq.n	800ae76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa86 	bl	800b2e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade6:	2b40      	cmp	r3, #64	; 0x40
 800ade8:	d141      	bne.n	800ae6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3314      	adds	r3, #20
 800adf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3314      	adds	r3, #20
 800ae12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1d9      	bne.n	800adea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d013      	beq.n	800ae66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	4a7d      	ldr	r2, [pc, #500]	; (800b038 <HAL_UART_IRQHandler+0x3dc>)
 800ae44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fc fe93 	bl	8007b76 <HAL_DMA_Abort_IT>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d016      	beq.n	800ae84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae64:	e00e      	b.n	800ae84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7f9 fe4e 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6c:	e00a      	b.n	800ae84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7f9 fe4a 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae74:	e006      	b.n	800ae84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7f9 fe46 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae82:	e170      	b.n	800b166 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae84:	bf00      	nop
    return;
 800ae86:	e16e      	b.n	800b166 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	f040 814a 	bne.w	800b126 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae96:	f003 0310 	and.w	r3, r3, #16
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 8143 	beq.w	800b126 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea4:	f003 0310 	and.w	r3, r3, #16
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 813c 	beq.w	800b126 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60bb      	str	r3, [r7, #8]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60bb      	str	r3, [r7, #8]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aece:	2b40      	cmp	r3, #64	; 0x40
 800aed0:	f040 80b4 	bne.w	800b03c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 8140 	beq.w	800b16a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aeee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aef2:	429a      	cmp	r2, r3
 800aef4:	f080 8139 	bcs.w	800b16a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aefe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0a:	f000 8088 	beq.w	800b01e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	330c      	adds	r3, #12
 800af14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	330c      	adds	r3, #12
 800af36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1d9      	bne.n	800af0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3314      	adds	r3, #20
 800af60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af6c:	f023 0301 	bic.w	r3, r3, #1
 800af70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3314      	adds	r3, #20
 800af7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e1      	bne.n	800af5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3314      	adds	r3, #20
 800af9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3314      	adds	r3, #20
 800afb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e3      	bne.n	800af96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	330c      	adds	r3, #12
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe6:	e853 3f00 	ldrex	r3, [r3]
 800afea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afee:	f023 0310 	bic.w	r3, r3, #16
 800aff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	330c      	adds	r3, #12
 800affc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b000:	65ba      	str	r2, [r7, #88]	; 0x58
 800b002:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e3      	bne.n	800afdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fc fd3c 	bl	8007a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b026:	b29b      	uxth	r3, r3
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f8a2 	bl	800b178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b034:	e099      	b.n	800b16a <HAL_UART_IRQHandler+0x50e>
 800b036:	bf00      	nop
 800b038:	0800b3af 	.word	0x0800b3af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b044:	b29b      	uxth	r3, r3
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b050:	b29b      	uxth	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 808b 	beq.w	800b16e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 8086 	beq.w	800b16e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	330c      	adds	r3, #12
 800b068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b086:	647a      	str	r2, [r7, #68]	; 0x44
 800b088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b08c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e3      	bne.n	800b062 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3314      	adds	r3, #20
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	f023 0301 	bic.w	r3, r3, #1
 800b0b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0be:	633a      	str	r2, [r7, #48]	; 0x30
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e3      	bne.n	800b09a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0310 	bic.w	r3, r3, #16
 800b0f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b104:	61fa      	str	r2, [r7, #28]
 800b106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	69b9      	ldr	r1, [r7, #24]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	617b      	str	r3, [r7, #20]
   return(result);
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e3      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f82a 	bl	800b178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b124:	e023      	b.n	800b16e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d009      	beq.n	800b146 <HAL_UART_IRQHandler+0x4ea>
 800b132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f949 	bl	800b3d6 <UART_Transmit_IT>
    return;
 800b144:	e014      	b.n	800b170 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00e      	beq.n	800b170 <HAL_UART_IRQHandler+0x514>
 800b152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d008      	beq.n	800b170 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f989 	bl	800b476 <UART_EndTransmit_IT>
    return;
 800b164:	e004      	b.n	800b170 <HAL_UART_IRQHandler+0x514>
    return;
 800b166:	bf00      	nop
 800b168:	e002      	b.n	800b170 <HAL_UART_IRQHandler+0x514>
      return;
 800b16a:	bf00      	nop
 800b16c:	e000      	b.n	800b170 <HAL_UART_IRQHandler+0x514>
      return;
 800b16e:	bf00      	nop
  }
}
 800b170:	37e8      	adds	r7, #232	; 0xe8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop

0800b178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b090      	sub	sp, #64	; 0x40
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	4613      	mov	r3, r2
 800b19e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a0:	e050      	b.n	800b244 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d04c      	beq.n	800b244 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d007      	beq.n	800b1c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1b0:	f7fc fb5c 	bl	800786c <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d241      	bcs.n	800b244 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	330c      	adds	r3, #12
 800b1de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1e0:	637a      	str	r2, [r7, #52]	; 0x34
 800b1e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e5      	bne.n	800b1c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3314      	adds	r3, #20
 800b1fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	e853 3f00 	ldrex	r3, [r3]
 800b202:	613b      	str	r3, [r7, #16]
   return(result);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f023 0301 	bic.w	r3, r3, #1
 800b20a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3314      	adds	r3, #20
 800b212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b214:	623a      	str	r2, [r7, #32]
 800b216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	69f9      	ldr	r1, [r7, #28]
 800b21a:	6a3a      	ldr	r2, [r7, #32]
 800b21c:	e841 2300 	strex	r3, r2, [r1]
 800b220:	61bb      	str	r3, [r7, #24]
   return(result);
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e5      	bne.n	800b1f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2220      	movs	r2, #32
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2220      	movs	r2, #32
 800b234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e00f      	b.n	800b264 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4013      	ands	r3, r2
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	bf0c      	ite	eq
 800b254:	2301      	moveq	r3, #1
 800b256:	2300      	movne	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	461a      	mov	r2, r3
 800b25c:	79fb      	ldrb	r3, [r7, #7]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d09f      	beq.n	800b1a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3740      	adds	r7, #64	; 0x40
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	4613      	mov	r3, r2
 800b278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	88fa      	ldrh	r2, [r7, #6]
 800b284:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	88fa      	ldrh	r2, [r7, #6]
 800b28a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2222      	movs	r2, #34	; 0x22
 800b296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68da      	ldr	r2, [r3, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695a      	ldr	r2, [r3, #20]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0201 	orr.w	r2, r2, #1
 800b2c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0220 	orr.w	r2, r2, #32
 800b2d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b095      	sub	sp, #84	; 0x54
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	330c      	adds	r3, #12
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b306:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	330c      	adds	r3, #12
 800b30e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b310:	643a      	str	r2, [r7, #64]	; 0x40
 800b312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e5      	bne.n	800b2f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3314      	adds	r3, #20
 800b32a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	61fb      	str	r3, [r7, #28]
   return(result);
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f023 0301 	bic.w	r3, r3, #1
 800b33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3314      	adds	r3, #20
 800b342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b344:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e5      	bne.n	800b324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d119      	bne.n	800b394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	330c      	adds	r3, #12
 800b366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f023 0310 	bic.w	r3, r3, #16
 800b376:	647b      	str	r3, [r7, #68]	; 0x44
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	330c      	adds	r3, #12
 800b37e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b380:	61ba      	str	r2, [r7, #24]
 800b382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6979      	ldr	r1, [r7, #20]
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	e841 2300 	strex	r3, r2, [r1]
 800b38c:	613b      	str	r3, [r7, #16]
   return(result);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e5      	bne.n	800b360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3a2:	bf00      	nop
 800b3a4:	3754      	adds	r7, #84	; 0x54
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7f9 fb9d 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b21      	cmp	r3, #33	; 0x21
 800b3e8:	d13e      	bne.n	800b468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f2:	d114      	bne.n	800b41e <UART_Transmit_IT+0x48>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d110      	bne.n	800b41e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	1c9a      	adds	r2, r3, #2
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	621a      	str	r2, [r3, #32]
 800b41c:	e008      	b.n	800b430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	1c59      	adds	r1, r3, #1
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	6211      	str	r1, [r2, #32]
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b434:	b29b      	uxth	r3, r3
 800b436:	3b01      	subs	r3, #1
 800b438:	b29b      	uxth	r3, r3
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	4619      	mov	r1, r3
 800b43e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10f      	bne.n	800b464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68da      	ldr	r2, [r3, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68da      	ldr	r2, [r3, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	e000      	b.n	800b46a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b468:	2302      	movs	r3, #2
  }
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b48c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7f9 fb4c 	bl	8004b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b08c      	sub	sp, #48	; 0x30
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b22      	cmp	r3, #34	; 0x22
 800b4b8:	f040 80ab 	bne.w	800b612 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c4:	d117      	bne.n	800b4f6 <UART_Receive_IT+0x50>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d113      	bne.n	800b4f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	1c9a      	adds	r2, r3, #2
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b4f4:	e026      	b.n	800b544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b508:	d007      	beq.n	800b51a <UART_Receive_IT+0x74>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10a      	bne.n	800b528 <UART_Receive_IT+0x82>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	b2da      	uxtb	r2, r3
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e008      	b.n	800b53a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b534:	b2da      	uxtb	r2, r3
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b548:	b29b      	uxth	r3, r3
 800b54a:	3b01      	subs	r3, #1
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	4619      	mov	r1, r3
 800b552:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b554:	2b00      	cmp	r3, #0
 800b556:	d15a      	bne.n	800b60e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f022 0220 	bic.w	r2, r2, #32
 800b566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68da      	ldr	r2, [r3, #12]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	695a      	ldr	r2, [r3, #20]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0201 	bic.w	r2, r2, #1
 800b586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	2b01      	cmp	r3, #1
 800b596:	d135      	bne.n	800b604 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	330c      	adds	r3, #12
 800b5a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f023 0310 	bic.w	r3, r3, #16
 800b5b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5be:	623a      	str	r2, [r7, #32]
 800b5c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	69f9      	ldr	r1, [r7, #28]
 800b5c4:	6a3a      	ldr	r2, [r7, #32]
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e5      	bne.n	800b59e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0310 	and.w	r3, r3, #16
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d10a      	bne.n	800b5f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff fdbb 	bl	800b178 <HAL_UARTEx_RxEventCallback>
 800b602:	e002      	b.n	800b60a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7f9 fa6d 	bl	8004ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e002      	b.n	800b614 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e000      	b.n	800b614 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b612:	2302      	movs	r3, #2
  }
}
 800b614:	4618      	mov	r0, r3
 800b616:	3730      	adds	r7, #48	; 0x30
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b61c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b620:	b0c0      	sub	sp, #256	; 0x100
 800b622:	af00      	add	r7, sp, #0
 800b624:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b638:	68d9      	ldr	r1, [r3, #12]
 800b63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	ea40 0301 	orr.w	r3, r0, r1
 800b644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	431a      	orrs	r2, r3
 800b654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	4313      	orrs	r3, r2
 800b664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b674:	f021 010c 	bic.w	r1, r1, #12
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b682:	430b      	orrs	r3, r1
 800b684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b696:	6999      	ldr	r1, [r3, #24]
 800b698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	ea40 0301 	orr.w	r3, r0, r1
 800b6a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	4b8f      	ldr	r3, [pc, #572]	; (800b8e8 <UART_SetConfig+0x2cc>)
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d005      	beq.n	800b6bc <UART_SetConfig+0xa0>
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	4b8d      	ldr	r3, [pc, #564]	; (800b8ec <UART_SetConfig+0x2d0>)
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d104      	bne.n	800b6c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6bc:	f7fe f8da 	bl	8009874 <HAL_RCC_GetPCLK2Freq>
 800b6c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b6c4:	e003      	b.n	800b6ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6c6:	f7fe f8c1 	bl	800984c <HAL_RCC_GetPCLK1Freq>
 800b6ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d8:	f040 810c 	bne.w	800b8f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b6ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	1891      	adds	r1, r2, r2
 800b6f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6f6:	415b      	adcs	r3, r3
 800b6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b6fe:	4621      	mov	r1, r4
 800b700:	eb12 0801 	adds.w	r8, r2, r1
 800b704:	4629      	mov	r1, r5
 800b706:	eb43 0901 	adc.w	r9, r3, r1
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b71a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b71e:	4690      	mov	r8, r2
 800b720:	4699      	mov	r9, r3
 800b722:	4623      	mov	r3, r4
 800b724:	eb18 0303 	adds.w	r3, r8, r3
 800b728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b72c:	462b      	mov	r3, r5
 800b72e:	eb49 0303 	adc.w	r3, r9, r3
 800b732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b742:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b74a:	460b      	mov	r3, r1
 800b74c:	18db      	adds	r3, r3, r3
 800b74e:	653b      	str	r3, [r7, #80]	; 0x50
 800b750:	4613      	mov	r3, r2
 800b752:	eb42 0303 	adc.w	r3, r2, r3
 800b756:	657b      	str	r3, [r7, #84]	; 0x54
 800b758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b75c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b760:	f7f4 fd96 	bl	8000290 <__aeabi_uldivmod>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	4b61      	ldr	r3, [pc, #388]	; (800b8f0 <UART_SetConfig+0x2d4>)
 800b76a:	fba3 2302 	umull	r2, r3, r3, r2
 800b76e:	095b      	lsrs	r3, r3, #5
 800b770:	011c      	lsls	r4, r3, #4
 800b772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b776:	2200      	movs	r2, #0
 800b778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b77c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b780:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b784:	4642      	mov	r2, r8
 800b786:	464b      	mov	r3, r9
 800b788:	1891      	adds	r1, r2, r2
 800b78a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b78c:	415b      	adcs	r3, r3
 800b78e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b790:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b794:	4641      	mov	r1, r8
 800b796:	eb12 0a01 	adds.w	sl, r2, r1
 800b79a:	4649      	mov	r1, r9
 800b79c:	eb43 0b01 	adc.w	fp, r3, r1
 800b7a0:	f04f 0200 	mov.w	r2, #0
 800b7a4:	f04f 0300 	mov.w	r3, #0
 800b7a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7b4:	4692      	mov	sl, r2
 800b7b6:	469b      	mov	fp, r3
 800b7b8:	4643      	mov	r3, r8
 800b7ba:	eb1a 0303 	adds.w	r3, sl, r3
 800b7be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	eb4b 0303 	adc.w	r3, fp, r3
 800b7c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b7dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	18db      	adds	r3, r3, r3
 800b7e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	eb42 0303 	adc.w	r3, r2, r3
 800b7ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b7f6:	f7f4 fd4b 	bl	8000290 <__aeabi_uldivmod>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	4b3b      	ldr	r3, [pc, #236]	; (800b8f0 <UART_SetConfig+0x2d4>)
 800b802:	fba3 2301 	umull	r2, r3, r3, r1
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	2264      	movs	r2, #100	; 0x64
 800b80a:	fb02 f303 	mul.w	r3, r2, r3
 800b80e:	1acb      	subs	r3, r1, r3
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b816:	4b36      	ldr	r3, [pc, #216]	; (800b8f0 <UART_SetConfig+0x2d4>)
 800b818:	fba3 2302 	umull	r2, r3, r3, r2
 800b81c:	095b      	lsrs	r3, r3, #5
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b824:	441c      	add	r4, r3
 800b826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b834:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	1891      	adds	r1, r2, r2
 800b83e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b840:	415b      	adcs	r3, r3
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b848:	4641      	mov	r1, r8
 800b84a:	1851      	adds	r1, r2, r1
 800b84c:	6339      	str	r1, [r7, #48]	; 0x30
 800b84e:	4649      	mov	r1, r9
 800b850:	414b      	adcs	r3, r1
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
 800b854:	f04f 0200 	mov.w	r2, #0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b860:	4659      	mov	r1, fp
 800b862:	00cb      	lsls	r3, r1, #3
 800b864:	4651      	mov	r1, sl
 800b866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b86a:	4651      	mov	r1, sl
 800b86c:	00ca      	lsls	r2, r1, #3
 800b86e:	4610      	mov	r0, r2
 800b870:	4619      	mov	r1, r3
 800b872:	4603      	mov	r3, r0
 800b874:	4642      	mov	r2, r8
 800b876:	189b      	adds	r3, r3, r2
 800b878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b87c:	464b      	mov	r3, r9
 800b87e:	460a      	mov	r2, r1
 800b880:	eb42 0303 	adc.w	r3, r2, r3
 800b884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b894:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b89c:	460b      	mov	r3, r1
 800b89e:	18db      	adds	r3, r3, r3
 800b8a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	eb42 0303 	adc.w	r3, r2, r3
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8b2:	f7f4 fced 	bl	8000290 <__aeabi_uldivmod>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <UART_SetConfig+0x2d4>)
 800b8bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b8c0:	095b      	lsrs	r3, r3, #5
 800b8c2:	2164      	movs	r1, #100	; 0x64
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	3332      	adds	r3, #50	; 0x32
 800b8ce:	4a08      	ldr	r2, [pc, #32]	; (800b8f0 <UART_SetConfig+0x2d4>)
 800b8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d4:	095b      	lsrs	r3, r3, #5
 800b8d6:	f003 0207 	and.w	r2, r3, #7
 800b8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4422      	add	r2, r4
 800b8e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b8e4:	e105      	b.n	800baf2 <UART_SetConfig+0x4d6>
 800b8e6:	bf00      	nop
 800b8e8:	40011000 	.word	0x40011000
 800b8ec:	40011400 	.word	0x40011400
 800b8f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b902:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	1891      	adds	r1, r2, r2
 800b90c:	6239      	str	r1, [r7, #32]
 800b90e:	415b      	adcs	r3, r3
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
 800b912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b916:	4641      	mov	r1, r8
 800b918:	1854      	adds	r4, r2, r1
 800b91a:	4649      	mov	r1, r9
 800b91c:	eb43 0501 	adc.w	r5, r3, r1
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	00eb      	lsls	r3, r5, #3
 800b92a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b92e:	00e2      	lsls	r2, r4, #3
 800b930:	4614      	mov	r4, r2
 800b932:	461d      	mov	r5, r3
 800b934:	4643      	mov	r3, r8
 800b936:	18e3      	adds	r3, r4, r3
 800b938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b93c:	464b      	mov	r3, r9
 800b93e:	eb45 0303 	adc.w	r3, r5, r3
 800b942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b956:	f04f 0200 	mov.w	r2, #0
 800b95a:	f04f 0300 	mov.w	r3, #0
 800b95e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b962:	4629      	mov	r1, r5
 800b964:	008b      	lsls	r3, r1, #2
 800b966:	4621      	mov	r1, r4
 800b968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b96c:	4621      	mov	r1, r4
 800b96e:	008a      	lsls	r2, r1, #2
 800b970:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b974:	f7f4 fc8c 	bl	8000290 <__aeabi_uldivmod>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4b60      	ldr	r3, [pc, #384]	; (800bb00 <UART_SetConfig+0x4e4>)
 800b97e:	fba3 2302 	umull	r2, r3, r3, r2
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	011c      	lsls	r4, r3, #4
 800b986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b998:	4642      	mov	r2, r8
 800b99a:	464b      	mov	r3, r9
 800b99c:	1891      	adds	r1, r2, r2
 800b99e:	61b9      	str	r1, [r7, #24]
 800b9a0:	415b      	adcs	r3, r3
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	1851      	adds	r1, r2, r1
 800b9ac:	6139      	str	r1, [r7, #16]
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	414b      	adcs	r3, r1
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	00cb      	lsls	r3, r1, #3
 800b9c4:	4651      	mov	r1, sl
 800b9c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9ca:	4651      	mov	r1, sl
 800b9cc:	00ca      	lsls	r2, r1, #3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	189b      	adds	r3, r3, r2
 800b9d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9dc:	464b      	mov	r3, r9
 800b9de:	460a      	mov	r2, r1
 800b9e0:	eb42 0303 	adc.w	r3, r2, r3
 800b9e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba00:	4649      	mov	r1, r9
 800ba02:	008b      	lsls	r3, r1, #2
 800ba04:	4641      	mov	r1, r8
 800ba06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba0a:	4641      	mov	r1, r8
 800ba0c:	008a      	lsls	r2, r1, #2
 800ba0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba12:	f7f4 fc3d 	bl	8000290 <__aeabi_uldivmod>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4b39      	ldr	r3, [pc, #228]	; (800bb00 <UART_SetConfig+0x4e4>)
 800ba1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba20:	095b      	lsrs	r3, r3, #5
 800ba22:	2164      	movs	r1, #100	; 0x64
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	011b      	lsls	r3, r3, #4
 800ba2c:	3332      	adds	r3, #50	; 0x32
 800ba2e:	4a34      	ldr	r2, [pc, #208]	; (800bb00 <UART_SetConfig+0x4e4>)
 800ba30:	fba2 2303 	umull	r2, r3, r2, r3
 800ba34:	095b      	lsrs	r3, r3, #5
 800ba36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba3a:	441c      	add	r4, r3
 800ba3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba40:	2200      	movs	r2, #0
 800ba42:	673b      	str	r3, [r7, #112]	; 0x70
 800ba44:	677a      	str	r2, [r7, #116]	; 0x74
 800ba46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba4a:	4642      	mov	r2, r8
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	1891      	adds	r1, r2, r2
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	415b      	adcs	r3, r3
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	1851      	adds	r1, r2, r1
 800ba5e:	6039      	str	r1, [r7, #0]
 800ba60:	4649      	mov	r1, r9
 800ba62:	414b      	adcs	r3, r1
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	f04f 0200 	mov.w	r2, #0
 800ba6a:	f04f 0300 	mov.w	r3, #0
 800ba6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba72:	4659      	mov	r1, fp
 800ba74:	00cb      	lsls	r3, r1, #3
 800ba76:	4651      	mov	r1, sl
 800ba78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba7c:	4651      	mov	r1, sl
 800ba7e:	00ca      	lsls	r2, r1, #3
 800ba80:	4610      	mov	r0, r2
 800ba82:	4619      	mov	r1, r3
 800ba84:	4603      	mov	r3, r0
 800ba86:	4642      	mov	r2, r8
 800ba88:	189b      	adds	r3, r3, r2
 800ba8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba8c:	464b      	mov	r3, r9
 800ba8e:	460a      	mov	r2, r1
 800ba90:	eb42 0303 	adc.w	r3, r2, r3
 800ba94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	663b      	str	r3, [r7, #96]	; 0x60
 800baa0:	667a      	str	r2, [r7, #100]	; 0x64
 800baa2:	f04f 0200 	mov.w	r2, #0
 800baa6:	f04f 0300 	mov.w	r3, #0
 800baaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800baae:	4649      	mov	r1, r9
 800bab0:	008b      	lsls	r3, r1, #2
 800bab2:	4641      	mov	r1, r8
 800bab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bab8:	4641      	mov	r1, r8
 800baba:	008a      	lsls	r2, r1, #2
 800babc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bac0:	f7f4 fbe6 	bl	8000290 <__aeabi_uldivmod>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <UART_SetConfig+0x4e4>)
 800baca:	fba3 1302 	umull	r1, r3, r3, r2
 800bace:	095b      	lsrs	r3, r3, #5
 800bad0:	2164      	movs	r1, #100	; 0x64
 800bad2:	fb01 f303 	mul.w	r3, r1, r3
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	3332      	adds	r3, #50	; 0x32
 800badc:	4a08      	ldr	r2, [pc, #32]	; (800bb00 <UART_SetConfig+0x4e4>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	f003 020f 	and.w	r2, r3, #15
 800bae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4422      	add	r2, r4
 800baf0:	609a      	str	r2, [r3, #8]
}
 800baf2:	bf00      	nop
 800baf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800baf8:	46bd      	mov	sp, r7
 800bafa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bafe:	bf00      	nop
 800bb00:	51eb851f 	.word	0x51eb851f

0800bb04 <_ZdlPvj>:
 800bb04:	f000 b829 	b.w	800bb5a <_ZdlPv>

0800bb08 <__cxa_guard_acquire>:
 800bb08:	6803      	ldr	r3, [r0, #0]
 800bb0a:	07db      	lsls	r3, r3, #31
 800bb0c:	d406      	bmi.n	800bb1c <__cxa_guard_acquire+0x14>
 800bb0e:	7843      	ldrb	r3, [r0, #1]
 800bb10:	b103      	cbz	r3, 800bb14 <__cxa_guard_acquire+0xc>
 800bb12:	deff      	udf	#255	; 0xff
 800bb14:	2301      	movs	r3, #1
 800bb16:	7043      	strb	r3, [r0, #1]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	4770      	bx	lr
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4770      	bx	lr

0800bb20 <__cxa_guard_release>:
 800bb20:	2301      	movs	r3, #1
 800bb22:	6003      	str	r3, [r0, #0]
 800bb24:	4770      	bx	lr

0800bb26 <_Znwj>:
 800bb26:	2801      	cmp	r0, #1
 800bb28:	bf38      	it	cc
 800bb2a:	2001      	movcc	r0, #1
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	4604      	mov	r4, r0
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fc39 	bl	800c3a8 <malloc>
 800bb36:	b930      	cbnz	r0, 800bb46 <_Znwj+0x20>
 800bb38:	f000 f824 	bl	800bb84 <_ZSt15get_new_handlerv>
 800bb3c:	b908      	cbnz	r0, 800bb42 <_Znwj+0x1c>
 800bb3e:	f000 fbfb 	bl	800c338 <abort>
 800bb42:	4780      	blx	r0
 800bb44:	e7f4      	b.n	800bb30 <_Znwj+0xa>
 800bb46:	bd10      	pop	{r4, pc}

0800bb48 <__cxa_pure_virtual>:
 800bb48:	b508      	push	{r3, lr}
 800bb4a:	f000 f815 	bl	800bb78 <_ZSt9terminatev>

0800bb4e <_ZSt17__throw_bad_allocv>:
 800bb4e:	b508      	push	{r3, lr}
 800bb50:	f000 fbf2 	bl	800c338 <abort>

0800bb54 <_ZSt20__throw_length_errorPKc>:
 800bb54:	b508      	push	{r3, lr}
 800bb56:	f000 fbef 	bl	800c338 <abort>

0800bb5a <_ZdlPv>:
 800bb5a:	f000 bc2d 	b.w	800c3b8 <free>

0800bb5e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bb5e:	b508      	push	{r3, lr}
 800bb60:	4780      	blx	r0
 800bb62:	f000 fbe9 	bl	800c338 <abort>
	...

0800bb68 <_ZSt13get_terminatev>:
 800bb68:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <_ZSt13get_terminatev+0xc>)
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	f3bf 8f5b 	dmb	ish
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	20000044 	.word	0x20000044

0800bb78 <_ZSt9terminatev>:
 800bb78:	b508      	push	{r3, lr}
 800bb7a:	f7ff fff5 	bl	800bb68 <_ZSt13get_terminatev>
 800bb7e:	f7ff ffee 	bl	800bb5e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800bb84 <_ZSt15get_new_handlerv>:
 800bb84:	4b02      	ldr	r3, [pc, #8]	; (800bb90 <_ZSt15get_new_handlerv+0xc>)
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	f3bf 8f5b 	dmb	ish
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20001d40 	.word	0x20001d40

0800bb94 <powf>:
 800bb94:	b508      	push	{r3, lr}
 800bb96:	ed2d 8b04 	vpush	{d8-d9}
 800bb9a:	eeb0 8a60 	vmov.f32	s16, s1
 800bb9e:	eeb0 9a40 	vmov.f32	s18, s0
 800bba2:	f000 f84f 	bl	800bc44 <__ieee754_powf>
 800bba6:	eeb4 8a48 	vcmp.f32	s16, s16
 800bbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbae:	eef0 8a40 	vmov.f32	s17, s0
 800bbb2:	d63e      	bvs.n	800bc32 <powf+0x9e>
 800bbb4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbc:	d112      	bne.n	800bbe4 <powf+0x50>
 800bbbe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	d039      	beq.n	800bc3c <powf+0xa8>
 800bbc8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbcc:	f000 fb35 	bl	800c23a <finitef>
 800bbd0:	b378      	cbz	r0, 800bc32 <powf+0x9e>
 800bbd2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbda:	d52a      	bpl.n	800bc32 <powf+0x9e>
 800bbdc:	f000 fbba 	bl	800c354 <__errno>
 800bbe0:	2322      	movs	r3, #34	; 0x22
 800bbe2:	e014      	b.n	800bc0e <powf+0x7a>
 800bbe4:	f000 fb29 	bl	800c23a <finitef>
 800bbe8:	b998      	cbnz	r0, 800bc12 <powf+0x7e>
 800bbea:	eeb0 0a49 	vmov.f32	s0, s18
 800bbee:	f000 fb24 	bl	800c23a <finitef>
 800bbf2:	b170      	cbz	r0, 800bc12 <powf+0x7e>
 800bbf4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbf8:	f000 fb1f 	bl	800c23a <finitef>
 800bbfc:	b148      	cbz	r0, 800bc12 <powf+0x7e>
 800bbfe:	eef4 8a68 	vcmp.f32	s17, s17
 800bc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc06:	d7e9      	bvc.n	800bbdc <powf+0x48>
 800bc08:	f000 fba4 	bl	800c354 <__errno>
 800bc0c:	2321      	movs	r3, #33	; 0x21
 800bc0e:	6003      	str	r3, [r0, #0]
 800bc10:	e00f      	b.n	800bc32 <powf+0x9e>
 800bc12:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1a:	d10a      	bne.n	800bc32 <powf+0x9e>
 800bc1c:	eeb0 0a49 	vmov.f32	s0, s18
 800bc20:	f000 fb0b 	bl	800c23a <finitef>
 800bc24:	b128      	cbz	r0, 800bc32 <powf+0x9e>
 800bc26:	eeb0 0a48 	vmov.f32	s0, s16
 800bc2a:	f000 fb06 	bl	800c23a <finitef>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d1d4      	bne.n	800bbdc <powf+0x48>
 800bc32:	eeb0 0a68 	vmov.f32	s0, s17
 800bc36:	ecbd 8b04 	vpop	{d8-d9}
 800bc3a:	bd08      	pop	{r3, pc}
 800bc3c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bc40:	e7f7      	b.n	800bc32 <powf+0x9e>
	...

0800bc44 <__ieee754_powf>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	ee10 4a90 	vmov	r4, s1
 800bc4c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800bc50:	ed2d 8b02 	vpush	{d8}
 800bc54:	ee10 6a10 	vmov	r6, s0
 800bc58:	eeb0 8a40 	vmov.f32	s16, s0
 800bc5c:	eef0 8a60 	vmov.f32	s17, s1
 800bc60:	d10c      	bne.n	800bc7c <__ieee754_powf+0x38>
 800bc62:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bc66:	0076      	lsls	r6, r6, #1
 800bc68:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bc6c:	f240 8296 	bls.w	800c19c <__ieee754_powf+0x558>
 800bc70:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bc74:	ecbd 8b02 	vpop	{d8}
 800bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bc80:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bc84:	dcf4      	bgt.n	800bc70 <__ieee754_powf+0x2c>
 800bc86:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bc8a:	dd08      	ble.n	800bc9e <__ieee754_powf+0x5a>
 800bc8c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800bc90:	d1ee      	bne.n	800bc70 <__ieee754_powf+0x2c>
 800bc92:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800bc96:	0064      	lsls	r4, r4, #1
 800bc98:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800bc9c:	e7e6      	b.n	800bc6c <__ieee754_powf+0x28>
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	da20      	bge.n	800bce4 <__ieee754_powf+0xa0>
 800bca2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800bca6:	da2d      	bge.n	800bd04 <__ieee754_powf+0xc0>
 800bca8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bcac:	f2c0 827f 	blt.w	800c1ae <__ieee754_powf+0x56a>
 800bcb0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800bcb4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bcb8:	fa48 f703 	asr.w	r7, r8, r3
 800bcbc:	fa07 f303 	lsl.w	r3, r7, r3
 800bcc0:	4543      	cmp	r3, r8
 800bcc2:	f040 8274 	bne.w	800c1ae <__ieee754_powf+0x56a>
 800bcc6:	f007 0701 	and.w	r7, r7, #1
 800bcca:	f1c7 0702 	rsb	r7, r7, #2
 800bcce:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bcd2:	d11f      	bne.n	800bd14 <__ieee754_powf+0xd0>
 800bcd4:	2c00      	cmp	r4, #0
 800bcd6:	f280 8267 	bge.w	800c1a8 <__ieee754_powf+0x564>
 800bcda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bcde:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bce2:	e7c7      	b.n	800bc74 <__ieee754_powf+0x30>
 800bce4:	2700      	movs	r7, #0
 800bce6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bcea:	d1f0      	bne.n	800bcce <__ieee754_powf+0x8a>
 800bcec:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bcf0:	f000 8254 	beq.w	800c19c <__ieee754_powf+0x558>
 800bcf4:	dd08      	ble.n	800bd08 <__ieee754_powf+0xc4>
 800bcf6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c000 <__ieee754_powf+0x3bc>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	bfa8      	it	ge
 800bcfe:	eeb0 0a68 	vmovge.f32	s0, s17
 800bd02:	e7b7      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd04:	2702      	movs	r7, #2
 800bd06:	e7ee      	b.n	800bce6 <__ieee754_powf+0xa2>
 800bd08:	2c00      	cmp	r4, #0
 800bd0a:	f280 824a 	bge.w	800c1a2 <__ieee754_powf+0x55e>
 800bd0e:	eeb1 0a68 	vneg.f32	s0, s17
 800bd12:	e7af      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd14:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800bd18:	d102      	bne.n	800bd20 <__ieee754_powf+0xdc>
 800bd1a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bd1e:	e7a9      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd20:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bd24:	eeb0 0a48 	vmov.f32	s0, s16
 800bd28:	d107      	bne.n	800bd3a <__ieee754_powf+0xf6>
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	db05      	blt.n	800bd3a <__ieee754_powf+0xf6>
 800bd2e:	ecbd 8b02 	vpop	{d8}
 800bd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd36:	f000 ba53 	b.w	800c1e0 <__ieee754_sqrtf>
 800bd3a:	f000 fa77 	bl	800c22c <fabsf>
 800bd3e:	b125      	cbz	r5, 800bd4a <__ieee754_powf+0x106>
 800bd40:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800bd44:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bd48:	d116      	bne.n	800bd78 <__ieee754_powf+0x134>
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	bfbc      	itt	lt
 800bd4e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800bd52:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	da8c      	bge.n	800bc74 <__ieee754_powf+0x30>
 800bd5a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800bd5e:	ea55 0307 	orrs.w	r3, r5, r7
 800bd62:	d104      	bne.n	800bd6e <__ieee754_powf+0x12a>
 800bd64:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bd68:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bd6c:	e782      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd6e:	2f01      	cmp	r7, #1
 800bd70:	d180      	bne.n	800bc74 <__ieee754_powf+0x30>
 800bd72:	eeb1 0a40 	vneg.f32	s0, s0
 800bd76:	e77d      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd78:	0ff0      	lsrs	r0, r6, #31
 800bd7a:	3801      	subs	r0, #1
 800bd7c:	ea57 0300 	orrs.w	r3, r7, r0
 800bd80:	d104      	bne.n	800bd8c <__ieee754_powf+0x148>
 800bd82:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bd86:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bd8a:	e773      	b.n	800bc74 <__ieee754_powf+0x30>
 800bd8c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800bd90:	dd74      	ble.n	800be7c <__ieee754_powf+0x238>
 800bd92:	4b9c      	ldr	r3, [pc, #624]	; (800c004 <__ieee754_powf+0x3c0>)
 800bd94:	429d      	cmp	r5, r3
 800bd96:	dc08      	bgt.n	800bdaa <__ieee754_powf+0x166>
 800bd98:	2c00      	cmp	r4, #0
 800bd9a:	da0b      	bge.n	800bdb4 <__ieee754_powf+0x170>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	ecbd 8b02 	vpop	{d8}
 800bda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda6:	f000 ba3b 	b.w	800c220 <__math_oflowf>
 800bdaa:	4b97      	ldr	r3, [pc, #604]	; (800c008 <__ieee754_powf+0x3c4>)
 800bdac:	429d      	cmp	r5, r3
 800bdae:	dd08      	ble.n	800bdc2 <__ieee754_powf+0x17e>
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	dcf3      	bgt.n	800bd9c <__ieee754_powf+0x158>
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	ecbd 8b02 	vpop	{d8}
 800bdba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbe:	f000 ba29 	b.w	800c214 <__math_uflowf>
 800bdc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bdc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdca:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c00c <__ieee754_powf+0x3c8>
 800bdce:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800bdd2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bdd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdda:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bdde:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c010 <__ieee754_powf+0x3cc>
 800bdea:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800bdee:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c014 <__ieee754_powf+0x3d0>
 800bdf2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bdf6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c018 <__ieee754_powf+0x3d4>
 800bdfa:	eef0 6a67 	vmov.f32	s13, s15
 800bdfe:	eee0 6a07 	vfma.f32	s13, s0, s14
 800be02:	ee16 3a90 	vmov	r3, s13
 800be06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800be0a:	f023 030f 	bic.w	r3, r3, #15
 800be0e:	ee00 3a90 	vmov	s1, r3
 800be12:	eee0 0a47 	vfms.f32	s1, s0, s14
 800be16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800be1a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800be1e:	f024 040f 	bic.w	r4, r4, #15
 800be22:	ee07 4a10 	vmov	s14, r4
 800be26:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800be2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eee7 0a27 	vfma.f32	s1, s14, s15
 800be36:	3f01      	subs	r7, #1
 800be38:	ea57 0200 	orrs.w	r2, r7, r0
 800be3c:	ee07 4a10 	vmov	s14, r4
 800be40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be44:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800be48:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800be4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800be50:	ee17 4a10 	vmov	r4, s14
 800be54:	bf08      	it	eq
 800be56:	eeb0 8a40 	vmoveq.f32	s16, s0
 800be5a:	2c00      	cmp	r4, #0
 800be5c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800be60:	f340 817e 	ble.w	800c160 <__ieee754_powf+0x51c>
 800be64:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800be68:	f340 80f8 	ble.w	800c05c <__ieee754_powf+0x418>
 800be6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	bf4c      	ite	mi
 800be76:	2001      	movmi	r0, #1
 800be78:	2000      	movpl	r0, #0
 800be7a:	e790      	b.n	800bd9e <__ieee754_powf+0x15a>
 800be7c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800be80:	bf01      	itttt	eq
 800be82:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c01c <__ieee754_powf+0x3d8>
 800be86:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800be8a:	f06f 0217 	mvneq.w	r2, #23
 800be8e:	ee17 5a90 	vmoveq	r5, s15
 800be92:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800be96:	bf18      	it	ne
 800be98:	2200      	movne	r2, #0
 800be9a:	3b7f      	subs	r3, #127	; 0x7f
 800be9c:	4413      	add	r3, r2
 800be9e:	4a60      	ldr	r2, [pc, #384]	; (800c020 <__ieee754_powf+0x3dc>)
 800bea0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bea4:	4295      	cmp	r5, r2
 800bea6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800beaa:	dd06      	ble.n	800beba <__ieee754_powf+0x276>
 800beac:	4a5d      	ldr	r2, [pc, #372]	; (800c024 <__ieee754_powf+0x3e0>)
 800beae:	4295      	cmp	r5, r2
 800beb0:	f340 80a4 	ble.w	800bffc <__ieee754_powf+0x3b8>
 800beb4:	3301      	adds	r3, #1
 800beb6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800beba:	2500      	movs	r5, #0
 800bebc:	4a5a      	ldr	r2, [pc, #360]	; (800c028 <__ieee754_powf+0x3e4>)
 800bebe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800bec2:	ee07 1a90 	vmov	s15, r1
 800bec6:	ed92 7a00 	vldr	s14, [r2]
 800beca:	4a58      	ldr	r2, [pc, #352]	; (800c02c <__ieee754_powf+0x3e8>)
 800becc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bed0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bed4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800bed8:	1049      	asrs	r1, r1, #1
 800beda:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bede:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bee2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800bee6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800beea:	ee06 1a10 	vmov	s12, r1
 800beee:	ee65 4a26 	vmul.f32	s9, s10, s13
 800bef2:	ee36 7a47 	vsub.f32	s14, s12, s14
 800bef6:	ee14 6a90 	vmov	r6, s9
 800befa:	4016      	ands	r6, r2
 800befc:	ee05 6a90 	vmov	s11, r6
 800bf00:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800bf04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf08:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c030 <__ieee754_powf+0x3ec>
 800bf0c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800bf10:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800bf14:	ee25 6a26 	vmul.f32	s12, s10, s13
 800bf18:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c034 <__ieee754_powf+0x3f0>
 800bf1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bf20:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c038 <__ieee754_powf+0x3f4>
 800bf24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bf28:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c00c <__ieee754_powf+0x3c8>
 800bf2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bf30:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c03c <__ieee754_powf+0x3f8>
 800bf34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bf38:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c040 <__ieee754_powf+0x3fc>
 800bf3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bf40:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800bf44:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800bf48:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bf4c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800bf50:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800bf54:	eef0 7a45 	vmov.f32	s15, s10
 800bf58:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800bf5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf60:	ee17 1a90 	vmov	r1, s15
 800bf64:	4011      	ands	r1, r2
 800bf66:	ee07 1a90 	vmov	s15, r1
 800bf6a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800bf6e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800bf72:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bf76:	ee27 7a24 	vmul.f32	s14, s14, s9
 800bf7a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bf7e:	eeb0 6a47 	vmov.f32	s12, s14
 800bf82:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800bf86:	ee16 1a10 	vmov	r1, s12
 800bf8a:	4011      	ands	r1, r2
 800bf8c:	ee06 1a90 	vmov	s13, r1
 800bf90:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800bf94:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c044 <__ieee754_powf+0x400>
 800bf98:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c048 <__ieee754_powf+0x404>
 800bf9c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bfa0:	ee06 1a10 	vmov	s12, r1
 800bfa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfa8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c04c <__ieee754_powf+0x408>
 800bfac:	4928      	ldr	r1, [pc, #160]	; (800c050 <__ieee754_powf+0x40c>)
 800bfae:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bfb2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800bfb6:	edd1 7a00 	vldr	s15, [r1]
 800bfba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	4b24      	ldr	r3, [pc, #144]	; (800c054 <__ieee754_powf+0x410>)
 800bfc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bfc8:	eef0 7a47 	vmov.f32	s15, s14
 800bfcc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bfd0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bfd4:	edd5 0a00 	vldr	s1, [r5]
 800bfd8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bfdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe0:	ee17 3a90 	vmov	r3, s15
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	ee07 3a90 	vmov	s15, r3
 800bfea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bfee:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800bff2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800bff6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800bffa:	e70e      	b.n	800be1a <__ieee754_powf+0x1d6>
 800bffc:	2501      	movs	r5, #1
 800bffe:	e75d      	b.n	800bebc <__ieee754_powf+0x278>
 800c000:	00000000 	.word	0x00000000
 800c004:	3f7ffff3 	.word	0x3f7ffff3
 800c008:	3f800007 	.word	0x3f800007
 800c00c:	3eaaaaab 	.word	0x3eaaaaab
 800c010:	3fb8aa3b 	.word	0x3fb8aa3b
 800c014:	36eca570 	.word	0x36eca570
 800c018:	3fb8aa00 	.word	0x3fb8aa00
 800c01c:	4b800000 	.word	0x4b800000
 800c020:	001cc471 	.word	0x001cc471
 800c024:	005db3d6 	.word	0x005db3d6
 800c028:	0800e624 	.word	0x0800e624
 800c02c:	fffff000 	.word	0xfffff000
 800c030:	3e6c3255 	.word	0x3e6c3255
 800c034:	3e53f142 	.word	0x3e53f142
 800c038:	3e8ba305 	.word	0x3e8ba305
 800c03c:	3edb6db7 	.word	0x3edb6db7
 800c040:	3f19999a 	.word	0x3f19999a
 800c044:	3f76384f 	.word	0x3f76384f
 800c048:	3f763800 	.word	0x3f763800
 800c04c:	369dc3a0 	.word	0x369dc3a0
 800c050:	0800e634 	.word	0x0800e634
 800c054:	0800e62c 	.word	0x0800e62c
 800c058:	3338aa3c 	.word	0x3338aa3c
 800c05c:	f040 8095 	bne.w	800c18a <__ieee754_powf+0x546>
 800c060:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c058 <__ieee754_powf+0x414>
 800c064:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c068:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c06c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c074:	f73f aefa 	bgt.w	800be6c <__ieee754_powf+0x228>
 800c078:	15db      	asrs	r3, r3, #23
 800c07a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c07e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c082:	4103      	asrs	r3, r0
 800c084:	4423      	add	r3, r4
 800c086:	494b      	ldr	r1, [pc, #300]	; (800c1b4 <__ieee754_powf+0x570>)
 800c088:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c08c:	3a7f      	subs	r2, #127	; 0x7f
 800c08e:	4111      	asrs	r1, r2
 800c090:	ea23 0101 	bic.w	r1, r3, r1
 800c094:	ee07 1a10 	vmov	s14, r1
 800c098:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c09c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c0a0:	f1c2 0217 	rsb	r2, r2, #23
 800c0a4:	4110      	asrs	r0, r2
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0ac:	bfb8      	it	lt
 800c0ae:	4240      	neglt	r0, r0
 800c0b0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c0b4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c1b8 <__ieee754_powf+0x574>
 800c0b8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c1bc <__ieee754_powf+0x578>
 800c0bc:	ee17 3a10 	vmov	r3, s14
 800c0c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c0c4:	f023 030f 	bic.w	r3, r3, #15
 800c0c8:	ee07 3a10 	vmov	s14, r3
 800c0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c0d4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c0d8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c1c0 <__ieee754_powf+0x57c>
 800c0dc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800c0e0:	eef0 7a40 	vmov.f32	s15, s0
 800c0e4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c0e8:	eeb0 6a67 	vmov.f32	s12, s15
 800c0ec:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c0f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c0f4:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c0f8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c1c4 <__ieee754_powf+0x580>
 800c0fc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800c1c8 <__ieee754_powf+0x584>
 800c100:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c104:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c1cc <__ieee754_powf+0x588>
 800c108:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c10c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c1d0 <__ieee754_powf+0x58c>
 800c110:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c114:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c1d4 <__ieee754_powf+0x590>
 800c118:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c11c:	eef0 6a67 	vmov.f32	s13, s15
 800c120:	eee6 6a47 	vfms.f32	s13, s12, s14
 800c124:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c128:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c12c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c130:	eea7 0a80 	vfma.f32	s0, s15, s0
 800c134:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c138:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c13c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c140:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c144:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c148:	ee10 3a10 	vmov	r3, s0
 800c14c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c154:	da1f      	bge.n	800c196 <__ieee754_powf+0x552>
 800c156:	f000 f87d 	bl	800c254 <scalbnf>
 800c15a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c15e:	e589      	b.n	800bc74 <__ieee754_powf+0x30>
 800c160:	4a1d      	ldr	r2, [pc, #116]	; (800c1d8 <__ieee754_powf+0x594>)
 800c162:	4293      	cmp	r3, r2
 800c164:	dd07      	ble.n	800c176 <__ieee754_powf+0x532>
 800c166:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16e:	bf4c      	ite	mi
 800c170:	2001      	movmi	r0, #1
 800c172:	2000      	movpl	r0, #0
 800c174:	e61f      	b.n	800bdb6 <__ieee754_powf+0x172>
 800c176:	d108      	bne.n	800c18a <__ieee754_powf+0x546>
 800c178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c17c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c184:	f6ff af78 	blt.w	800c078 <__ieee754_powf+0x434>
 800c188:	e7ed      	b.n	800c166 <__ieee754_powf+0x522>
 800c18a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c18e:	f73f af73 	bgt.w	800c078 <__ieee754_powf+0x434>
 800c192:	2000      	movs	r0, #0
 800c194:	e78c      	b.n	800c0b0 <__ieee754_powf+0x46c>
 800c196:	ee00 3a10 	vmov	s0, r3
 800c19a:	e7de      	b.n	800c15a <__ieee754_powf+0x516>
 800c19c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c1a0:	e568      	b.n	800bc74 <__ieee754_powf+0x30>
 800c1a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c1dc <__ieee754_powf+0x598>
 800c1a6:	e565      	b.n	800bc74 <__ieee754_powf+0x30>
 800c1a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c1ac:	e562      	b.n	800bc74 <__ieee754_powf+0x30>
 800c1ae:	2700      	movs	r7, #0
 800c1b0:	e58d      	b.n	800bcce <__ieee754_powf+0x8a>
 800c1b2:	bf00      	nop
 800c1b4:	007fffff 	.word	0x007fffff
 800c1b8:	35bfbe8c 	.word	0x35bfbe8c
 800c1bc:	3f317200 	.word	0x3f317200
 800c1c0:	3f317218 	.word	0x3f317218
 800c1c4:	b5ddea0e 	.word	0xb5ddea0e
 800c1c8:	3331bb4c 	.word	0x3331bb4c
 800c1cc:	388ab355 	.word	0x388ab355
 800c1d0:	bb360b61 	.word	0xbb360b61
 800c1d4:	3e2aaaab 	.word	0x3e2aaaab
 800c1d8:	43160000 	.word	0x43160000
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <__ieee754_sqrtf>:
 800c1e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1e4:	4770      	bx	lr

0800c1e6 <with_errnof>:
 800c1e6:	b513      	push	{r0, r1, r4, lr}
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c1ee:	f000 f8b1 	bl	800c354 <__errno>
 800c1f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c1f6:	6004      	str	r4, [r0, #0]
 800c1f8:	b002      	add	sp, #8
 800c1fa:	bd10      	pop	{r4, pc}

0800c1fc <xflowf>:
 800c1fc:	b130      	cbz	r0, 800c20c <xflowf+0x10>
 800c1fe:	eef1 7a40 	vneg.f32	s15, s0
 800c202:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c206:	2022      	movs	r0, #34	; 0x22
 800c208:	f7ff bfed 	b.w	800c1e6 <with_errnof>
 800c20c:	eef0 7a40 	vmov.f32	s15, s0
 800c210:	e7f7      	b.n	800c202 <xflowf+0x6>
	...

0800c214 <__math_uflowf>:
 800c214:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c21c <__math_uflowf+0x8>
 800c218:	f7ff bff0 	b.w	800c1fc <xflowf>
 800c21c:	10000000 	.word	0x10000000

0800c220 <__math_oflowf>:
 800c220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c228 <__math_oflowf+0x8>
 800c224:	f7ff bfea 	b.w	800c1fc <xflowf>
 800c228:	70000000 	.word	0x70000000

0800c22c <fabsf>:
 800c22c:	ee10 3a10 	vmov	r3, s0
 800c230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c234:	ee00 3a10 	vmov	s0, r3
 800c238:	4770      	bx	lr

0800c23a <finitef>:
 800c23a:	b082      	sub	sp, #8
 800c23c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c240:	9801      	ldr	r0, [sp, #4]
 800c242:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c246:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c24a:	bfac      	ite	ge
 800c24c:	2000      	movge	r0, #0
 800c24e:	2001      	movlt	r0, #1
 800c250:	b002      	add	sp, #8
 800c252:	4770      	bx	lr

0800c254 <scalbnf>:
 800c254:	ee10 3a10 	vmov	r3, s0
 800c258:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c25c:	d025      	beq.n	800c2aa <scalbnf+0x56>
 800c25e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c262:	d302      	bcc.n	800c26a <scalbnf+0x16>
 800c264:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c268:	4770      	bx	lr
 800c26a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c26e:	d122      	bne.n	800c2b6 <scalbnf+0x62>
 800c270:	4b2a      	ldr	r3, [pc, #168]	; (800c31c <scalbnf+0xc8>)
 800c272:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c320 <scalbnf+0xcc>
 800c276:	4298      	cmp	r0, r3
 800c278:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c27c:	db16      	blt.n	800c2ac <scalbnf+0x58>
 800c27e:	ee10 3a10 	vmov	r3, s0
 800c282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c286:	3a19      	subs	r2, #25
 800c288:	4402      	add	r2, r0
 800c28a:	2afe      	cmp	r2, #254	; 0xfe
 800c28c:	dd15      	ble.n	800c2ba <scalbnf+0x66>
 800c28e:	ee10 3a10 	vmov	r3, s0
 800c292:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c324 <scalbnf+0xd0>
 800c296:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c328 <scalbnf+0xd4>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	eeb0 7a67 	vmov.f32	s14, s15
 800c2a0:	bfb8      	it	lt
 800c2a2:	eef0 7a66 	vmovlt.f32	s15, s13
 800c2a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c2aa:	4770      	bx	lr
 800c2ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c32c <scalbnf+0xd8>
 800c2b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2b4:	4770      	bx	lr
 800c2b6:	0dd2      	lsrs	r2, r2, #23
 800c2b8:	e7e6      	b.n	800c288 <scalbnf+0x34>
 800c2ba:	2a00      	cmp	r2, #0
 800c2bc:	dd06      	ble.n	800c2cc <scalbnf+0x78>
 800c2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c2c6:	ee00 3a10 	vmov	s0, r3
 800c2ca:	4770      	bx	lr
 800c2cc:	f112 0f16 	cmn.w	r2, #22
 800c2d0:	da1a      	bge.n	800c308 <scalbnf+0xb4>
 800c2d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2d6:	4298      	cmp	r0, r3
 800c2d8:	ee10 3a10 	vmov	r3, s0
 800c2dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2e0:	dd0a      	ble.n	800c2f8 <scalbnf+0xa4>
 800c2e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c324 <scalbnf+0xd0>
 800c2e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c328 <scalbnf+0xd4>
 800c2ea:	eef0 7a40 	vmov.f32	s15, s0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bf18      	it	ne
 800c2f2:	eeb0 0a47 	vmovne.f32	s0, s14
 800c2f6:	e7db      	b.n	800c2b0 <scalbnf+0x5c>
 800c2f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c32c <scalbnf+0xd8>
 800c2fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c330 <scalbnf+0xdc>
 800c300:	eef0 7a40 	vmov.f32	s15, s0
 800c304:	2b00      	cmp	r3, #0
 800c306:	e7f3      	b.n	800c2f0 <scalbnf+0x9c>
 800c308:	3219      	adds	r2, #25
 800c30a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c30e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c312:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c334 <scalbnf+0xe0>
 800c316:	ee07 3a10 	vmov	s14, r3
 800c31a:	e7c4      	b.n	800c2a6 <scalbnf+0x52>
 800c31c:	ffff3cb0 	.word	0xffff3cb0
 800c320:	4c000000 	.word	0x4c000000
 800c324:	7149f2ca 	.word	0x7149f2ca
 800c328:	f149f2ca 	.word	0xf149f2ca
 800c32c:	0da24260 	.word	0x0da24260
 800c330:	8da24260 	.word	0x8da24260
 800c334:	33000000 	.word	0x33000000

0800c338 <abort>:
 800c338:	b508      	push	{r3, lr}
 800c33a:	2006      	movs	r0, #6
 800c33c:	f000 f972 	bl	800c624 <raise>
 800c340:	2001      	movs	r0, #1
 800c342:	f7f8 fc2b 	bl	8004b9c <_exit>

0800c346 <atexit>:
 800c346:	2300      	movs	r3, #0
 800c348:	4601      	mov	r1, r0
 800c34a:	461a      	mov	r2, r3
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 b9df 	b.w	800c710 <__register_exitproc>
	...

0800c354 <__errno>:
 800c354:	4b01      	ldr	r3, [pc, #4]	; (800c35c <__errno+0x8>)
 800c356:	6818      	ldr	r0, [r3, #0]
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20000048 	.word	0x20000048

0800c360 <__libc_init_array>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	4d0d      	ldr	r5, [pc, #52]	; (800c398 <__libc_init_array+0x38>)
 800c364:	4c0d      	ldr	r4, [pc, #52]	; (800c39c <__libc_init_array+0x3c>)
 800c366:	1b64      	subs	r4, r4, r5
 800c368:	10a4      	asrs	r4, r4, #2
 800c36a:	2600      	movs	r6, #0
 800c36c:	42a6      	cmp	r6, r4
 800c36e:	d109      	bne.n	800c384 <__libc_init_array+0x24>
 800c370:	4d0b      	ldr	r5, [pc, #44]	; (800c3a0 <__libc_init_array+0x40>)
 800c372:	4c0c      	ldr	r4, [pc, #48]	; (800c3a4 <__libc_init_array+0x44>)
 800c374:	f000 fd80 	bl	800ce78 <_init>
 800c378:	1b64      	subs	r4, r4, r5
 800c37a:	10a4      	asrs	r4, r4, #2
 800c37c:	2600      	movs	r6, #0
 800c37e:	42a6      	cmp	r6, r4
 800c380:	d105      	bne.n	800c38e <__libc_init_array+0x2e>
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	f855 3b04 	ldr.w	r3, [r5], #4
 800c388:	4798      	blx	r3
 800c38a:	3601      	adds	r6, #1
 800c38c:	e7ee      	b.n	800c36c <__libc_init_array+0xc>
 800c38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c392:	4798      	blx	r3
 800c394:	3601      	adds	r6, #1
 800c396:	e7f2      	b.n	800c37e <__libc_init_array+0x1e>
 800c398:	0800e678 	.word	0x0800e678
 800c39c:	0800e678 	.word	0x0800e678
 800c3a0:	0800e678 	.word	0x0800e678
 800c3a4:	0800e67c 	.word	0x0800e67c

0800c3a8 <malloc>:
 800c3a8:	4b02      	ldr	r3, [pc, #8]	; (800c3b4 <malloc+0xc>)
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	6818      	ldr	r0, [r3, #0]
 800c3ae:	f000 b88d 	b.w	800c4cc <_malloc_r>
 800c3b2:	bf00      	nop
 800c3b4:	20000048 	.word	0x20000048

0800c3b8 <free>:
 800c3b8:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <free+0xc>)
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f000 b819 	b.w	800c3f4 <_free_r>
 800c3c2:	bf00      	nop
 800c3c4:	20000048 	.word	0x20000048

0800c3c8 <memcpy>:
 800c3c8:	440a      	add	r2, r1
 800c3ca:	4291      	cmp	r1, r2
 800c3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3d0:	d100      	bne.n	800c3d4 <memcpy+0xc>
 800c3d2:	4770      	bx	lr
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3de:	4291      	cmp	r1, r2
 800c3e0:	d1f9      	bne.n	800c3d6 <memcpy+0xe>
 800c3e2:	bd10      	pop	{r4, pc}

0800c3e4 <memset>:
 800c3e4:	4402      	add	r2, r0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d100      	bne.n	800c3ee <memset+0xa>
 800c3ec:	4770      	bx	lr
 800c3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f2:	e7f9      	b.n	800c3e8 <memset+0x4>

0800c3f4 <_free_r>:
 800c3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	d044      	beq.n	800c484 <_free_r+0x90>
 800c3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3fe:	9001      	str	r0, [sp, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	f1a1 0404 	sub.w	r4, r1, #4
 800c406:	bfb8      	it	lt
 800c408:	18e4      	addlt	r4, r4, r3
 800c40a:	f000 f9e7 	bl	800c7dc <__malloc_lock>
 800c40e:	4a1e      	ldr	r2, [pc, #120]	; (800c488 <_free_r+0x94>)
 800c410:	9801      	ldr	r0, [sp, #4]
 800c412:	6813      	ldr	r3, [r2, #0]
 800c414:	b933      	cbnz	r3, 800c424 <_free_r+0x30>
 800c416:	6063      	str	r3, [r4, #4]
 800c418:	6014      	str	r4, [r2, #0]
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c420:	f000 b9e2 	b.w	800c7e8 <__malloc_unlock>
 800c424:	42a3      	cmp	r3, r4
 800c426:	d908      	bls.n	800c43a <_free_r+0x46>
 800c428:	6825      	ldr	r5, [r4, #0]
 800c42a:	1961      	adds	r1, r4, r5
 800c42c:	428b      	cmp	r3, r1
 800c42e:	bf01      	itttt	eq
 800c430:	6819      	ldreq	r1, [r3, #0]
 800c432:	685b      	ldreq	r3, [r3, #4]
 800c434:	1949      	addeq	r1, r1, r5
 800c436:	6021      	streq	r1, [r4, #0]
 800c438:	e7ed      	b.n	800c416 <_free_r+0x22>
 800c43a:	461a      	mov	r2, r3
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b10b      	cbz	r3, 800c444 <_free_r+0x50>
 800c440:	42a3      	cmp	r3, r4
 800c442:	d9fa      	bls.n	800c43a <_free_r+0x46>
 800c444:	6811      	ldr	r1, [r2, #0]
 800c446:	1855      	adds	r5, r2, r1
 800c448:	42a5      	cmp	r5, r4
 800c44a:	d10b      	bne.n	800c464 <_free_r+0x70>
 800c44c:	6824      	ldr	r4, [r4, #0]
 800c44e:	4421      	add	r1, r4
 800c450:	1854      	adds	r4, r2, r1
 800c452:	42a3      	cmp	r3, r4
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	d1e0      	bne.n	800c41a <_free_r+0x26>
 800c458:	681c      	ldr	r4, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	6053      	str	r3, [r2, #4]
 800c45e:	4421      	add	r1, r4
 800c460:	6011      	str	r1, [r2, #0]
 800c462:	e7da      	b.n	800c41a <_free_r+0x26>
 800c464:	d902      	bls.n	800c46c <_free_r+0x78>
 800c466:	230c      	movs	r3, #12
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	e7d6      	b.n	800c41a <_free_r+0x26>
 800c46c:	6825      	ldr	r5, [r4, #0]
 800c46e:	1961      	adds	r1, r4, r5
 800c470:	428b      	cmp	r3, r1
 800c472:	bf04      	itt	eq
 800c474:	6819      	ldreq	r1, [r3, #0]
 800c476:	685b      	ldreq	r3, [r3, #4]
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	bf04      	itt	eq
 800c47c:	1949      	addeq	r1, r1, r5
 800c47e:	6021      	streq	r1, [r4, #0]
 800c480:	6054      	str	r4, [r2, #4]
 800c482:	e7ca      	b.n	800c41a <_free_r+0x26>
 800c484:	b003      	add	sp, #12
 800c486:	bd30      	pop	{r4, r5, pc}
 800c488:	20001d44 	.word	0x20001d44

0800c48c <sbrk_aligned>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	4e0e      	ldr	r6, [pc, #56]	; (800c4c8 <sbrk_aligned+0x3c>)
 800c490:	460c      	mov	r4, r1
 800c492:	6831      	ldr	r1, [r6, #0]
 800c494:	4605      	mov	r5, r0
 800c496:	b911      	cbnz	r1, 800c49e <sbrk_aligned+0x12>
 800c498:	f000 f88c 	bl	800c5b4 <_sbrk_r>
 800c49c:	6030      	str	r0, [r6, #0]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f000 f887 	bl	800c5b4 <_sbrk_r>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	d00a      	beq.n	800c4c0 <sbrk_aligned+0x34>
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d007      	beq.n	800c4c4 <sbrk_aligned+0x38>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f87c 	bl	800c5b4 <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d101      	bne.n	800c4c4 <sbrk_aligned+0x38>
 800c4c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	20001d48 	.word	0x20001d48

0800c4cc <_malloc_r>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	1ccd      	adds	r5, r1, #3
 800c4d2:	f025 0503 	bic.w	r5, r5, #3
 800c4d6:	3508      	adds	r5, #8
 800c4d8:	2d0c      	cmp	r5, #12
 800c4da:	bf38      	it	cc
 800c4dc:	250c      	movcc	r5, #12
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	4607      	mov	r7, r0
 800c4e2:	db01      	blt.n	800c4e8 <_malloc_r+0x1c>
 800c4e4:	42a9      	cmp	r1, r5
 800c4e6:	d905      	bls.n	800c4f4 <_malloc_r+0x28>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f4:	4e2e      	ldr	r6, [pc, #184]	; (800c5b0 <_malloc_r+0xe4>)
 800c4f6:	f000 f971 	bl	800c7dc <__malloc_lock>
 800c4fa:	6833      	ldr	r3, [r6, #0]
 800c4fc:	461c      	mov	r4, r3
 800c4fe:	bb34      	cbnz	r4, 800c54e <_malloc_r+0x82>
 800c500:	4629      	mov	r1, r5
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff ffc2 	bl	800c48c <sbrk_aligned>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	4604      	mov	r4, r0
 800c50c:	d14d      	bne.n	800c5aa <_malloc_r+0xde>
 800c50e:	6834      	ldr	r4, [r6, #0]
 800c510:	4626      	mov	r6, r4
 800c512:	2e00      	cmp	r6, #0
 800c514:	d140      	bne.n	800c598 <_malloc_r+0xcc>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4631      	mov	r1, r6
 800c51a:	4638      	mov	r0, r7
 800c51c:	eb04 0803 	add.w	r8, r4, r3
 800c520:	f000 f848 	bl	800c5b4 <_sbrk_r>
 800c524:	4580      	cmp	r8, r0
 800c526:	d13a      	bne.n	800c59e <_malloc_r+0xd2>
 800c528:	6821      	ldr	r1, [r4, #0]
 800c52a:	3503      	adds	r5, #3
 800c52c:	1a6d      	subs	r5, r5, r1
 800c52e:	f025 0503 	bic.w	r5, r5, #3
 800c532:	3508      	adds	r5, #8
 800c534:	2d0c      	cmp	r5, #12
 800c536:	bf38      	it	cc
 800c538:	250c      	movcc	r5, #12
 800c53a:	4629      	mov	r1, r5
 800c53c:	4638      	mov	r0, r7
 800c53e:	f7ff ffa5 	bl	800c48c <sbrk_aligned>
 800c542:	3001      	adds	r0, #1
 800c544:	d02b      	beq.n	800c59e <_malloc_r+0xd2>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	442b      	add	r3, r5
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	e00e      	b.n	800c56c <_malloc_r+0xa0>
 800c54e:	6822      	ldr	r2, [r4, #0]
 800c550:	1b52      	subs	r2, r2, r5
 800c552:	d41e      	bmi.n	800c592 <_malloc_r+0xc6>
 800c554:	2a0b      	cmp	r2, #11
 800c556:	d916      	bls.n	800c586 <_malloc_r+0xba>
 800c558:	1961      	adds	r1, r4, r5
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	6025      	str	r5, [r4, #0]
 800c55e:	bf18      	it	ne
 800c560:	6059      	strne	r1, [r3, #4]
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	bf08      	it	eq
 800c566:	6031      	streq	r1, [r6, #0]
 800c568:	5162      	str	r2, [r4, r5]
 800c56a:	604b      	str	r3, [r1, #4]
 800c56c:	4638      	mov	r0, r7
 800c56e:	f104 060b 	add.w	r6, r4, #11
 800c572:	f000 f939 	bl	800c7e8 <__malloc_unlock>
 800c576:	f026 0607 	bic.w	r6, r6, #7
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	1af2      	subs	r2, r6, r3
 800c57e:	d0b6      	beq.n	800c4ee <_malloc_r+0x22>
 800c580:	1b9b      	subs	r3, r3, r6
 800c582:	50a3      	str	r3, [r4, r2]
 800c584:	e7b3      	b.n	800c4ee <_malloc_r+0x22>
 800c586:	6862      	ldr	r2, [r4, #4]
 800c588:	42a3      	cmp	r3, r4
 800c58a:	bf0c      	ite	eq
 800c58c:	6032      	streq	r2, [r6, #0]
 800c58e:	605a      	strne	r2, [r3, #4]
 800c590:	e7ec      	b.n	800c56c <_malloc_r+0xa0>
 800c592:	4623      	mov	r3, r4
 800c594:	6864      	ldr	r4, [r4, #4]
 800c596:	e7b2      	b.n	800c4fe <_malloc_r+0x32>
 800c598:	4634      	mov	r4, r6
 800c59a:	6876      	ldr	r6, [r6, #4]
 800c59c:	e7b9      	b.n	800c512 <_malloc_r+0x46>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f000 f920 	bl	800c7e8 <__malloc_unlock>
 800c5a8:	e7a1      	b.n	800c4ee <_malloc_r+0x22>
 800c5aa:	6025      	str	r5, [r4, #0]
 800c5ac:	e7de      	b.n	800c56c <_malloc_r+0xa0>
 800c5ae:	bf00      	nop
 800c5b0:	20001d44 	.word	0x20001d44

0800c5b4 <_sbrk_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d06      	ldr	r5, [pc, #24]	; (800c5d0 <_sbrk_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f8 faf6 	bl	8004bb0 <_sbrk>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_sbrk_r+0x1a>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_sbrk_r+0x1a>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20001de0 	.word	0x20001de0

0800c5d4 <_raise_r>:
 800c5d4:	291f      	cmp	r1, #31
 800c5d6:	b538      	push	{r3, r4, r5, lr}
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460d      	mov	r5, r1
 800c5dc:	d904      	bls.n	800c5e8 <_raise_r+0x14>
 800c5de:	2316      	movs	r3, #22
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5ea:	b112      	cbz	r2, 800c5f2 <_raise_r+0x1e>
 800c5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5f0:	b94b      	cbnz	r3, 800c606 <_raise_r+0x32>
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f830 	bl	800c658 <_getpid_r>
 800c5f8:	462a      	mov	r2, r5
 800c5fa:	4601      	mov	r1, r0
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c602:	f000 b817 	b.w	800c634 <_kill_r>
 800c606:	2b01      	cmp	r3, #1
 800c608:	d00a      	beq.n	800c620 <_raise_r+0x4c>
 800c60a:	1c59      	adds	r1, r3, #1
 800c60c:	d103      	bne.n	800c616 <_raise_r+0x42>
 800c60e:	2316      	movs	r3, #22
 800c610:	6003      	str	r3, [r0, #0]
 800c612:	2001      	movs	r0, #1
 800c614:	e7e7      	b.n	800c5e6 <_raise_r+0x12>
 800c616:	2400      	movs	r4, #0
 800c618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c61c:	4628      	mov	r0, r5
 800c61e:	4798      	blx	r3
 800c620:	2000      	movs	r0, #0
 800c622:	e7e0      	b.n	800c5e6 <_raise_r+0x12>

0800c624 <raise>:
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <raise+0xc>)
 800c626:	4601      	mov	r1, r0
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	f7ff bfd3 	b.w	800c5d4 <_raise_r>
 800c62e:	bf00      	nop
 800c630:	20000048 	.word	0x20000048

0800c634 <_kill_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4d07      	ldr	r5, [pc, #28]	; (800c654 <_kill_r+0x20>)
 800c638:	2300      	movs	r3, #0
 800c63a:	4604      	mov	r4, r0
 800c63c:	4608      	mov	r0, r1
 800c63e:	4611      	mov	r1, r2
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	f7f8 fa9b 	bl	8004b7c <_kill>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d102      	bne.n	800c650 <_kill_r+0x1c>
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	b103      	cbz	r3, 800c650 <_kill_r+0x1c>
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	bd38      	pop	{r3, r4, r5, pc}
 800c652:	bf00      	nop
 800c654:	20001de0 	.word	0x20001de0

0800c658 <_getpid_r>:
 800c658:	f7f8 ba88 	b.w	8004b6c <_getpid>

0800c65c <siprintf>:
 800c65c:	b40e      	push	{r1, r2, r3}
 800c65e:	b500      	push	{lr}
 800c660:	b09c      	sub	sp, #112	; 0x70
 800c662:	ab1d      	add	r3, sp, #116	; 0x74
 800c664:	9002      	str	r0, [sp, #8]
 800c666:	9006      	str	r0, [sp, #24]
 800c668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c66c:	4809      	ldr	r0, [pc, #36]	; (800c694 <siprintf+0x38>)
 800c66e:	9107      	str	r1, [sp, #28]
 800c670:	9104      	str	r1, [sp, #16]
 800c672:	4909      	ldr	r1, [pc, #36]	; (800c698 <siprintf+0x3c>)
 800c674:	f853 2b04 	ldr.w	r2, [r3], #4
 800c678:	9105      	str	r1, [sp, #20]
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	a902      	add	r1, sp, #8
 800c680:	f000 f914 	bl	800c8ac <_svfiprintf_r>
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	b01c      	add	sp, #112	; 0x70
 800c68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c690:	b003      	add	sp, #12
 800c692:	4770      	bx	lr
 800c694:	20000048 	.word	0x20000048
 800c698:	ffff0208 	.word	0xffff0208

0800c69c <_vsniprintf_r>:
 800c69c:	b530      	push	{r4, r5, lr}
 800c69e:	4614      	mov	r4, r2
 800c6a0:	2c00      	cmp	r4, #0
 800c6a2:	b09b      	sub	sp, #108	; 0x6c
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	da05      	bge.n	800c6b6 <_vsniprintf_r+0x1a>
 800c6aa:	238b      	movs	r3, #139	; 0x8b
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b2:	b01b      	add	sp, #108	; 0x6c
 800c6b4:	bd30      	pop	{r4, r5, pc}
 800c6b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c6ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c6be:	bf14      	ite	ne
 800c6c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c6c4:	4623      	moveq	r3, r4
 800c6c6:	9302      	str	r3, [sp, #8]
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6ce:	9100      	str	r1, [sp, #0]
 800c6d0:	9104      	str	r1, [sp, #16]
 800c6d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c6d6:	4669      	mov	r1, sp
 800c6d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6da:	f000 f8e7 	bl	800c8ac <_svfiprintf_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	bfbc      	itt	lt
 800c6e2:	238b      	movlt	r3, #139	; 0x8b
 800c6e4:	602b      	strlt	r3, [r5, #0]
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	d0e3      	beq.n	800c6b2 <_vsniprintf_r+0x16>
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]
 800c6f0:	e7df      	b.n	800c6b2 <_vsniprintf_r+0x16>
	...

0800c6f4 <vsniprintf>:
 800c6f4:	b507      	push	{r0, r1, r2, lr}
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	460a      	mov	r2, r1
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	4803      	ldr	r0, [pc, #12]	; (800c70c <vsniprintf+0x18>)
 800c700:	6800      	ldr	r0, [r0, #0]
 800c702:	f7ff ffcb 	bl	800c69c <_vsniprintf_r>
 800c706:	b003      	add	sp, #12
 800c708:	f85d fb04 	ldr.w	pc, [sp], #4
 800c70c:	20000048 	.word	0x20000048

0800c710 <__register_exitproc>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c7d0 <__register_exitproc+0xc0>
 800c718:	4606      	mov	r6, r0
 800c71a:	f8d8 0000 	ldr.w	r0, [r8]
 800c71e:	461f      	mov	r7, r3
 800c720:	460d      	mov	r5, r1
 800c722:	4691      	mov	r9, r2
 800c724:	f000 f856 	bl	800c7d4 <__retarget_lock_acquire_recursive>
 800c728:	4b25      	ldr	r3, [pc, #148]	; (800c7c0 <__register_exitproc+0xb0>)
 800c72a:	681c      	ldr	r4, [r3, #0]
 800c72c:	b934      	cbnz	r4, 800c73c <__register_exitproc+0x2c>
 800c72e:	4c25      	ldr	r4, [pc, #148]	; (800c7c4 <__register_exitproc+0xb4>)
 800c730:	601c      	str	r4, [r3, #0]
 800c732:	4b25      	ldr	r3, [pc, #148]	; (800c7c8 <__register_exitproc+0xb8>)
 800c734:	b113      	cbz	r3, 800c73c <__register_exitproc+0x2c>
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c73c:	6863      	ldr	r3, [r4, #4]
 800c73e:	2b1f      	cmp	r3, #31
 800c740:	dd07      	ble.n	800c752 <__register_exitproc+0x42>
 800c742:	f8d8 0000 	ldr.w	r0, [r8]
 800c746:	f000 f847 	bl	800c7d8 <__retarget_lock_release_recursive>
 800c74a:	f04f 30ff 	mov.w	r0, #4294967295
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	b34e      	cbz	r6, 800c7a8 <__register_exitproc+0x98>
 800c754:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c758:	b988      	cbnz	r0, 800c77e <__register_exitproc+0x6e>
 800c75a:	4b1c      	ldr	r3, [pc, #112]	; (800c7cc <__register_exitproc+0xbc>)
 800c75c:	b923      	cbnz	r3, 800c768 <__register_exitproc+0x58>
 800c75e:	f8d8 0000 	ldr.w	r0, [r8]
 800c762:	f000 f838 	bl	800c7d6 <__retarget_lock_release>
 800c766:	e7f0      	b.n	800c74a <__register_exitproc+0x3a>
 800c768:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c76c:	f7ff fe1c 	bl	800c3a8 <malloc>
 800c770:	2800      	cmp	r0, #0
 800c772:	d0f4      	beq.n	800c75e <__register_exitproc+0x4e>
 800c774:	2300      	movs	r3, #0
 800c776:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800c77a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c77e:	6863      	ldr	r3, [r4, #4]
 800c780:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800c784:	2201      	movs	r2, #1
 800c786:	409a      	lsls	r2, r3
 800c788:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c78c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c790:	4313      	orrs	r3, r2
 800c792:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c796:	2e02      	cmp	r6, #2
 800c798:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800c79c:	bf02      	ittt	eq
 800c79e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800c7a2:	4313      	orreq	r3, r2
 800c7a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800c7a8:	6863      	ldr	r3, [r4, #4]
 800c7aa:	f8d8 0000 	ldr.w	r0, [r8]
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	3302      	adds	r3, #2
 800c7b2:	6062      	str	r2, [r4, #4]
 800c7b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c7b8:	f000 f80e 	bl	800c7d8 <__retarget_lock_release_recursive>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e7c6      	b.n	800c74e <__register_exitproc+0x3e>
 800c7c0:	20001dd8 	.word	0x20001dd8
 800c7c4:	20001d4c 	.word	0x20001d4c
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	0800c3a9 	.word	0x0800c3a9
 800c7d0:	200000ac 	.word	0x200000ac

0800c7d4 <__retarget_lock_acquire_recursive>:
 800c7d4:	4770      	bx	lr

0800c7d6 <__retarget_lock_release>:
 800c7d6:	4770      	bx	lr

0800c7d8 <__retarget_lock_release_recursive>:
 800c7d8:	4770      	bx	lr
	...

0800c7dc <__malloc_lock>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	; (800c7e4 <__malloc_lock+0x8>)
 800c7de:	f7ff bff9 	b.w	800c7d4 <__retarget_lock_acquire_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	20001ddd 	.word	0x20001ddd

0800c7e8 <__malloc_unlock>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	; (800c7f0 <__malloc_unlock+0x8>)
 800c7ea:	f7ff bff5 	b.w	800c7d8 <__retarget_lock_release_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	20001ddd 	.word	0x20001ddd

0800c7f4 <__ssputs_r>:
 800c7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	688e      	ldr	r6, [r1, #8]
 800c7fa:	429e      	cmp	r6, r3
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	4690      	mov	r8, r2
 800c802:	461f      	mov	r7, r3
 800c804:	d838      	bhi.n	800c878 <__ssputs_r+0x84>
 800c806:	898a      	ldrh	r2, [r1, #12]
 800c808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c80c:	d032      	beq.n	800c874 <__ssputs_r+0x80>
 800c80e:	6825      	ldr	r5, [r4, #0]
 800c810:	6909      	ldr	r1, [r1, #16]
 800c812:	eba5 0901 	sub.w	r9, r5, r1
 800c816:	6965      	ldr	r5, [r4, #20]
 800c818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c81c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c820:	3301      	adds	r3, #1
 800c822:	444b      	add	r3, r9
 800c824:	106d      	asrs	r5, r5, #1
 800c826:	429d      	cmp	r5, r3
 800c828:	bf38      	it	cc
 800c82a:	461d      	movcc	r5, r3
 800c82c:	0553      	lsls	r3, r2, #21
 800c82e:	d531      	bpl.n	800c894 <__ssputs_r+0xa0>
 800c830:	4629      	mov	r1, r5
 800c832:	f7ff fe4b 	bl	800c4cc <_malloc_r>
 800c836:	4606      	mov	r6, r0
 800c838:	b950      	cbnz	r0, 800c850 <__ssputs_r+0x5c>
 800c83a:	230c      	movs	r3, #12
 800c83c:	f8ca 3000 	str.w	r3, [sl]
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	6921      	ldr	r1, [r4, #16]
 800c852:	464a      	mov	r2, r9
 800c854:	f7ff fdb8 	bl	800c3c8 <memcpy>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	6126      	str	r6, [r4, #16]
 800c866:	6165      	str	r5, [r4, #20]
 800c868:	444e      	add	r6, r9
 800c86a:	eba5 0509 	sub.w	r5, r5, r9
 800c86e:	6026      	str	r6, [r4, #0]
 800c870:	60a5      	str	r5, [r4, #8]
 800c872:	463e      	mov	r6, r7
 800c874:	42be      	cmp	r6, r7
 800c876:	d900      	bls.n	800c87a <__ssputs_r+0x86>
 800c878:	463e      	mov	r6, r7
 800c87a:	6820      	ldr	r0, [r4, #0]
 800c87c:	4632      	mov	r2, r6
 800c87e:	4641      	mov	r1, r8
 800c880:	f000 faa8 	bl	800cdd4 <memmove>
 800c884:	68a3      	ldr	r3, [r4, #8]
 800c886:	1b9b      	subs	r3, r3, r6
 800c888:	60a3      	str	r3, [r4, #8]
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	4433      	add	r3, r6
 800c88e:	6023      	str	r3, [r4, #0]
 800c890:	2000      	movs	r0, #0
 800c892:	e7db      	b.n	800c84c <__ssputs_r+0x58>
 800c894:	462a      	mov	r2, r5
 800c896:	f000 fab7 	bl	800ce08 <_realloc_r>
 800c89a:	4606      	mov	r6, r0
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d1e1      	bne.n	800c864 <__ssputs_r+0x70>
 800c8a0:	6921      	ldr	r1, [r4, #16]
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	f7ff fda6 	bl	800c3f4 <_free_r>
 800c8a8:	e7c7      	b.n	800c83a <__ssputs_r+0x46>
	...

0800c8ac <_svfiprintf_r>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	4698      	mov	r8, r3
 800c8b2:	898b      	ldrh	r3, [r1, #12]
 800c8b4:	061b      	lsls	r3, r3, #24
 800c8b6:	b09d      	sub	sp, #116	; 0x74
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	4614      	mov	r4, r2
 800c8be:	d50e      	bpl.n	800c8de <_svfiprintf_r+0x32>
 800c8c0:	690b      	ldr	r3, [r1, #16]
 800c8c2:	b963      	cbnz	r3, 800c8de <_svfiprintf_r+0x32>
 800c8c4:	2140      	movs	r1, #64	; 0x40
 800c8c6:	f7ff fe01 	bl	800c4cc <_malloc_r>
 800c8ca:	6028      	str	r0, [r5, #0]
 800c8cc:	6128      	str	r0, [r5, #16]
 800c8ce:	b920      	cbnz	r0, 800c8da <_svfiprintf_r+0x2e>
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d8:	e0d1      	b.n	800ca7e <_svfiprintf_r+0x1d2>
 800c8da:	2340      	movs	r3, #64	; 0x40
 800c8dc:	616b      	str	r3, [r5, #20]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e2:	2320      	movs	r3, #32
 800c8e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ec:	2330      	movs	r3, #48	; 0x30
 800c8ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca98 <_svfiprintf_r+0x1ec>
 800c8f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8f6:	f04f 0901 	mov.w	r9, #1
 800c8fa:	4623      	mov	r3, r4
 800c8fc:	469a      	mov	sl, r3
 800c8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c902:	b10a      	cbz	r2, 800c908 <_svfiprintf_r+0x5c>
 800c904:	2a25      	cmp	r2, #37	; 0x25
 800c906:	d1f9      	bne.n	800c8fc <_svfiprintf_r+0x50>
 800c908:	ebba 0b04 	subs.w	fp, sl, r4
 800c90c:	d00b      	beq.n	800c926 <_svfiprintf_r+0x7a>
 800c90e:	465b      	mov	r3, fp
 800c910:	4622      	mov	r2, r4
 800c912:	4629      	mov	r1, r5
 800c914:	4638      	mov	r0, r7
 800c916:	f7ff ff6d 	bl	800c7f4 <__ssputs_r>
 800c91a:	3001      	adds	r0, #1
 800c91c:	f000 80aa 	beq.w	800ca74 <_svfiprintf_r+0x1c8>
 800c920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c922:	445a      	add	r2, fp
 800c924:	9209      	str	r2, [sp, #36]	; 0x24
 800c926:	f89a 3000 	ldrb.w	r3, [sl]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 80a2 	beq.w	800ca74 <_svfiprintf_r+0x1c8>
 800c930:	2300      	movs	r3, #0
 800c932:	f04f 32ff 	mov.w	r2, #4294967295
 800c936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c93a:	f10a 0a01 	add.w	sl, sl, #1
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	9307      	str	r3, [sp, #28]
 800c942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c946:	931a      	str	r3, [sp, #104]	; 0x68
 800c948:	4654      	mov	r4, sl
 800c94a:	2205      	movs	r2, #5
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	4851      	ldr	r0, [pc, #324]	; (800ca98 <_svfiprintf_r+0x1ec>)
 800c952:	f7f3 fc4d 	bl	80001f0 <memchr>
 800c956:	9a04      	ldr	r2, [sp, #16]
 800c958:	b9d8      	cbnz	r0, 800c992 <_svfiprintf_r+0xe6>
 800c95a:	06d0      	lsls	r0, r2, #27
 800c95c:	bf44      	itt	mi
 800c95e:	2320      	movmi	r3, #32
 800c960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c964:	0711      	lsls	r1, r2, #28
 800c966:	bf44      	itt	mi
 800c968:	232b      	movmi	r3, #43	; 0x2b
 800c96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c96e:	f89a 3000 	ldrb.w	r3, [sl]
 800c972:	2b2a      	cmp	r3, #42	; 0x2a
 800c974:	d015      	beq.n	800c9a2 <_svfiprintf_r+0xf6>
 800c976:	9a07      	ldr	r2, [sp, #28]
 800c978:	4654      	mov	r4, sl
 800c97a:	2000      	movs	r0, #0
 800c97c:	f04f 0c0a 	mov.w	ip, #10
 800c980:	4621      	mov	r1, r4
 800c982:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c986:	3b30      	subs	r3, #48	; 0x30
 800c988:	2b09      	cmp	r3, #9
 800c98a:	d94e      	bls.n	800ca2a <_svfiprintf_r+0x17e>
 800c98c:	b1b0      	cbz	r0, 800c9bc <_svfiprintf_r+0x110>
 800c98e:	9207      	str	r2, [sp, #28]
 800c990:	e014      	b.n	800c9bc <_svfiprintf_r+0x110>
 800c992:	eba0 0308 	sub.w	r3, r0, r8
 800c996:	fa09 f303 	lsl.w	r3, r9, r3
 800c99a:	4313      	orrs	r3, r2
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	46a2      	mov	sl, r4
 800c9a0:	e7d2      	b.n	800c948 <_svfiprintf_r+0x9c>
 800c9a2:	9b03      	ldr	r3, [sp, #12]
 800c9a4:	1d19      	adds	r1, r3, #4
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	9103      	str	r1, [sp, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfbb      	ittet	lt
 800c9ae:	425b      	neglt	r3, r3
 800c9b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9b4:	9307      	strge	r3, [sp, #28]
 800c9b6:	9307      	strlt	r3, [sp, #28]
 800c9b8:	bfb8      	it	lt
 800c9ba:	9204      	strlt	r2, [sp, #16]
 800c9bc:	7823      	ldrb	r3, [r4, #0]
 800c9be:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c0:	d10c      	bne.n	800c9dc <_svfiprintf_r+0x130>
 800c9c2:	7863      	ldrb	r3, [r4, #1]
 800c9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c6:	d135      	bne.n	800ca34 <_svfiprintf_r+0x188>
 800c9c8:	9b03      	ldr	r3, [sp, #12]
 800c9ca:	1d1a      	adds	r2, r3, #4
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	9203      	str	r2, [sp, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	bfb8      	it	lt
 800c9d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9d8:	3402      	adds	r4, #2
 800c9da:	9305      	str	r3, [sp, #20]
 800c9dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800caa8 <_svfiprintf_r+0x1fc>
 800c9e0:	7821      	ldrb	r1, [r4, #0]
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	4650      	mov	r0, sl
 800c9e6:	f7f3 fc03 	bl	80001f0 <memchr>
 800c9ea:	b140      	cbz	r0, 800c9fe <_svfiprintf_r+0x152>
 800c9ec:	2340      	movs	r3, #64	; 0x40
 800c9ee:	eba0 000a 	sub.w	r0, r0, sl
 800c9f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	4303      	orrs	r3, r0
 800c9fa:	3401      	adds	r4, #1
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca02:	4826      	ldr	r0, [pc, #152]	; (800ca9c <_svfiprintf_r+0x1f0>)
 800ca04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca08:	2206      	movs	r2, #6
 800ca0a:	f7f3 fbf1 	bl	80001f0 <memchr>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d038      	beq.n	800ca84 <_svfiprintf_r+0x1d8>
 800ca12:	4b23      	ldr	r3, [pc, #140]	; (800caa0 <_svfiprintf_r+0x1f4>)
 800ca14:	bb1b      	cbnz	r3, 800ca5e <_svfiprintf_r+0x1b2>
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	3307      	adds	r3, #7
 800ca1a:	f023 0307 	bic.w	r3, r3, #7
 800ca1e:	3308      	adds	r3, #8
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca24:	4433      	add	r3, r6
 800ca26:	9309      	str	r3, [sp, #36]	; 0x24
 800ca28:	e767      	b.n	800c8fa <_svfiprintf_r+0x4e>
 800ca2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca2e:	460c      	mov	r4, r1
 800ca30:	2001      	movs	r0, #1
 800ca32:	e7a5      	b.n	800c980 <_svfiprintf_r+0xd4>
 800ca34:	2300      	movs	r3, #0
 800ca36:	3401      	adds	r4, #1
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f04f 0c0a 	mov.w	ip, #10
 800ca40:	4620      	mov	r0, r4
 800ca42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca46:	3a30      	subs	r2, #48	; 0x30
 800ca48:	2a09      	cmp	r2, #9
 800ca4a:	d903      	bls.n	800ca54 <_svfiprintf_r+0x1a8>
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0c5      	beq.n	800c9dc <_svfiprintf_r+0x130>
 800ca50:	9105      	str	r1, [sp, #20]
 800ca52:	e7c3      	b.n	800c9dc <_svfiprintf_r+0x130>
 800ca54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca58:	4604      	mov	r4, r0
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e7f0      	b.n	800ca40 <_svfiprintf_r+0x194>
 800ca5e:	ab03      	add	r3, sp, #12
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	462a      	mov	r2, r5
 800ca64:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <_svfiprintf_r+0x1f8>)
 800ca66:	a904      	add	r1, sp, #16
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f3af 8000 	nop.w
 800ca6e:	1c42      	adds	r2, r0, #1
 800ca70:	4606      	mov	r6, r0
 800ca72:	d1d6      	bne.n	800ca22 <_svfiprintf_r+0x176>
 800ca74:	89ab      	ldrh	r3, [r5, #12]
 800ca76:	065b      	lsls	r3, r3, #25
 800ca78:	f53f af2c 	bmi.w	800c8d4 <_svfiprintf_r+0x28>
 800ca7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca7e:	b01d      	add	sp, #116	; 0x74
 800ca80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca84:	ab03      	add	r3, sp, #12
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4b06      	ldr	r3, [pc, #24]	; (800caa4 <_svfiprintf_r+0x1f8>)
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f000 f87a 	bl	800cb88 <_printf_i>
 800ca94:	e7eb      	b.n	800ca6e <_svfiprintf_r+0x1c2>
 800ca96:	bf00      	nop
 800ca98:	0800e63c 	.word	0x0800e63c
 800ca9c:	0800e646 	.word	0x0800e646
 800caa0:	00000000 	.word	0x00000000
 800caa4:	0800c7f5 	.word	0x0800c7f5
 800caa8:	0800e642 	.word	0x0800e642

0800caac <_printf_common>:
 800caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	4616      	mov	r6, r2
 800cab2:	4699      	mov	r9, r3
 800cab4:	688a      	ldr	r2, [r1, #8]
 800cab6:	690b      	ldr	r3, [r1, #16]
 800cab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cabc:	4293      	cmp	r3, r2
 800cabe:	bfb8      	it	lt
 800cac0:	4613      	movlt	r3, r2
 800cac2:	6033      	str	r3, [r6, #0]
 800cac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cac8:	4607      	mov	r7, r0
 800caca:	460c      	mov	r4, r1
 800cacc:	b10a      	cbz	r2, 800cad2 <_printf_common+0x26>
 800cace:	3301      	adds	r3, #1
 800cad0:	6033      	str	r3, [r6, #0]
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	0699      	lsls	r1, r3, #26
 800cad6:	bf42      	ittt	mi
 800cad8:	6833      	ldrmi	r3, [r6, #0]
 800cada:	3302      	addmi	r3, #2
 800cadc:	6033      	strmi	r3, [r6, #0]
 800cade:	6825      	ldr	r5, [r4, #0]
 800cae0:	f015 0506 	ands.w	r5, r5, #6
 800cae4:	d106      	bne.n	800caf4 <_printf_common+0x48>
 800cae6:	f104 0a19 	add.w	sl, r4, #25
 800caea:	68e3      	ldr	r3, [r4, #12]
 800caec:	6832      	ldr	r2, [r6, #0]
 800caee:	1a9b      	subs	r3, r3, r2
 800caf0:	42ab      	cmp	r3, r5
 800caf2:	dc26      	bgt.n	800cb42 <_printf_common+0x96>
 800caf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800caf8:	1e13      	subs	r3, r2, #0
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	bf18      	it	ne
 800cafe:	2301      	movne	r3, #1
 800cb00:	0692      	lsls	r2, r2, #26
 800cb02:	d42b      	bmi.n	800cb5c <_printf_common+0xb0>
 800cb04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb08:	4649      	mov	r1, r9
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	47c0      	blx	r8
 800cb0e:	3001      	adds	r0, #1
 800cb10:	d01e      	beq.n	800cb50 <_printf_common+0xa4>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	68e5      	ldr	r5, [r4, #12]
 800cb16:	6832      	ldr	r2, [r6, #0]
 800cb18:	f003 0306 	and.w	r3, r3, #6
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	bf08      	it	eq
 800cb20:	1aad      	subeq	r5, r5, r2
 800cb22:	68a3      	ldr	r3, [r4, #8]
 800cb24:	6922      	ldr	r2, [r4, #16]
 800cb26:	bf0c      	ite	eq
 800cb28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb2c:	2500      	movne	r5, #0
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	bfc4      	itt	gt
 800cb32:	1a9b      	subgt	r3, r3, r2
 800cb34:	18ed      	addgt	r5, r5, r3
 800cb36:	2600      	movs	r6, #0
 800cb38:	341a      	adds	r4, #26
 800cb3a:	42b5      	cmp	r5, r6
 800cb3c:	d11a      	bne.n	800cb74 <_printf_common+0xc8>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e008      	b.n	800cb54 <_printf_common+0xa8>
 800cb42:	2301      	movs	r3, #1
 800cb44:	4652      	mov	r2, sl
 800cb46:	4649      	mov	r1, r9
 800cb48:	4638      	mov	r0, r7
 800cb4a:	47c0      	blx	r8
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d103      	bne.n	800cb58 <_printf_common+0xac>
 800cb50:	f04f 30ff 	mov.w	r0, #4294967295
 800cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb58:	3501      	adds	r5, #1
 800cb5a:	e7c6      	b.n	800caea <_printf_common+0x3e>
 800cb5c:	18e1      	adds	r1, r4, r3
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	2030      	movs	r0, #48	; 0x30
 800cb62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb66:	4422      	add	r2, r4
 800cb68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb70:	3302      	adds	r3, #2
 800cb72:	e7c7      	b.n	800cb04 <_printf_common+0x58>
 800cb74:	2301      	movs	r3, #1
 800cb76:	4622      	mov	r2, r4
 800cb78:	4649      	mov	r1, r9
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	47c0      	blx	r8
 800cb7e:	3001      	adds	r0, #1
 800cb80:	d0e6      	beq.n	800cb50 <_printf_common+0xa4>
 800cb82:	3601      	adds	r6, #1
 800cb84:	e7d9      	b.n	800cb3a <_printf_common+0x8e>
	...

0800cb88 <_printf_i>:
 800cb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	7e0f      	ldrb	r7, [r1, #24]
 800cb8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb90:	2f78      	cmp	r7, #120	; 0x78
 800cb92:	4691      	mov	r9, r2
 800cb94:	4680      	mov	r8, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	469a      	mov	sl, r3
 800cb9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb9e:	d807      	bhi.n	800cbb0 <_printf_i+0x28>
 800cba0:	2f62      	cmp	r7, #98	; 0x62
 800cba2:	d80a      	bhi.n	800cbba <_printf_i+0x32>
 800cba4:	2f00      	cmp	r7, #0
 800cba6:	f000 80d8 	beq.w	800cd5a <_printf_i+0x1d2>
 800cbaa:	2f58      	cmp	r7, #88	; 0x58
 800cbac:	f000 80a3 	beq.w	800ccf6 <_printf_i+0x16e>
 800cbb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbb8:	e03a      	b.n	800cc30 <_printf_i+0xa8>
 800cbba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbbe:	2b15      	cmp	r3, #21
 800cbc0:	d8f6      	bhi.n	800cbb0 <_printf_i+0x28>
 800cbc2:	a101      	add	r1, pc, #4	; (adr r1, 800cbc8 <_printf_i+0x40>)
 800cbc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbc8:	0800cc21 	.word	0x0800cc21
 800cbcc:	0800cc35 	.word	0x0800cc35
 800cbd0:	0800cbb1 	.word	0x0800cbb1
 800cbd4:	0800cbb1 	.word	0x0800cbb1
 800cbd8:	0800cbb1 	.word	0x0800cbb1
 800cbdc:	0800cbb1 	.word	0x0800cbb1
 800cbe0:	0800cc35 	.word	0x0800cc35
 800cbe4:	0800cbb1 	.word	0x0800cbb1
 800cbe8:	0800cbb1 	.word	0x0800cbb1
 800cbec:	0800cbb1 	.word	0x0800cbb1
 800cbf0:	0800cbb1 	.word	0x0800cbb1
 800cbf4:	0800cd41 	.word	0x0800cd41
 800cbf8:	0800cc65 	.word	0x0800cc65
 800cbfc:	0800cd23 	.word	0x0800cd23
 800cc00:	0800cbb1 	.word	0x0800cbb1
 800cc04:	0800cbb1 	.word	0x0800cbb1
 800cc08:	0800cd63 	.word	0x0800cd63
 800cc0c:	0800cbb1 	.word	0x0800cbb1
 800cc10:	0800cc65 	.word	0x0800cc65
 800cc14:	0800cbb1 	.word	0x0800cbb1
 800cc18:	0800cbb1 	.word	0x0800cbb1
 800cc1c:	0800cd2b 	.word	0x0800cd2b
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	1d1a      	adds	r2, r3, #4
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	602a      	str	r2, [r5, #0]
 800cc28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc30:	2301      	movs	r3, #1
 800cc32:	e0a3      	b.n	800cd7c <_printf_i+0x1f4>
 800cc34:	6820      	ldr	r0, [r4, #0]
 800cc36:	6829      	ldr	r1, [r5, #0]
 800cc38:	0606      	lsls	r6, r0, #24
 800cc3a:	f101 0304 	add.w	r3, r1, #4
 800cc3e:	d50a      	bpl.n	800cc56 <_printf_i+0xce>
 800cc40:	680e      	ldr	r6, [r1, #0]
 800cc42:	602b      	str	r3, [r5, #0]
 800cc44:	2e00      	cmp	r6, #0
 800cc46:	da03      	bge.n	800cc50 <_printf_i+0xc8>
 800cc48:	232d      	movs	r3, #45	; 0x2d
 800cc4a:	4276      	negs	r6, r6
 800cc4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc50:	485e      	ldr	r0, [pc, #376]	; (800cdcc <_printf_i+0x244>)
 800cc52:	230a      	movs	r3, #10
 800cc54:	e019      	b.n	800cc8a <_printf_i+0x102>
 800cc56:	680e      	ldr	r6, [r1, #0]
 800cc58:	602b      	str	r3, [r5, #0]
 800cc5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc5e:	bf18      	it	ne
 800cc60:	b236      	sxthne	r6, r6
 800cc62:	e7ef      	b.n	800cc44 <_printf_i+0xbc>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	1d19      	adds	r1, r3, #4
 800cc6a:	6029      	str	r1, [r5, #0]
 800cc6c:	0601      	lsls	r1, r0, #24
 800cc6e:	d501      	bpl.n	800cc74 <_printf_i+0xec>
 800cc70:	681e      	ldr	r6, [r3, #0]
 800cc72:	e002      	b.n	800cc7a <_printf_i+0xf2>
 800cc74:	0646      	lsls	r6, r0, #25
 800cc76:	d5fb      	bpl.n	800cc70 <_printf_i+0xe8>
 800cc78:	881e      	ldrh	r6, [r3, #0]
 800cc7a:	4854      	ldr	r0, [pc, #336]	; (800cdcc <_printf_i+0x244>)
 800cc7c:	2f6f      	cmp	r7, #111	; 0x6f
 800cc7e:	bf0c      	ite	eq
 800cc80:	2308      	moveq	r3, #8
 800cc82:	230a      	movne	r3, #10
 800cc84:	2100      	movs	r1, #0
 800cc86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc8a:	6865      	ldr	r5, [r4, #4]
 800cc8c:	60a5      	str	r5, [r4, #8]
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	bfa2      	ittt	ge
 800cc92:	6821      	ldrge	r1, [r4, #0]
 800cc94:	f021 0104 	bicge.w	r1, r1, #4
 800cc98:	6021      	strge	r1, [r4, #0]
 800cc9a:	b90e      	cbnz	r6, 800cca0 <_printf_i+0x118>
 800cc9c:	2d00      	cmp	r5, #0
 800cc9e:	d04d      	beq.n	800cd3c <_printf_i+0x1b4>
 800cca0:	4615      	mov	r5, r2
 800cca2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cca6:	fb03 6711 	mls	r7, r3, r1, r6
 800ccaa:	5dc7      	ldrb	r7, [r0, r7]
 800ccac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ccb0:	4637      	mov	r7, r6
 800ccb2:	42bb      	cmp	r3, r7
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	d9f4      	bls.n	800cca2 <_printf_i+0x11a>
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d10b      	bne.n	800ccd4 <_printf_i+0x14c>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	07de      	lsls	r6, r3, #31
 800ccc0:	d508      	bpl.n	800ccd4 <_printf_i+0x14c>
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	6861      	ldr	r1, [r4, #4]
 800ccc6:	4299      	cmp	r1, r3
 800ccc8:	bfde      	ittt	le
 800ccca:	2330      	movle	r3, #48	; 0x30
 800cccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ccd4:	1b52      	subs	r2, r2, r5
 800ccd6:	6122      	str	r2, [r4, #16]
 800ccd8:	f8cd a000 	str.w	sl, [sp]
 800ccdc:	464b      	mov	r3, r9
 800ccde:	aa03      	add	r2, sp, #12
 800cce0:	4621      	mov	r1, r4
 800cce2:	4640      	mov	r0, r8
 800cce4:	f7ff fee2 	bl	800caac <_printf_common>
 800cce8:	3001      	adds	r0, #1
 800ccea:	d14c      	bne.n	800cd86 <_printf_i+0x1fe>
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	b004      	add	sp, #16
 800ccf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf6:	4835      	ldr	r0, [pc, #212]	; (800cdcc <_printf_i+0x244>)
 800ccf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccfc:	6829      	ldr	r1, [r5, #0]
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd04:	6029      	str	r1, [r5, #0]
 800cd06:	061d      	lsls	r5, r3, #24
 800cd08:	d514      	bpl.n	800cd34 <_printf_i+0x1ac>
 800cd0a:	07df      	lsls	r7, r3, #31
 800cd0c:	bf44      	itt	mi
 800cd0e:	f043 0320 	orrmi.w	r3, r3, #32
 800cd12:	6023      	strmi	r3, [r4, #0]
 800cd14:	b91e      	cbnz	r6, 800cd1e <_printf_i+0x196>
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	f023 0320 	bic.w	r3, r3, #32
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	2310      	movs	r3, #16
 800cd20:	e7b0      	b.n	800cc84 <_printf_i+0xfc>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	f043 0320 	orr.w	r3, r3, #32
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	2378      	movs	r3, #120	; 0x78
 800cd2c:	4828      	ldr	r0, [pc, #160]	; (800cdd0 <_printf_i+0x248>)
 800cd2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd32:	e7e3      	b.n	800ccfc <_printf_i+0x174>
 800cd34:	0659      	lsls	r1, r3, #25
 800cd36:	bf48      	it	mi
 800cd38:	b2b6      	uxthmi	r6, r6
 800cd3a:	e7e6      	b.n	800cd0a <_printf_i+0x182>
 800cd3c:	4615      	mov	r5, r2
 800cd3e:	e7bb      	b.n	800ccb8 <_printf_i+0x130>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	6826      	ldr	r6, [r4, #0]
 800cd44:	6961      	ldr	r1, [r4, #20]
 800cd46:	1d18      	adds	r0, r3, #4
 800cd48:	6028      	str	r0, [r5, #0]
 800cd4a:	0635      	lsls	r5, r6, #24
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	d501      	bpl.n	800cd54 <_printf_i+0x1cc>
 800cd50:	6019      	str	r1, [r3, #0]
 800cd52:	e002      	b.n	800cd5a <_printf_i+0x1d2>
 800cd54:	0670      	lsls	r0, r6, #25
 800cd56:	d5fb      	bpl.n	800cd50 <_printf_i+0x1c8>
 800cd58:	8019      	strh	r1, [r3, #0]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	6123      	str	r3, [r4, #16]
 800cd5e:	4615      	mov	r5, r2
 800cd60:	e7ba      	b.n	800ccd8 <_printf_i+0x150>
 800cd62:	682b      	ldr	r3, [r5, #0]
 800cd64:	1d1a      	adds	r2, r3, #4
 800cd66:	602a      	str	r2, [r5, #0]
 800cd68:	681d      	ldr	r5, [r3, #0]
 800cd6a:	6862      	ldr	r2, [r4, #4]
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f7f3 fa3e 	bl	80001f0 <memchr>
 800cd74:	b108      	cbz	r0, 800cd7a <_printf_i+0x1f2>
 800cd76:	1b40      	subs	r0, r0, r5
 800cd78:	6060      	str	r0, [r4, #4]
 800cd7a:	6863      	ldr	r3, [r4, #4]
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd84:	e7a8      	b.n	800ccd8 <_printf_i+0x150>
 800cd86:	6923      	ldr	r3, [r4, #16]
 800cd88:	462a      	mov	r2, r5
 800cd8a:	4649      	mov	r1, r9
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	47d0      	blx	sl
 800cd90:	3001      	adds	r0, #1
 800cd92:	d0ab      	beq.n	800ccec <_printf_i+0x164>
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	079b      	lsls	r3, r3, #30
 800cd98:	d413      	bmi.n	800cdc2 <_printf_i+0x23a>
 800cd9a:	68e0      	ldr	r0, [r4, #12]
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	4298      	cmp	r0, r3
 800cda0:	bfb8      	it	lt
 800cda2:	4618      	movlt	r0, r3
 800cda4:	e7a4      	b.n	800ccf0 <_printf_i+0x168>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4632      	mov	r2, r6
 800cdaa:	4649      	mov	r1, r9
 800cdac:	4640      	mov	r0, r8
 800cdae:	47d0      	blx	sl
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d09b      	beq.n	800ccec <_printf_i+0x164>
 800cdb4:	3501      	adds	r5, #1
 800cdb6:	68e3      	ldr	r3, [r4, #12]
 800cdb8:	9903      	ldr	r1, [sp, #12]
 800cdba:	1a5b      	subs	r3, r3, r1
 800cdbc:	42ab      	cmp	r3, r5
 800cdbe:	dcf2      	bgt.n	800cda6 <_printf_i+0x21e>
 800cdc0:	e7eb      	b.n	800cd9a <_printf_i+0x212>
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	f104 0619 	add.w	r6, r4, #25
 800cdc8:	e7f5      	b.n	800cdb6 <_printf_i+0x22e>
 800cdca:	bf00      	nop
 800cdcc:	0800e64d 	.word	0x0800e64d
 800cdd0:	0800e65e 	.word	0x0800e65e

0800cdd4 <memmove>:
 800cdd4:	4288      	cmp	r0, r1
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	eb01 0402 	add.w	r4, r1, r2
 800cddc:	d902      	bls.n	800cde4 <memmove+0x10>
 800cdde:	4284      	cmp	r4, r0
 800cde0:	4623      	mov	r3, r4
 800cde2:	d807      	bhi.n	800cdf4 <memmove+0x20>
 800cde4:	1e43      	subs	r3, r0, #1
 800cde6:	42a1      	cmp	r1, r4
 800cde8:	d008      	beq.n	800cdfc <memmove+0x28>
 800cdea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdf2:	e7f8      	b.n	800cde6 <memmove+0x12>
 800cdf4:	4402      	add	r2, r0
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	428a      	cmp	r2, r1
 800cdfa:	d100      	bne.n	800cdfe <memmove+0x2a>
 800cdfc:	bd10      	pop	{r4, pc}
 800cdfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce06:	e7f7      	b.n	800cdf8 <memmove+0x24>

0800ce08 <_realloc_r>:
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0c:	4680      	mov	r8, r0
 800ce0e:	4614      	mov	r4, r2
 800ce10:	460e      	mov	r6, r1
 800ce12:	b921      	cbnz	r1, 800ce1e <_realloc_r+0x16>
 800ce14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce18:	4611      	mov	r1, r2
 800ce1a:	f7ff bb57 	b.w	800c4cc <_malloc_r>
 800ce1e:	b92a      	cbnz	r2, 800ce2c <_realloc_r+0x24>
 800ce20:	f7ff fae8 	bl	800c3f4 <_free_r>
 800ce24:	4625      	mov	r5, r4
 800ce26:	4628      	mov	r0, r5
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	f000 f81b 	bl	800ce66 <_malloc_usable_size_r>
 800ce30:	4284      	cmp	r4, r0
 800ce32:	4607      	mov	r7, r0
 800ce34:	d802      	bhi.n	800ce3c <_realloc_r+0x34>
 800ce36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce3a:	d812      	bhi.n	800ce62 <_realloc_r+0x5a>
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	4640      	mov	r0, r8
 800ce40:	f7ff fb44 	bl	800c4cc <_malloc_r>
 800ce44:	4605      	mov	r5, r0
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d0ed      	beq.n	800ce26 <_realloc_r+0x1e>
 800ce4a:	42bc      	cmp	r4, r7
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4631      	mov	r1, r6
 800ce50:	bf28      	it	cs
 800ce52:	463a      	movcs	r2, r7
 800ce54:	f7ff fab8 	bl	800c3c8 <memcpy>
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4640      	mov	r0, r8
 800ce5c:	f7ff faca 	bl	800c3f4 <_free_r>
 800ce60:	e7e1      	b.n	800ce26 <_realloc_r+0x1e>
 800ce62:	4635      	mov	r5, r6
 800ce64:	e7df      	b.n	800ce26 <_realloc_r+0x1e>

0800ce66 <_malloc_usable_size_r>:
 800ce66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6a:	1f18      	subs	r0, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	bfbc      	itt	lt
 800ce70:	580b      	ldrlt	r3, [r1, r0]
 800ce72:	18c0      	addlt	r0, r0, r3
 800ce74:	4770      	bx	lr
	...

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
